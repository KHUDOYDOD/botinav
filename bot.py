import logging
import hashlib
import time
import os
import sys
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from config import *
from market_analyzer import MarketAnalyzer
from utils import get_currency_keyboard, get_language_keyboard, format_signal_message
try:
    from generate_sample import create_analysis_image
except ImportError:
    logging.error("Could not import generate_sample module. Chart generation will be disabled.")
    def create_analysis_image(*args, **kwargs):
        logging.warning("Chart generation is disabled due to missing module")
        return False
from datetime import datetime, timedelta
import json
import platform
import psutil
from models import (
    add_user, get_user, approve_user, verify_user_password, update_user_language,
    get_all_users, get_pending_users, delete_user, set_user_admin_status, set_user_moderator_status,
    create_admin_user, get_approved_user_ids, ADMIN_USERNAME, ADMIN_PASSWORD_HASH,
    get_user_activity_stats, get_bot_settings, update_bot_setting, 
    export_bot_data, import_bot_data, get_moderator_permissions, update_moderator_permission
)
from keep_alive import keep_alive

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
PENDING_USERS = {}
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_PASSWORD, ADMIN_MENU, ADMIN_USER_MANAGEMENT, ADMIN_BROADCAST_MESSAGE = range(4)
ADMIN_CURRENCY_MANAGEMENT, ADMIN_CURRENCY_ADD, ADMIN_CURRENCY_EDIT = range(4, 7)
ADMIN_TEXT_MANAGEMENT, ADMIN_TEXT_ADD, ADMIN_TEXT_EDIT = range(7, 10)
ADMIN_ACTIVITY, ADMIN_SETTINGS, ADMIN_CHANGE_PASSWORD, ADMIN_ABOUT = range(10, 14)
ADMIN_EXPORT_DATA, ADMIN_IMPORT_DATA, ADMIN_LOGS, ADMIN_SERVER_STATUS = range(14, 18)
ADMIN_USER_ANALYTICS, ADMIN_SIGNAL_MANAGEMENT, ADMIN_DIRECT_MESSAGE = range(18, 21)
ADMIN_SEARCH_USER, ADMIN_OTC_SIGNALS, ADMIN_TRADING_VIEW = range(21, 24)
ADMIN_SCHEDULER, ADMIN_API, ADMIN_SECURITY, ADMIN_PROXY, ADMIN_AUTO_SIGNALS = range(24, 29)
ADMIN_SEND_MESSAGE_TO_USER = 29
ADMIN_MESSAGE_TO_PENDING, ADMIN_SELECT_USERS, ADMIN_CONTENT_MANAGER = range(30, 33)
ADMIN_STATISTICS, ADMIN_QUICK_COMMANDS, ADMIN_HISTORY, ADMIN_PLUGINS, ADMIN_MARKETPLACE = range(33, 38)
ADMIN_EDUCATION_MANAGEMENT = 38

def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        username = user.username

        # Add user to database
        add_user(user_id, username)
        user_data = get_user(user_id)

        # Set default language
        lang_code = user_data['language_code'] if user_data else 'tg'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data and user_data.get('is_approved'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            # –ü–µ—Ä–µ–¥–∞–µ–º user_data –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞
            keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
            await update.message.reply_text(
                MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
        elif username and username.lower() == ADMIN_USERNAME.lower():
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            create_admin_user(user_id, username)
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
            user_data = get_user(user_id)
            keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
            admin_welcome = f"üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username}.\n\n"
            await update.message.reply_text(
                admin_welcome,
                reply_markup=keyboard
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å escape-—Å–∏–º–≤–æ–ª–∞–º–∏
            await update.message.reply_text(
                MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            register_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")],
                [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
            ])
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from create_welcome_image import create_welcome_image
            
            welcome_text = f"üöÄ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{username}!*\n\n" \
                          "üîπ *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤!*\n\n" \
                          "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" \
                          "‚Ä¢ üíπ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è 30+ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä\n" \
                          "‚Ä¢ üìà –ù–∞–¥—ë–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MACD, EMA)\n" \
                          "‚Ä¢ ‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 95%\n" \
                          "‚Ä¢ üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5 —è–∑—ã–∫–æ–≤\n" \
                          "‚Ä¢ üìä –ß—ë—Ç–∫–∏–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n" \
                          "‚Ä¢ ‚è± –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö (1, 5, 15, 30 –º–∏–Ω—É—Ç)\n\n" \
                          "üíé –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:\n" \
                          "‚Ä¢ üèÜ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã: EUR/USD, GBP/USD, USD/JPY –∏ –¥—Ä—É–≥–∏–µ\n" \
                          "‚Ä¢ üåü –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã: EUR/GBP, GBP/JPY, EUR/JPY –∏ –¥—Ä—É–≥–∏–µ\n" \
                          "‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC/USD, ETH/USD, XRP/USD –∏ –¥—Ä—É–≥–∏–µ\n\n" \
                          "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n" \
                          "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: @tradeporu\n" \
                          "‚Ä¢ –°–∞–π—Ç: TRADEPO.RU\n\n" \
                          "üìä *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n" \
                          "‚è± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n" \
                          "üìù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, " \
                          "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /register –ø–æ–∑–∂–µ.\n\n" \
                          "üìû *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:* @tradeporu"
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if create_welcome_image():
                    with open('welcome_image.png', 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption=welcome_text,
                            reply_markup=register_keyboard,
                            parse_mode='MarkdownV2'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                        )
                else:
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await update.message.reply_text(
                        welcome_text,
                        reply_markup=register_keyboard,
                        parse_mode='Markdown'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=register_keyboard,
                    parse_mode='Markdown'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                )

    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await update.message.reply_text(MESSAGES['tg']['ERRORS']['GENERAL_ERROR'])

async def get_admin_chat_id(bot):
    """Get admin's chat ID by username"""
    try:
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        admin_chat = await bot.get_chat(f"@{ADMIN_USERNAME}")
        return admin_chat.id
    except Exception as e:
        logger.error(f"Error getting admin chat ID: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
        return None

async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # Ignore header buttons
    if query.data.startswith('header_'):
        await query.answer()
        return

    admin_username = update.effective_user.username

    if not admin_username or admin_username.lower() != ADMIN_USERNAME.lower():
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    action, user_id = query.data.split('_')
    user_id = int(user_id)

    if user_id not in PENDING_USERS:
        await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return

    user_info = PENDING_USERS[user_id]

    if action == "approve":
        try:
            password = ''.join([str(hash(datetime.now()))[i:i+2] for i in range(0, 8, 2)])
            password_hash = hash_password(password)
            
            if approve_user(user_id, password_hash):
                del PENDING_USERS[user_id]
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                escaped_password = password.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = get_user(user_id)
                lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
                
                # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                approval_messages = {
                    'tg': f"‚úÖ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥\\!\n\n–†–∞–º–∑–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –≤–æ—Ä–∏–¥ —à—É–¥–∞–Ω: `{escaped_password}`\n\n–õ—É—Ç—Ñ–∞–Ω, –æ–Ω—Ä–æ –Ω–∏–≥–æ“≥ –¥–æ—Ä–µ–¥\\.",
                    'ru': f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!\n\n–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: `{escaped_password}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ\\.",
                    'uz': f"‚úÖ Arizangiz tasdiqlandi\\!\n\nKirish uchun parolingiz: `{escaped_password}`\n\nIltimos, uni saqlab qoling\\.",
                    'kk': f"‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –º–∞“õ“±–ª–¥–∞–Ω–¥—ã\\!\n\n–ö—ñ—Ä—É “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑: `{escaped_password}`\n\n–û–Ω—ã —Å–∞“õ—Ç–∞–ø “õ–æ–π—ã“£—ã–∑\\.",
                    'en': f"‚úÖ Your request has been approved\\!\n\nYour password: `{escaped_password}`\n\nPlease save it\\."
                }
                
                # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                button_texts = {
                    'tg': "üöÄ –ë–∞ –±–æ—Ç –≤–æ—Ä–∏–¥ —à–∞–≤–µ–¥",
                    'ru': "üöÄ –í–æ–π—Ç–∏ –≤ –±–æ—Ç",
                    'uz': "üöÄ Botga kirish",
                    'kk': "üöÄ –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É",
                    'en': "üöÄ Enter the bot"
                }
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = approval_messages.get(lang_code, approval_messages['tg'])
                button_text = button_texts.get(lang_code, button_texts['tg'])
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton(button_text, callback_data="return_to_main")]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='MarkdownV2',
                    reply_markup=keyboard
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} –æ–¥–æ–±—Ä–µ–Ω")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    else:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del PENDING_USERS[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –ù–ï —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        from models import reset_user_approval
        reset_user_approval(user_id)
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        rejection_messages = {
            'tg': "‚ùå –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ä–∞–¥–¥ –∫–∞—Ä–¥–∞ —à—É–¥.\n\n–®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –¥–∞—Ä—Ö–æ—Å—Ç–∏ –Ω–∞–≤—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥.",
            'ru': "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
            'uz': "‚ùå Arizangiz administrator tomonidan rad etildi.\n\nSiz yangi ariza yuborishingiz mumkin.",
            'kk': "‚ùå –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω “õ–∞–±—ã–ª–¥–∞–Ω–±–∞–¥—ã.\n\n–°—ñ–∑ –∂–∞“£–∞ ”©—Ç—ñ–Ω—ñ—à –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã–∑.",
            'en': "‚ùå Your request has been rejected by the administrator.\n\nYou can send a new request."
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = rejection_messages.get(lang_code, rejection_messages['tg'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="send_request")],
            [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            reply_markup=keyboard
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.effective_user
    user_id = user.id
    user_data = get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ admin_panel
    if context.user_data and context.user_data.get('waiting_for_admin_password'):
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
        context.user_data.pop('waiting_for_admin_password', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        password = update.message.text
        password_hash = hash_password(password)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        if password_hash == ADMIN_PASSWORD_HASH:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
            await update.message.reply_text(
                "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                reply_markup=get_admin_keyboard()
            )
            return
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            lang_code = user_data['language_code'] if user_data else 'tg'
            keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
            await update.message.reply_text(
                MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
            return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞
    if not user_data:
        add_user(user.id, user.username)
        user_data = get_user(user.id)

    lang_code = user_data['language_code'] if user_data else 'tg'
    keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
    await update.message.reply_text(
        MESSAGES[lang_code]['WELCOME'],
        reply_markup=keyboard,
        parse_mode='MarkdownV2'
    )

async def handle_language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        lang_code = query.data.split('_')[1]
        user_id = update.effective_user.id
        logger.info(f"Language change request from user {user_id} to {lang_code}")

        # Update user's language in database
        if update_user_language(user_id, lang_code):
            # Get fresh keyboard with new language and user data for admin/moderator buttons
            user_data = get_user(user_id)  # Get updated user data after language change
            keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
            welcome_message = MESSAGES[lang_code]['WELCOME']

            try:
                # Delete previous message if exists
                try:
                    await query.message.delete()
                except Exception:
                    pass  # Ignore if message can't be deleted

                # Send new welcome message
                await update.effective_chat.send_message(
                    text=welcome_message,
                    reply_markup=keyboard,
                    parse_mode='MarkdownV2'
                )

                # Send confirmation in the selected language
                lang_confirmations = {
                    'tg': '‚úÖ –ó–∞–±–æ–Ω –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥',
                    'ru': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω',
                    'uz': '‚úÖ Til o ªzgartirildi',
                    'kk': '‚úÖ –¢—ñ–ª ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ',
                    'en': '‚úÖ Language changed'
                }
                await query.answer(lang_confirmations.get(lang_code, '‚úÖ OK'))
                logger.info(f"Language successfully changed to {lang_code} for user {user_id}")

            except Exception as e:
                logger.error(f"Error sending message after language change: {e}")
                await query.answer("‚ùå Error sending message")
        else:
            logger.error(f"Failed to update language to {lang_code} for user {user_id}")
            await query.answer("‚ùå Error updating language")

    except Exception as e:
        logger.error(f"Language selection error: {str(e)}")
        await query.answer("‚ùå Error processing language change")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        user_id = update.effective_user.id
        user_data = get_user(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        is_admin = user_data and user_data.get('is_admin', False)
        is_moderator = user_data and user_data.get('is_moderator', False)
        is_approved = user_data and user_data.get('is_approved')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        if query.data == "regular_pairs":
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_data
            from models import get_user_language
            lang_code = 'ru'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                lang_code = get_user_language(user_id) or 'ru'
            except Exception as e:
                logger.error(f"Error getting language for user {user_id}: {e}")
            logger.info(f"Current language for user {user_id}: {lang_code}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ã—á–Ω—ã–º–∏ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            keyboard.append([InlineKeyboardButton("üåü –û–°–ù–û–í–ù–´–ï –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´ üåü", callback_data="header_main")])
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–µ–∫—Å –ø–∞—Ä—ã
            major_pairs = [
                'üí∂ EUR/USD', 'üí∑ GBP/USD', 'üí¥ USD/JPY', 'üí∞ USD/CHF', 
                'üçÅ USD/CAD', 'ü¶ò AUD/USD', 'ü•ù NZD/USD'
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 2 –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
            for i in range(0, len(major_pairs), 2):
                row = []
                row.append(InlineKeyboardButton(major_pairs[i], callback_data=major_pairs[i]))
                if i + 1 < len(major_pairs):
                    row.append(InlineKeyboardButton(major_pairs[i + 1], callback_data=major_pairs[i + 1]))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ EUR
            keyboard.append([InlineKeyboardButton("üí∂ –ö–†–û–°–°-–ö–£–†–°–´ EUR üí∂", callback_data="header_eur")])
            
            # –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã EUR
            eur_pairs = [
                'üá™üá∫ EUR/GBP', 'üá™üá∫ EUR/JPY', 'üá™üá∫ EUR/CHF', 
                'üá™üá∫ EUR/CAD', 'üá™üá∫ EUR/AUD', 'üá™üá∫ EUR/NZD'
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 2 –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ EUR
            for i in range(0, len(eur_pairs), 2):
                row = []
                row.append(InlineKeyboardButton(eur_pairs[i], callback_data=eur_pairs[i]))
                if i + 1 < len(eur_pairs):
                    row.append(InlineKeyboardButton(eur_pairs[i + 1], callback_data=eur_pairs[i + 1]))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ GBP
            keyboard.append([InlineKeyboardButton("üí∑ –ö–†–û–°–°-–ö–£–†–°–´ GBP üí∑", callback_data="header_gbp")])
            
            # –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã GBP
            gbp_pairs = [
                'üá¨üáß GBP/JPY', 'üá¨üáß GBP/CHF', 'üá¨üáß GBP/CAD', 
                'üá¨üáß GBP/AUD', 'üá¨üáß GBP/NZD'
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 2 –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ GBP
            for i in range(0, len(gbp_pairs), 2):
                row = []
                row.append(InlineKeyboardButton(gbp_pairs[i], callback_data=gbp_pairs[i]))
                if i + 1 < len(gbp_pairs):
                    row.append(InlineKeyboardButton(gbp_pairs[i + 1], callback_data=gbp_pairs[i + 1]))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
            keyboard.append([InlineKeyboardButton("üîÑ –î–†–£–ì–ò–ï –ö–†–û–°–°-–ö–£–†–°–´ üîÑ", callback_data="header_other")])
            
            # –î—Ä—É–≥–∏–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã
            other_pairs = [
                'üèùÔ∏è AUD/JPY', 'üèùÔ∏è AUD/CAD', 'üèùÔ∏è AUD/CHF', 'üèùÔ∏è AUD/NZD',
                'üá®üá¶ CAD/JPY', 'üá®üá¶ CAD/CHF', 'üá®üá≠ CHF/JPY',
                'ü•ù NZD/JPY', 'ü•ù NZD/CHF', 'ü•ù NZD/CAD'
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 2 –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
            for i in range(0, len(other_pairs), 2):
                row = []
                row.append(InlineKeyboardButton(other_pairs[i], callback_data=other_pairs[i]))
                if i + 1 < len(other_pairs):
                    row.append(InlineKeyboardButton(other_pairs[i + 1], callback_data=other_pairs[i + 1]))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            keyboard.append([InlineKeyboardButton("‚Çø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ‚Çø", callback_data="header_crypto")])
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
            crypto_pairs = [
                '‚Çø BTC/USD', '‚ü† ETH/USD', '‚ú® XRP/USD', 'üêï DOGE/USD', '‚òÄÔ∏è SOL/USD',
                'üîµ LINK/USD', 'üÉè ADA/USD', 'üëæ DOT/USD', 'üíπ BNB/USD', 'üî∑ LTC/USD',
                '‚Çø BTC/EUR', '‚ü† ETH/EUR', '‚Çø BTC/JPY', '‚ü† ETH/JPY'
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 2 –ø–∞—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            for i in range(0, len(crypto_pairs), 2):
                row = []
                row.append(InlineKeyboardButton(crypto_pairs[i], callback_data=crypto_pairs[i]))
                if i + 1 < len(crypto_pairs):
                    row.append(InlineKeyboardButton(crypto_pairs[i + 1], callback_data=crypto_pairs[i + 1]))
                keyboard.append(row)
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return_button_text = {
                'tg': 'üè† –ë–∞ —Å–∞“≥–∏—Ñ–∞–∏ –∞–≤–≤–∞–ª',
                'ru': 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é',
                'uz': 'üè† Bosh sahifaga',
                'kk': 'üè† –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ',
                'en': 'üè† Return to Main'
            }
            
            keyboard.append([
                InlineKeyboardButton(
                    return_button_text.get(lang_code, return_button_text['ru']),
                    callback_data="return_to_main"
                )
            ])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
            title_text = {
                'tg': 'üí± “∂—É—Ñ—Ç“≥–æ–∏ –∞—Å—ä–æ—Ä”£',
                'ru': 'üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã',
                'uz': 'üí± Valyuta juftlari',
                'kk': 'üí± –í–∞–ª—é—Ç–∞ –∂“±–ø—Ç–∞—Ä—ã',
                'en': 'üí± Currency Pairs'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            await query.edit_message_text(
                title_text.get(lang_code, title_text['ru']),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤ (–Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if query.data.startswith("header_"):
            await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OTC Pocket Option –∫–Ω–æ–ø–æ–∫
        if query.data == "otc_pairs":
            await handle_otc_pairs(update, context)
            return
            
        if query.data == "otc_signals":
            await handle_otc_signals(update, context)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É
        if query.data == "trading_education":
            logger.info(f"Showing trading education menu for user {user_id}")
            await show_trading_education_menu(update, context)
            return
            
        if query.data == "trading_books":
            logger.info(f"Redirecting to handle_trading_books for user {user_id}")
            await handle_trading_books(update, context)
            return
            
        if query.data.startswith("book_details_"):
            logger.info(f"Processing book details request for user {user_id}")
            await handle_book_details(update, context)
            return
            
        if query.data == "trading_beginner":
            logger.info(f"Redirecting to handle_trading_beginner for user {user_id}")
            await handle_trading_beginner(update, context)
            return
            
        if query.data == "trading_strategies":
            logger.info(f"Redirecting to handle_trading_strategies for user {user_id}")
            await handle_trading_strategies(update, context)
            return
            
        if query.data.startswith("strategy_"):
            logger.info(f"Processing strategy details for user {user_id}")
            await handle_trading_strategies(update, context)
            return
            
        if query.data == "trading_tools":
            logger.info(f"Redirecting to handle_trading_tools for user {user_id}")
            await handle_trading_tools(update, context)
            return
            
        if query.data.startswith("tool_"):
            logger.info(f"Processing tool details for user {user_id}")
            await handle_trading_tools(update, context)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö OTC –ø–∞—Ä
        if query.data.startswith("otc_") and "refresh" not in query.data and "subscribe" not in query.data and "settings" not in query.data:
            await handle_otc_pair_analysis(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–ø–∞–Ω–µ–ª–∏
        if query.data == "admin_panel":
            if is_admin:
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ (—Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º)
                create_admin_user(user_id, update.effective_user.username or "")
                
                # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
                await query.edit_message_text(
                    "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
                    parse_mode='HTML'
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
                context.user_data['waiting_for_admin_password'] = True
                return ADMIN_PASSWORD
            else:
                await query.edit_message_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return_to_main")
                    ]])
                )
                return
        
        elif query.data == "moderator_panel":
            if is_moderator or is_admin:
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                moderator_keyboard = [
                    [InlineKeyboardButton("‚úÖ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_pending")],
                    [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_all_users")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
                ]
                
                await query.edit_message_text(
                    "üõ°Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(moderator_keyboard)
                )
                return
            else:
                await query.edit_message_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return_to_main")
                    ]])
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        is_admin_action = query.data.startswith("admin_") or query.data.startswith("send_message_to_")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –≤—ã—Ö–æ–¥–∏–º
        # –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω–∞
        if is_admin_action and is_admin:
            return
            
        # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∑–¥–µ—Å—å
        if is_admin_action and (is_moderator or is_admin):
            # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            moderator_actions = ["admin_pending", "admin_all_users"]
            
            if query.data in moderator_actions:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                if query.data == "admin_pending":
                    from models import get_pending_users
                    pending_users = get_pending_users()
                    keyboard = get_pending_keyboard(pending_users, is_moderator=True)
                    
                    await query.edit_message_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(pending_users)}",
                        reply_markup=keyboard
                    )
                    return
                
                elif query.data == "admin_all_users":
                    from models import get_all_users
                    users = get_all_users()
                    keyboard = get_user_list_keyboard(users, back_command="moderator_panel")
                    
                    await query.edit_message_text(
                        f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}",
                        reply_markup=keyboard
                    )
                    return
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–∂–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_for_all = [
            "send_request",
            "return_to_main",
            "change_language",
        ]
        is_allowed_action = query.data in allowed_for_all or query.data.startswith('lang_')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not (is_approved or is_admin or is_allowed_action):
            register_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")
            ]])
            
            await query.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=register_keyboard
            )
            return
            
        # Handle "Return to Main" button
        if query.data == "return_to_main":
            lang_code = user_data['language_code'] if user_data else 'tg'

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
            keyboard = get_currency_keyboard(current_lang=lang_code, user_data=user_data)
            try:
                await query.message.delete()
            except Exception:
                pass  # Ignore if message can't be deleted

            await update.effective_chat.send_message(
                text=MESSAGES[lang_code]['WELCOME'],
                reply_markup=keyboard,
                parse_mode='MarkdownV2'
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if query.data == "send_request":
            user = update.effective_user
            user_id = user.id
            username = user.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            user_data = get_user(user_id)
            
            if user_data and user_data.get('is_approved'):
                await query.edit_message_text(
                    "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if not user_data:
                add_user(user_id, username)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
            PENDING_USERS[user_id] = {
                'user_id': user_id,
                'username': username,
                'timestamp': datetime.now()
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = get_user(user_id)
            lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            request_messages = {
                'tg': "üìù –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞ –º–∞—ä–º—É—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.\n\n"
                      "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –±–æ—Ç, –ª—É—Ç—Ñ–∞–Ω:\n"
                      "1Ô∏è‚É£ –î–∞—Ä —Å–∞–π—Ç–∏ Pocket Option –±–æ —Ç–∞—Ä–∏“õ–∏ TRADEPO.RU –±–∞ “õ–∞–π–¥ –≥–∏—Ä–µ–¥\n"
                      "2Ô∏è‚É£ ID —Ö—É–¥—Ä–æ –±–∞ –∞–¥–º–∏–Ω —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (–º–∏—Å–æ–ª: id 111111)\n\n"
                      "–ë–∞—ä–¥ –∞–∑ –∏–Ω, –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä—Ä–∞—Å”£ –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥.",
                      
                'ru': "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                      "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                      "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ Pocket Option —á–µ—Ä–µ–∑ TRADEPO.RU\n"
                      "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–ø—Ä–∏–º–µ—Ä: id 111111)\n\n"
                      "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                      
                'uz': "üìù Arizangiz administratorga yuborildi.\n\n"
                      "‚ö†Ô∏è Botga kirish uchun:\n"
                      "1Ô∏è‚É£ Pocket Option saytida TRADEPO.RU orqali ro'yxatdan o'ting\n"
                      "2Ô∏è‚É£ ID raqamingizni adminga yuboring (misol: id 111111)\n\n"
                      "Shundan so'ng arizangiz ko'rib chiqiladi.",
                      
                'kk': "üìù –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.\n\n"
                      "‚ö†Ô∏è –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É “Ø—à—ñ–Ω:\n"
                      "1Ô∏è‚É£ Pocket Option —Å–∞–π—Ç—ã–Ω–¥–∞ TRADEPO.RU –∞—Ä“õ—ã–ª—ã —Ç—ñ—Ä–∫–µ–ª—ñ“£—ñ–∑\n"
                      "2Ô∏è‚É£ ID –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: id 111111)\n\n"
                      "–û—Å—ã–¥–∞–Ω –∫–µ–π—ñ–Ω ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞—Ä–∞–ª–∞–¥—ã.",
                      
                'en': "üìù Your request has been sent to the administrator.\n\n"
                      "‚ö†Ô∏è To get access to the bot, please:\n"
                      "1Ô∏è‚É£ Register on Pocket Option website through TRADEPO.RU\n"
                      "2Ô∏è‚É£ Send your ID to the administrator (example: id 111111)\n\n"
                      "After that, your request will be reviewed."
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
            message = request_messages.get(lang_code, request_messages['tg'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_messages = {
                'tg': "\n\nüìû –ê–≥–∞—Ä —Å–∞–≤–æ–ª –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ —Ö–∞–¥–∞–º–æ—Ç–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥: @tradeporu",
                'ru': "\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @tradeporu",
                'uz': "\n\nüìû Savollaringiz bo'lsa, qo'llab-quvvatlash xizmatiga murojaat qilishingiz mumkin: @tradeporu",
                'kk': "\n\nüìû –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑: @tradeporu",
                'en': "\n\nüìû If you have any questions, you can contact support: @tradeporu"
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            support_text = support_messages.get(lang_code, support_messages['tg'])
            message += support_text
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            from create_request_image import create_request_image
            try:
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if create_request_image(username):
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.delete()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    with open('request_image.png', 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=user_id,
                            photo=photo,
                            caption=message,
                            reply_markup=keyboard
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                    ])
                    await query.edit_message_text(message, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")]
                ])
                await query.edit_message_text(message, reply_markup=keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            admin_chat_id = await get_admin_chat_id(context.bot)
            if admin_chat_id:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
                    ]
                ]
                await context.bot.send_message(
                    chat_id=admin_chat_id,
                    text=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üÜî ID: {user_id}\n"
                        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
                # —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                logger.warning(f"Admin chat not found. Registration request from user @{username} (ID: {user_id}) stored in pending list.")
            return

        # Ignore clicks on header buttons
        if query.data.startswith('header_'):
            await query.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not user_data:
            add_user(user_id, update.effective_user.username)
            user_data = get_user(user_id)
        
        lang_code = user_data['language_code'] if user_data else 'tg'
        logger.info(f"Current language for user {user_id}: {lang_code}")

        if query.data.startswith('lang_'):
            await handle_language_selection(update, context)
            return

        if query.data == "change_language":
            keyboard = get_language_keyboard()
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / Tilni tanlang / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:"
            try:
                if query.message.photo:
                    await query.message.reply_text(msg, reply_markup=keyboard)
                else:
                    await query.message.edit_text(msg, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error showing language selection: {e}")
            return

        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤—ã—à–µ

        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤—ã—à–µ
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if query.data.startswith("mod_"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            if user_data and user_data.get('is_moderator'):
                action = query.data
                
                if action == "mod_users":
                    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    await query.edit_message_text(
                        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_user_management_keyboard()
                    )
                    return
                
                elif action == "mod_pending":
                    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
                    pending_users = get_pending_users()
                    
                    if not pending_users:
                        keyboard = [
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="moderator_panel")]
                        ]
                        await query.edit_message_text(
                            "üìù –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                            "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                        keyboard = get_pending_keyboard(pending_users, is_moderator=True)
                        await query.edit_message_text(
                            "üìù –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:",
                            reply_markup=keyboard
                        )
                    return
                
                elif action == "mod_stats":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                    users = get_all_users()
                    total_users = len(users)
                    approved_users = sum(1 for user in users if user.get('is_approved'))
                    admin_users = sum(1 for user in users if user.get('is_admin'))
                    moderator_users = sum(1 for user in users if user.get('is_moderator'))
                    pending_users = len(get_pending_users())
                    
                    keyboard = [
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="moderator_panel")]
                    ]
                    
                    await query.edit_message_text(
                        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {approved_users}\n"
                        f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}\n"
                        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
                        f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderator_users}",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return
            else:
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
                return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not (is_approved or is_admin):
            register_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")
            ]])
            
            await query.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=register_keyboard
            )
            return

        pair = query.data
        symbol = CURRENCY_PAIRS.get(pair)
        if not symbol:
            await query.message.reply_text(MESSAGES[lang_code]['ERRORS']['GENERAL_ERROR'])
            return

        analyzing_message = await query.message.reply_text(
            MESSAGES[lang_code]['ANALYZING'],
            parse_mode='MarkdownV2'
        )

        try:
            analyzer = MarketAnalyzer(symbol)
            analyzer.set_language(lang_code)
            analysis_result = analyzer.analyze_market()

            if not analysis_result or 'error' in analysis_result:
                error_msg = analysis_result.get('error', MESSAGES[lang_code]['ERRORS']['ANALYSIS_ERROR'])
                await analyzing_message.edit_text(error_msg, parse_mode='MarkdownV2')
                return

            market_data, error_message = analyzer.get_market_data(minutes=30)
            if error_message or market_data is None or market_data.empty:
                await analyzing_message.edit_text(MESSAGES[lang_code]['ERRORS']['NO_DATA'])
                return

            result_message = format_signal_message(pair, analysis_result, lang_code)

            try:
                create_analysis_image(analysis_result, market_data, lang_code)
                with open('analysis_sample.png', 'rb') as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=result_message,
                        parse_mode='MarkdownV2',
                        reply_markup=get_currency_keyboard(current_lang=lang_code, user_data=user_data)
                    )
                await analyzing_message.delete()
            except Exception as img_error:
                logger.error(f"Chart error: {str(img_error)}")
                await analyzing_message.edit_text(
                    text=result_message,
                    parse_mode='MarkdownV2',
                    reply_markup=get_currency_keyboard(current_lang=lang_code, user_data=user_data)
                )

        except Exception as e:
            logger.error(f"Analysis error: {str(e)}")
            await analyzing_message.edit_text(MESSAGES[lang_code]['ERRORS']['ANALYSIS_ERROR'])

    except Exception as e:
        logger.error(f"Button click error: {str(e)}")
        lang_code = 'tg'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await query.message.reply_text(MESSAGES[lang_code]['ERRORS']['GENERAL_ERROR'])

async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send the website.zip file to the user"""
    try:
        with open('website.zip', 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename='website.zip',
                caption='üåê –ê—Ä—Ö–∏–≤–∏ –≤–µ–±-—Å–∞–π—Ç | –ê—Ä—Ö–∏–≤ –≤–µ–±-—Å–∞–π—Ç–∞ | Website archive'
            )
    except Exception as e:
        logger.error(f"Download error: {str(e)}")
        await update.message.reply_text("‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–æ—Ä–≥–∏—Ä”£ —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.")

def get_admin_keyboard():
    """–°–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"),
            InlineKeyboardButton("üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏", callback_data="admin_currencies")
        ],
        [
            InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏", callback_data="admin_texts"),
            InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_broadcast")
        ],
        
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        [
            InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º", callback_data="admin_education")
        ],
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Å–µ–Ω–¥–∂–∏–Ω–≥–∞
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
            InlineKeyboardButton("üì© –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_direct_message")
        ],
        [
            InlineKeyboardButton("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º", callback_data="admin_message_to_pending"),
            InlineKeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_select_users")
        ],
        
        # OTC –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        [
            InlineKeyboardButton("üì± OTC Pocket Option", callback_data="admin_otc_signals"),
            InlineKeyboardButton("üìä Trading View", callback_data="admin_trading_view")
        ],
        
        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è", callback_data="admin_statistics")
        ],
        [
            InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        [
            InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏", callback_data="admin_signals"),
            InlineKeyboardButton("üë§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_analytics")
        ],
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ API
        [
            InlineKeyboardButton("‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á", callback_data="admin_scheduler"),
            InlineKeyboardButton("üîå API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="admin_api")
        ],
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        [
            InlineKeyboardButton("üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data="admin_content_manager"),
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="admin_quick_commands")
        ],
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [
            InlineKeyboardButton("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="admin_security"),
            InlineKeyboardButton("üåê –ü—Ä–æ–∫—Å–∏", callback_data="admin_proxy")
        ],
        
        # –î–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        [
            InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export"),
            InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_import")
        ],
        [
            InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_logs"),
            InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="admin_server_status")
        ],
        
        # –ò—Å—Ç–æ—Ä–∏—è –∏ –ø–ª–∞–≥–∏–Ω—ã
        [
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_history"),
            InlineKeyboardButton("üß© –ü–ª–∞–≥–∏–Ω—ã", callback_data="admin_plugins")
        ],
        
        # Marketplace –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        [
            InlineKeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", callback_data="admin_marketplace"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ë–î", callback_data="admin_update_db")
        ],
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        [
            InlineKeyboardButton("üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="admin_change_password"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="admin_about")
        ],
        
        # –†–∞–∑–Ω–æ–µ
        [
            InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"),
            InlineKeyboardButton("‚Ü©Ô∏è –í—ã—Ö–æ–¥", callback_data="return_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_management_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="admin_pending")],
        [InlineKeyboardButton("üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_user_action_keyboard(user_id, is_approved=False, is_admin=False, is_moderator=False, back_command="admin_pending"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    keyboard = []
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    if not is_approved:
        keyboard.append([
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ])
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
        admin_text = "‚ùå –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞" if is_admin else "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"
        moderator_text = "‚ùå –£–±—Ä–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" if is_moderator else "üî∞ –°–¥–µ–ª–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
        
        keyboard.append([
            InlineKeyboardButton(admin_text, callback_data=f"toggle_admin_{user_id}_{0 if is_admin else 1}"),
            InlineKeyboardButton(moderator_text, callback_data=f"toggle_moderator_{user_id}_{0 if is_moderator else 1}")
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        keyboard.append([
            InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"block_user_{user_id}")
        ])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard.append([
            InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"send_message_to_{user_id}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_command)])
    
    return InlineKeyboardMarkup(keyboard)

def get_user_list_keyboard(users, page=0, page_size=5, back_command="admin_all_users"):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    total_pages = (len(users) + page_size - 1) // page_size if users else 1
    start = page * page_size
    end = min(start + page_size, len(users)) if users else 0
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if users:
        for user in users[start:end]:
            username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            user_id = user.get('user_id')
            is_approved = "‚úÖ" if user.get('is_approved') else "‚è≥"
            is_admin = "üëë" if user.get('is_admin') else ""
            button_text = f"{is_approved} {is_admin} @{username}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"user_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="header_none")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}_{back_command}"))
    nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="header_page"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}_{back_command}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
        
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
    back_button_text = "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
    if back_command.startswith("mod_"):
        back_to = "moderator_panel"
    else:
        back_to = "admin_users"
    keyboard.append([InlineKeyboardButton(back_button_text, callback_data=back_to)])
    
    return InlineKeyboardMarkup(keyboard)

def get_pending_keyboard(pending_users, page=0, page_size=5, is_moderator=False):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    back_command = "mod_pending" if is_moderator else "admin_pending"
    return get_user_list_keyboard(pending_users, page, page_size, back_command)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏ —ç—Ç–æ
    if username and username.lower() == ADMIN_USERNAME.lower():
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ (—Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º)
        create_admin_user(user_id, username)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await update.message.reply_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:"
        )
        return ADMIN_PASSWORD
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."
        )
        return ConversationHandler.END

async def admin_check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    password = update.message.text
    password_hash = hash_password(password)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if password_hash == ADMIN_PASSWORD_HASH:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        await update.message.reply_text(
            "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."
        )
        return ConversationHandler.END

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "admin_users":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        await query.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_user_management_keyboard()
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_broadcast":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("‚úÖ –¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º", callback_data="broadcast_approved")],
            [InlineKeyboardButton("‚è≥ –¢–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–º", callback_data="broadcast_pending")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_BROADCAST_MESSAGE
        
    elif action == "admin_education":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        keyboard = [
            [
                InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É", callback_data="admin_edit_books"),
                InlineKeyboardButton("üéì –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", callback_data="admin_edit_beginner")
            ],
            [
                InlineKeyboardButton("üìà –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="admin_edit_strategies"),
                InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞", callback_data="admin_edit_tools")
            ],
            [
                InlineKeyboardButton("üì± OTC –ø–∞—Ä—ã –∏ —Å–∏–≥–Ω–∞–ª—ã", callback_data="admin_edit_otc")
            ],
            [
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
        
        await query.edit_message_text(
            "üìö *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_EDUCATION_MANAGEMENT
    
    elif action == "admin_direct_message":
        # –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.edit_message_text(
            "üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return ADMIN_DIRECT_MESSAGE
    
    elif action == "admin_search_user":
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.edit_message_text(
            "üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return ADMIN_SEARCH_USER
    
    elif action == "admin_message_to_pending":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        pending_users = get_pending_users()
        count = len(pending_users) if pending_users else 0
        
        keyboard = [
            [InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º", callback_data="send_to_all_pending")],
            [InlineKeyboardButton("üë§ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="select_pending_users")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            f"–í—Å–µ–≥–æ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_MESSAGE_TO_PENDING
    
    elif action == "admin_select_users":
        # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        all_users = get_all_users()
        count = len(all_users) if all_users else 0
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", callback_data="search_users_criteria")],
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_from_list")],
            [InlineKeyboardButton("üìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="segment_by_activity")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            f"üë• –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_SELECT_USERS
    
    elif action == "admin_content_manager":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–æ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", callback_data="manage_images")],
            [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏", callback_data="manage_charts")],
            [InlineKeyboardButton("üéûÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ", callback_data="manage_videos")],
            [InlineKeyboardButton("üìé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", callback_data="manage_files")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif action == "admin_statistics":
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_user_activity")],
            [InlineKeyboardButton("üìà –†–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏", callback_data="stats_audience_growth")],
            [InlineKeyboardButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", callback_data="stats_registration_conversion")],
            [InlineKeyboardButton("üìâ –û—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_user_churn")],
            [InlineKeyboardButton("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="stats_by_country")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_STATISTICS
    
    elif action == "admin_quick_commands":
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="quick_restart_bot")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="quick_clear_cache")],
            [InlineKeyboardButton("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="quick_generate_report")],
            [InlineKeyboardButton("üìß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É", callback_data="quick_check_mail")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_QUICK_COMMANDS
    
    elif action == "admin_history":
        # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìú –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="history_user_actions")],
            [InlineKeyboardButton("üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="history_admin_actions")],
            [InlineKeyboardButton("üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data="history_system_events")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_HISTORY
    
    elif action == "admin_plugins":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏ –±–æ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã", callback_data="plugins_installed")],
            [InlineKeyboardButton("‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω", callback_data="plugins_install")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–≥–∏–Ω", callback_data="plugins_remove")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω—ã", callback_data="plugins_update")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üß© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_PLUGINS
    
    elif action == "admin_marketplace":
        # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üõí –û–±–∑–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞", callback_data="marketplace_browse")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π", callback_data="marketplace_search")],
            [InlineKeyboardButton("‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è", callback_data="marketplace_popular")],
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è", callback_data="marketplace_new")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_MARKETPLACE
        
    elif action == "admin_otc_signals":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OTC —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è Pocket Option
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="otc_view_active")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", callback_data="otc_add_signal")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OTC", callback_data="otc_settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="otc_stats")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OTC —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è Pocket Option\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS
    
    elif action == "admin_stats":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users = get_all_users()
        total_users = len(users)
        approved_users = sum(1 for user in users if user.get('is_approved'))
        admin_users = sum(1 for user in users if user.get('is_admin'))
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {approved_users}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {total_users - approved_users}\n"
        )
        
        await query.edit_message_text(
            stats_text,
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif action == "admin_update_db":
        # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from models import init_db
            init_db()
            await query.edit_message_text(
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=get_admin_keyboard()
            )
        except Exception as e:
            logger.error(f"Error updating database: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup=get_admin_keyboard()
            )
        return ADMIN_MENU
    
    elif action == "change_language":
        # –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞
        keyboard = get_language_keyboard()
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / Tilni tanlang / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:",
            reply_markup=keyboard
        )
        return ADMIN_MENU
    
    elif action == "admin_currencies":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
        from models import get_all_currency_pairs
        currency_pairs = get_all_currency_pairs()
        
        currency_list = "\n".join([
            f"- {pair['display_name']} ({pair['pair_code']}): {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if pair['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
            for pair in currency_pairs
        ])
        
        if not currency_list:
            currency_list = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"
        
        currency_keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É", callback_data="admin_add_currency")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="admin_refresh_currencies")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            f"üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n{currency_list}",
            reply_markup=InlineKeyboardMarkup(currency_keyboard)
        )
        return ADMIN_CURRENCY_MANAGEMENT
        
    elif action == "admin_texts":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏
        from models import get_all_bot_messages
        messages = get_all_bot_messages()
        
        texts_keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="admin_add_text")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º
        message_keys = {}
        for msg in messages:
            key = msg['message_key']
            if key not in message_keys:
                message_keys[key] = []
            message_keys[key].append(msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        for key in message_keys:
            texts_keyboard.insert(-1, [InlineKeyboardButton(f"üìù {key}", callback_data=f"admin_edit_text_{key}")])
        
        if not message_keys:
            message_summary = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"
        else:
            message_summary = "–¢–µ–∫—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join([
                f"- {key} ({len(langs)} —è–∑—ã–∫–æ–≤)" 
                for key, langs in message_keys.items()
            ])
        
        await query.edit_message_text(
            f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n{message_summary}",
            reply_markup=InlineKeyboardMarkup(texts_keyboard)
        )
        return ADMIN_TEXT_MANAGEMENT
        
    elif action == "admin_activity":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        # –ó–∞–≥–ª—É—à–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_text = (
            "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            "‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 12\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 34\n"
            "‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 145\n\n"
            "üîç –¢–æ–ø-5 –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n"
            "1. BTC/USD - 28 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "2. EUR/USD - 23 –∑–∞–ø—Ä–æ—Å–∞\n"
            "3. ETH/USD - 19 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "4. USD/RUB - 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "5. GBP/USD - 12 –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "‚è± –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ 9:00-12:00 - 23%\n"
            "‚Ä¢ 13:00-17:00 - 35%\n"
            "‚Ä¢ 18:00-22:00 - 42%"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            activity_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_ACTIVITY
    
    elif action == "admin_settings":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞
        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: 100\n"
            "‚Ä¢ –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: 3 —Å–µ–∫—É–Ω–¥—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n\n"
            "üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
            "‚Ä¢ –î–ª–∏–Ω–∞ EMA: 12, 26\n"
            "‚Ä¢ –ü–µ—Ä–∏–æ–¥ RSI: 14\n"
            "‚Ä¢ –ü–µ—Ä–∏–æ–¥ Bollinger Bands: 20\n\n"
            "üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö: –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω—É: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        )
        
        settings_keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(settings_keyboard)
        )
        return ADMIN_SETTINGS
    
    elif action == "admin_change_password":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['admin_changing_password'] = True
        return ADMIN_CHANGE_PASSWORD
    
    elif action == "admin_about":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        about_text = (
            "‚ÑπÔ∏è –û –±–æ—Ç–µ\n\n"
            "‚ú® *Trade Analysis Bot* ‚ú®\n\n"
            "–í–µ—Ä—Å–∏—è: 2.0.0\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω: Replit AI\n"
            "–õ–∏—Ü–µ–Ω–∑–∏—è: Proprietary\n\n"
            "üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n"
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ "
            "—Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
            "üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
            "‚Ä¢ Python 3.11\n"
            "‚Ä¢ Python-telegram-bot\n"
            "‚Ä¢ PostgreSQL\n"
            "‚Ä¢ YFinance API\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @tradeporu\n"
        )
        
        about_keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            about_text,
            reply_markup=InlineKeyboardMarkup(about_keyboard),
            parse_mode='Markdown'
        )
        return ADMIN_ABOUT
    
    elif action == "admin_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU

async def admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        target_type = context.user_data.get('broadcast_target', 'approved')
        
        if target_type == 'all':
            user_ids = get_all_user_ids()
            target_desc = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        elif target_type == 'pending':
            user_ids = get_pending_user_ids()
            target_desc = "–æ–∂–∏–¥–∞—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º
            user_ids = get_approved_user_ids()
            target_desc = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        
        if not user_ids:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        
        success_count = 0
        error_count = 0
        
        progress_message = await update.message.reply_text(
            f"üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π {target_desc}...\n"
            f"0% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (0/{len(user_ids)})"
        )
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for i, user_id in enumerate(user_ids):
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{broadcast_text}"
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                error_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
            if (i + 1) % 5 == 0 or i == len(user_ids) - 1:
                progress_percent = int((i + 1) / len(user_ids) * 100)
                await progress_message.edit_text(
                    f"üì® –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π {target_desc}...\n"
                    f"{progress_percent}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({i+1}/{len(user_ids)})"
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üìù –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}",
            reply_markup=get_admin_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if 'broadcast_target' in context.user_data:
            del context.user_data['broadcast_target']
            
        return ADMIN_MENU
    
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        
        action = query.data
        
        if action == "admin_back":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
            
        elif action == "broadcast_all":
            # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            context.user_data['broadcast_target'] = 'all'
            keyboard = [
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ]
            await query.edit_message_text(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif action == "broadcast_approved":
            # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            context.user_data['broadcast_target'] = 'approved'
            keyboard = [
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ]
            await query.edit_message_text(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        elif action == "broadcast_pending":
            # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            context.user_data['broadcast_target'] = 'pending'
            keyboard = [
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ]
            await query.edit_message_text(
                "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    return ADMIN_BROADCAST_MESSAGE

async def admin_send_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"admin_send_message_to_user called with update type: {type(update)}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if update.callback_query and update.callback_query.data == "cancel_direct_message":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'direct_message_to_user_id' in context.user_data:
            del context.user_data['direct_message_to_user_id']
            
        await update.callback_query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        logger.info("Direct message canceled, returning to admin menu")
        return ADMIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.message:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_user_id = context.user_data.get('direct_message_to_user_id')
        logger.info(f"Trying to send message to user_id: {target_user_id}")
        
        if not target_user_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=get_admin_keyboard()
            )
            logger.error("Error: target_user_id not found in context.user_data")
            return ADMIN_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = get_user(target_user_id)
        if not user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
            logger.error(f"Error: user with ID {target_user_id} not found")
            return ADMIN_MENU
            
        username = user_data.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            logger.info(f"Sending message to user {target_user_id} (@{username})")
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                parse_mode='Markdown'
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}!",
                reply_markup=get_admin_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if 'direct_message_to_user_id' in context.user_data:
                del context.user_data['direct_message_to_user_id']
                
            logger.info("Message sent successfully, returning to admin menu")
            return ADMIN_MENU
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            logger.error(f"Error sending message: {str(e)}")
            await update.message.reply_text(
                error_message,
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
    
    # –î–ª—è –ø—Ä–æ—á–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    # (–º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    
    return ADMIN_DIRECT_MESSAGE

async def admin_user_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if action.startswith("send_message_to_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_id = action.split("_")[-1]
        user_data = get_user(int(user_id))
        
        if not user_data:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_user_management_keyboard()
            )
            return ADMIN_USER_MANAGEMENT
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['direct_message_to_user_id'] = int(user_id)
        username = user_data.get('username', '–±–µ–∑ –∏–º–µ–Ω–∏')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"Setting up message form for user {user_id} (@{username})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_direct_message")]
        ]
        
        await query.edit_message_text(
            f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ADMIN_DIRECT_MESSAGE –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        return ADMIN_DIRECT_MESSAGE
    
    elif action == "admin_pending":
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pending_users = get_pending_users()
        if pending_users:
            await query.edit_message_text(
                "‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=get_pending_keyboard(pending_users)
            )
        else:
            await query.edit_message_text(
                "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=get_user_management_keyboard()
            )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_all_users":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        await query.edit_message_text(
            "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            reply_markup=get_user_list_keyboard(users)
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action == "admin_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif action.startswith("page_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        parts = action.split("_")
        page = int(parts[1])
        back_command = parts[2]
        
        if back_command == "admin_pending":
            pending_users = get_pending_users()
            await query.edit_message_text(
                "‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=get_pending_keyboard(pending_users, page)
            )
        else:  # admin_all_users
            users = get_all_users()
            await query.edit_message_text(
                "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
                reply_markup=get_user_list_keyboard(users, page)
            )
        return ADMIN_USER_MANAGEMENT
    
    elif action.startswith("user_"):
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_id = int(action.split("_")[1])
        user_data = get_user(user_id)
        
        if not user_data:
            await query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_user_management_keyboard()
            )
            return ADMIN_USER_MANAGEMENT
        
        is_admin = "‚úÖ" if user_data.get('is_admin') else "‚ùå"
        is_approved = "‚úÖ" if user_data.get('is_approved') else "‚ùå"
        is_moderator = "‚úÖ" if user_data.get('is_moderator') else "‚ùå"
        username = user_data.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        user_info = (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: @{username}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}\n"
            f"üî∞ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {is_moderator}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {is_approved}\n"
        )
        
        await query.edit_message_text(
            user_info,
            reply_markup=get_user_action_keyboard(user_id, is_approved=user_data.get('is_approved', False), 
                                                  is_admin=user_data.get('is_admin', False), 
                                                  is_moderator=user_data.get('is_moderator', False))
        )
        return ADMIN_USER_MANAGEMENT
    
    elif action.startswith("toggle_admin_") or action.startswith("toggle_moderator_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        parts = action.split("_")
        is_admin_action = action.startswith("toggle_admin_")
        user_id = int(parts[2])
        new_status = parts[3] == "1"  # 1 - —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º, 0 - —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞
        
        if is_admin_action:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from models import set_user_admin_status
            success = set_user_admin_status(user_id, new_status)
            status_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if new_status else "–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            from models import set_user_moderator_status
            success = set_user_moderator_status(user_id, new_status)
            status_text = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä" if new_status else "–Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = get_user(user_id)
            if user_data:
                is_admin = user_data.get('is_admin', False)
                is_approved = user_data.get('is_approved', False)
                is_moderator = user_data.get('is_moderator', False)
                username = user_data.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = (
                    f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                    f"üÜî ID: {user_id}\n"
                    f"üë§ –ò–º—è: @{username}\n"
                    f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'‚úÖ' if is_admin else '‚ùå'}\n"
                    f"üî∞ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {'‚úÖ' if is_moderator else '‚ùå'}\n"
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {'‚úÖ' if is_approved else '‚ùå'}\n\n"
                    f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}"
                )
                
                await query.edit_message_text(
                    user_info,
                    reply_markup=get_user_action_keyboard(user_id, is_approved, is_admin, is_moderator)
                )
            else:
                await query.edit_message_text(
                    f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}\n"
                    f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=get_user_management_keyboard()
                )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.",
                reply_markup=get_user_management_keyboard()
            )
        
        return ADMIN_USER_MANAGEMENT
    
    elif action.startswith("block_user_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        user_id = int(action.split("_")[2])
        
        from models import reset_user_approval
        if reset_user_approval(user_id):
            await query.edit_message_text(
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–¥–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω).",
                reply_markup=get_user_management_keyboard()
            )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.",
                reply_markup=get_user_management_keyboard()
            )
        
        return ADMIN_USER_MANAGEMENT
        
    elif action.startswith("approve_") or action.startswith("reject_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_approve = action.startswith("approve_")
        user_id = int(action.split("_")[1])
        
        if is_approve:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –æ–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                password = ''.join([str(hash(datetime.now()))[i:i+2] for i in range(0, 8, 2)])
                password_hash = hash_password(password)
                
                if approve_user(user_id, password_hash):
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                    escaped_password = password.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`").replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-").replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}").replace(".", "\\.").replace("!", "\\!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = get_user(user_id)
                    lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
                    
                    # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                    approval_messages = {
                        'tg': f"‚úÖ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥\\!\n\n–†–∞–º–∑–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –≤–æ—Ä–∏–¥ —à—É–¥–∞–Ω: `{escaped_password}`\n\n–õ—É—Ç—Ñ–∞–Ω, –æ–Ω—Ä–æ –Ω–∏–≥–æ“≥ –¥–æ—Ä–µ–¥\\.",
                        'ru': f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\\!\n\n–í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: `{escaped_password}`\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ\\.",
                        'uz': f"‚úÖ Arizangiz tasdiqlandi\\!\n\nKirish uchun parolingiz: `{escaped_password}`\n\nIltimos, uni saqlab qoling\\.",
                        'kk': f"‚úÖ ”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ –º–∞“õ“±–ª–¥–∞–Ω–¥—ã\\!\n\n–ö—ñ—Ä—É “Ø—à—ñ–Ω “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑: `{escaped_password}`\n\n–û–Ω—ã —Å–∞“õ—Ç–∞–ø “õ–æ–π—ã“£—ã–∑\\.",
                        'en': f"‚úÖ Your request has been approved\\!\n\nYour password: `{escaped_password}`\n\nPlease save it\\."
                    }
                    
                    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                    button_texts = {
                        'tg': "üöÄ –ë–∞ –±–æ—Ç –≤–æ—Ä–∏–¥ —à–∞–≤–µ–¥",
                        'ru': "üöÄ –í–æ–π—Ç–∏ –≤ –±–æ—Ç",
                        'uz': "üöÄ Botga kirish",
                        'kk': "üöÄ –ë–æ—Ç“õ–∞ –∫—ñ—Ä—É",
                        'en': "üöÄ Enter the bot"
                    }
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    message = approval_messages.get(lang_code, approval_messages['tg'])
                    button_text = button_texts.get(lang_code, button_texts['tg'])
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(button_text, callback_data="return_to_main")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='MarkdownV2',
                        reply_markup=keyboard
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await query.edit_message_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –æ–¥–æ–±—Ä–µ–Ω. –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                        reply_markup=get_user_management_keyboard()
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        reply_markup=get_user_management_keyboard()
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
                    reply_markup=get_user_management_keyboard()
                )
        else:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if delete_user(user_id):
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                await query.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=get_user_management_keyboard()
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=get_user_management_keyboard()
                )
        
        return ADMIN_USER_MANAGEMENT
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_user_management_keyboard()
        )
        return ADMIN_USER_MANAGEMENT

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    user_data = get_user(user_id)
    
    if user_data and user_data.get('is_approved'):
        await update.message.reply_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
        )
        return ConversationHandler.END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if not user_data:
        add_user(user_id, username)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    PENDING_USERS[user_id] = {
        'user_id': user_id,
        'username': username,
        'timestamp': datetime.now()
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user(user_id)
    lang_code = user_data['language_code'] if user_data and 'language_code' in user_data else 'tg'
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    request_messages = {
        'tg': "üìù –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞ –º–∞—ä–º—É—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥. "
              "–õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–¥–∏“õ—Ä–æ –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥. "
              "–í–∞“õ—Ç–µ –∫–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä—Ä–∞—Å”£ –º–µ—à–∞–≤–∞–¥, —à—É–º–æ –æ–≥–æ“≥–∏–Ω–æ–º–∞ –º–µ–≥–∏—Ä–µ–¥.",
        'ru': "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
              "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
        'uz': "üìù Arizangiz administratorga yuborildi. "
              "Iltimos, tasdiqlashni kuting. "
              "Arizangiz ko'rib chiqilganda, sizga xabar beriladi.",
        'kk': "üìù –°—ñ–∑–¥—ñ“£ ”©—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. "
              "–†–∞—Å—Ç–∞—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑. "
              "”®—Ç—ñ–Ω—ñ—à—ñ“£—ñ–∑ “õ–∞—Ä–∞–ª“ì–∞–Ω–¥–∞, —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.",
        'en': "üìù Your request has been sent to the administrator. "
              "Please wait for confirmation. "
              "You will receive a notification when your request is reviewed."
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    support_messages = {
        'tg': "\n\nüìû –ê–≥–∞—Ä —Å–∞–≤–æ–ª –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ —Ö–∞–¥–∞–º–æ—Ç–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥: @tradeporu",
        'ru': "\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @tradeporu",
        'uz': "\n\nüìû Savollaringiz bo'lsa, qo'llab-quvvatlash xizmatiga murojaat qilishingiz mumkin: @tradeporu",
        'kk': "\n\nüìû –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑: @tradeporu",
        'en': "\n\nüìû If you have any questions, you can contact support: @tradeporu"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
    message = request_messages.get(lang_code, request_messages['tg'])
    support_text = support_messages.get(lang_code, support_messages['tg'])
    message += support_text
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    from create_welcome_image import create_welcome_image
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if create_welcome_image():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
            with open('welcome_image.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=message
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await update.message.reply_text(message)
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    admin_chat_id = await get_admin_chat_id(context.bot)
    if admin_chat_id:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
            ]
        ]
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üÜî ID: {user_id}\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
        # —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        logger.warning(f"Admin chat not found. Registration request from user @{username} (ID: {user_id}) stored in pending list.")
    
    return ConversationHandler.END

def main():
    reconnect_delay = 5  # Start with 5 seconds delay
    max_reconnect_delay = 30  # Maximum delay between reconnection attempts
    max_consecutive_errors = 10
    error_count = 0
    last_error_time = None

    while True:  # Infinite loop for continuous operation
        try:
            # Start the keep-alive server
            from keep_alive import keep_alive
            keep_alive()
            logger.info("Starting bot...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
            if not BOT_TOKEN:
                logger.error("BOT_TOKEN is not set. Please check your environment variables.")
                continue

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º
            application = Application.builder().token(BOT_TOKEN).build()

            # Add handlers
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CommandHandler("download", download))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            application.add_handler(CommandHandler("register", register_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            async def admin_currency_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏"""
                query = update.callback_query
                if query:
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_back":
                        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    elif action == "admin_add_currency":
                        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        await query.edit_message_text(
                            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–æ–¥ –ø–∞—Ä—ã|–°–∏–º–≤–æ–ª|–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "BTCUSD|BTC-USD|BTC/USD",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                            ]])
                        )
                        return ADMIN_CURRENCY_ADD
                    
                    elif action == "admin_refresh_currencies":
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã
                        from models import import_default_currency_pairs
                        success = import_default_currency_pairs()
                        
                        if success:
                            await query.edit_message_text(
                                "‚úÖ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        else:
                            await query.edit_message_text(
                                "‚ÑπÔ∏è –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        return ADMIN_CURRENCY_MANAGEMENT
                    
                    elif action.startswith("currency_toggle_"):
                        # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        pair_code = action.replace("currency_toggle_", "")
                        from models import update_currency_pair_status, get_all_currency_pairs
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—ã
                        pairs = get_all_currency_pairs()
                        current_pair = next((p for p in pairs if p['pair_code'] == pair_code), None)
                        
                        if current_pair:
                            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
                            new_status = not current_pair['is_active']
                            success = update_currency_pair_status(pair_code, new_status)
                            
                            if success:
                                status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                                await query.edit_message_text(
                                    f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {current_pair['display_name']} —É—Å–ø–µ—à–Ω–æ {status_text}!",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                    ]])
                                )
                            else:
                                await query.edit_message_text(
                                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                    ]])
                                )
                        else:
                            await query.edit_message_text(
                                "‚ùå –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                                ]])
                            )
                        return ADMIN_CURRENCY_MANAGEMENT
                    
                    elif action == "admin_currencies":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
                        from models import get_all_currency_pairs
                        currency_pairs = get_all_currency_pairs()
                        
                        currency_list = "\n".join([
                            f"- {pair['display_name']} ({pair['pair_code']}): {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if pair['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}"
                            for pair in currency_pairs
                        ])
                        
                        if not currency_list:
                            currency_list = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"
                        
                        currency_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É", callback_data="admin_add_currency")],
                            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="admin_refresh_currencies")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                        for pair in currency_pairs:
                            toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if pair['is_active'] else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                            currency_keyboard.insert(-1, [
                                InlineKeyboardButton(f"{pair['display_name']} - {toggle_text}", 
                                                    callback_data=f"currency_toggle_{pair['pair_code']}")
                            ])
                        
                        await query.edit_message_text(
                            f"üí± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä:\n{currency_list}",
                            reply_markup=InlineKeyboardMarkup(currency_keyboard)
                        )
                        return ADMIN_CURRENCY_MANAGEMENT
                
                return ADMIN_CURRENCY_MANAGEMENT
            
            async def admin_add_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    
                    if query.data == "admin_currencies":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç
                        return await admin_currency_management(update, context)
                    
                    return ADMIN_CURRENCY_ADD
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                    text = update.message.text
                    parts = text.strip().split('|')
                    
                    if len(parts) != 3:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–æ–¥ –ø–∞—Ä—ã|–°–∏–º–≤–æ–ª|–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "BTCUSD|BTC-USD|BTC/USD",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_currencies")
                            ]])
                        )
                        return ADMIN_CURRENCY_ADD
                    
                    pair_code = parts[0].strip()
                    symbol = parts[1].strip()
                    display_name = parts[2].strip()
                    
                    from models import add_or_update_currency_pair
                    pair_id = add_or_update_currency_pair(pair_code, symbol, display_name)
                    
                    if pair_id:
                        # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        await update.message.reply_text(
                            f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ {display_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç", callback_data="admin_currencies")
                            ]])
                        )
                    else:
                        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç", callback_data="admin_currencies")
                            ]])
                        )
                    
                    return ADMIN_CURRENCY_MANAGEMENT
                
                return ADMIN_CURRENCY_ADD
            
            async def admin_text_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞"""
                query = update.callback_query
                if query:
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_back":
                        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–∞–º
                    if action == "admin_texts" or action == "admin_refresh_texts":
                        from models import get_all_bot_messages, get_message_keys
                        
                        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                        message_keys = get_message_keys()
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª—é—á–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                        texts_keyboard = []
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
                        for key in message_keys:
                            texts_keyboard.append([InlineKeyboardButton(f"üìù {key}", callback_data=f"edit_text_{key}")])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        texts_keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="admin_add_text")])
                        texts_keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if message_keys:
                            header = f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ({len(message_keys)}):"
                        else:
                            header = "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã."
                        
                        await query.edit_message_text(
                            header,
                            reply_markup=InlineKeyboardMarkup(texts_keyboard)
                        )
                        return ADMIN_TEXT_MANAGEMENT
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    elif action.startswith("edit_text_"):
                        message_key = action[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "edit_text_"
                        
                        from models import get_message_for_key
                        messages = get_message_for_key(message_key)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—Å—Ç–∞—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
                        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: <b>{message_key}</b>\n\n"
                        
                        if not messages:
                            text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞."
                        else:
                            text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:\n\n"
                            for msg in messages:
                                language = msg['language_code']
                                lang_name = {
                                    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                                    'tg': 'üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π',
                                    'uz': 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π',
                                    'kk': 'üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π',
                                    'en': 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
                                }.get(language, language)
                                
                                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                                message_text = msg['message_text']
                                if len(message_text) > 50:
                                    message_text = message_text[:47] + "..."
                                
                                text += f"<b>{lang_name}</b>: {message_text}\n"
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —è–∑—ã–∫–æ–≤
                        keyboard = []
                        languages = [('ru', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'), ('tg', 'üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π'), 
                                   ('uz', 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π'), ('kk', 'üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π'), 
                                   ('en', 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π')]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
                        for lang_code, lang_name in languages:
                            keyboard.append([InlineKeyboardButton(
                                f"‚úèÔ∏è {lang_name}", 
                                callback_data=f"edit_lang_{message_key}_{lang_code}"
                            )])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
                        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")])
                        
                        await query.edit_message_text(
                            text,
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode='HTML'
                        )
                        return ADMIN_TEXT_MANAGEMENT
                    
                    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    elif action.startswith("edit_lang_"):
                        parts = action.split("_", 3)  # edit_lang_key_code
                        if len(parts) >= 4:
                            message_key = parts[2]
                            language_code = parts[3]
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                            context.user_data['current_edit_key'] = message_key
                            context.user_data['current_edit_lang'] = language_code
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
                            from models import get_bot_message
                            current_text = get_bot_message(message_key, language_code)
                            
                            lang_name = {
                                'ru': '—Ä—É—Å—Å–∫–æ–º',
                                'tg': '—Ç–∞–¥–∂–∏–∫—Å–∫–æ–º',
                                'uz': '—É–∑–±–µ–∫—Å–∫–æ–º',
                                'kk': '–∫–∞–∑–∞—Ö—Å–∫–æ–º',
                                'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º'
                            }.get(language_code, language_code)
                            
                            if current_text:
                                text = f"<b>üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b> <i>{message_key}</i> –Ω–∞ {lang_name} —è–∑—ã–∫–µ\n\n"
                                text += f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<pre>{current_text}</pre>\n\n"
                                text += f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                            else:
                                text = f"<b>üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b> <i>{message_key}</i> –Ω–∞ {lang_name} —è–∑—ã–∫–µ\n\n"
                                text += f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                            
                            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"edit_text_{message_key}")]]
                            
                            await query.edit_message_text(
                                text,
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode='HTML'
                            )
                            return ADMIN_TEXT_EDIT
                    
                    elif action == "admin_add_text":
                        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        await query.edit_message_text(
                            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–ª—é—á|–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "WELCOME|ru|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                            ]])
                        )
                        return ADMIN_TEXT_ADD
                    
                    elif action.startswith("admin_edit_text_"):
                        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        key = action.replace("admin_edit_text_", "")
                        
                        from models import get_all_bot_messages
                        messages = get_all_bot_messages()
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
                        key_messages = [msg for msg in messages if msg['message_key'] == key]
                        
                        message_text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {key}\n\n"
                        
                        for msg in key_messages:
                            lang_code = msg['language_code']
                            text = msg['message_text']
                            message_text += f"*{lang_code}*: {text[:50]}{'...' if len(text) > 50 else ''}\n\n"
                        
                        edit_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"admin_add_translation_{key}")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")]
                        ]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
                        for msg in key_messages:
                            lang_code = msg['language_code']
                            edit_keyboard.insert(-1, [
                                InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {lang_code}", 
                                                    callback_data=f"admin_edit_translation_{key}_{lang_code}")
                            ])
                        
                        await query.edit_message_text(
                            message_text,
                            reply_markup=InlineKeyboardMarkup(edit_keyboard)
                        )
                        return ADMIN_TEXT_EDIT
                    
                    elif action == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        from models import get_all_bot_messages
                        messages = get_all_bot_messages()
                        
                        texts_keyboard = [
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="admin_add_text")],
                            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º
                        message_keys = {}
                        for msg in messages:
                            key = msg['message_key']
                            if key not in message_keys:
                                message_keys[key] = []
                            message_keys[key].append(msg)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        for key in message_keys:
                            texts_keyboard.insert(-1, [InlineKeyboardButton(f"üìù {key}", callback_data=f"admin_edit_text_{key}")])
                        
                        if not message_keys:
                            message_summary = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"
                        else:
                            message_summary = "–¢–µ–∫—Å—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join([
                                f"- {key} ({len(langs)} —è–∑—ã–∫–æ–≤)" 
                                for key, langs in message_keys.items()
                            ])
                        
                        await query.edit_message_text(
                            f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞\n\n{message_summary}",
                            reply_markup=InlineKeyboardMarkup(texts_keyboard)
                        )
                        return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_MANAGEMENT
            
            async def admin_text_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    
                    if query.data == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        return await admin_text_management(update, context)
                    
                    return ADMIN_TEXT_ADD
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    text = update.message.text
                    parts = text.strip().split('|', 2)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏ (–∫–ª—é—á, —è–∑—ã–∫, —Ç–µ–∫—Å—Ç)
                    
                    if len(parts) != 3:
                        await update.message.reply_text(
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–ö–ª—é—á|–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "WELCOME|ru|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                            ]])
                        )
                        return ADMIN_TEXT_ADD
                    
                    key = parts[0].strip()
                    lang_code = parts[1].strip()
                    message_text = parts[2].strip()
                    
                    from models import update_bot_message
                    msg_id = update_bot_message(key, lang_code, message_text)
                    
                    if msg_id:
                        # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        await update.message.reply_text(
                            f"‚úÖ –¢–µ–∫—Å—Ç —Å –∫–ª—é—á–æ–º {key} –¥–ª—è —è–∑—ã–∫–∞ {lang_code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                            ]])
                        )
                    else:
                        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                        await update.message.reply_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                            ]])
                        )
                    
                    return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_ADD
            
            async def admin_text_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
                if update.callback_query:
                    query = update.callback_query
                    await query.answer()
                    action = query.data
                    
                    if action == "admin_texts":
                        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤
                        return await admin_text_management(update, context)
                    
                    elif action.startswith("admin_add_translation_"):
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
                        key = action.replace("admin_add_translation_", "")
                        
                        await query.edit_message_text(
                            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–ª—é—á–∞: {key}\n\n"
                            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            "–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                            "en|Welcome to the bot!",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                            ]])
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        context.user_data['current_edit_key'] = key
                        return ADMIN_TEXT_ADD
                    
                    elif action.startswith("admin_edit_translation_"):
                        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        parts = action.replace("admin_edit_translation_", "").split('_')
                        if len(parts) >= 2:
                            key = parts[0]
                            lang_code = parts[1]
                            
                            from models import get_bot_message
                            current_text = get_bot_message(key, lang_code)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
                            lang_name = {
                                'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                                'tg': 'üáπüáØ –¢–∞–¥–∂–∏–∫—Å–∫–∏–π',
                                'uz': 'üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π',
                                'kk': 'üá∞üáø –ö–∞–∑–∞—Ö—Å–∫–∏–π',
                                'en': 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'
                            }.get(lang_code, lang_code)
                            
                            if current_text:
                                text = f"<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
                                text += f"<b>–ö–ª—é—á:</b> {key}\n"
                                text += f"<b>–Ø–∑—ã–∫:</b> {lang_name}\n\n"
                                text += f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<pre>{current_text}</pre>\n\n"
                                text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
                                
                                await query.edit_message_text(
                                    text,
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                                    ]]),
                                    parse_mode='HTML'
                                )
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                context.user_data['current_edit_key'] = key
                                context.user_data['current_edit_lang'] = lang_code
                                return ADMIN_TEXT_EDIT
                            else:
                                await query.edit_message_text(
                                    "<b>‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
                                    reply_markup=InlineKeyboardMarkup([[
                                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_texts")
                                    ]]),
                                    parse_mode='HTML'
                                )
                                return ADMIN_TEXT_MANAGEMENT
                    
                    return ADMIN_TEXT_EDIT
                
                if update.message:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    text = update.message.text
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    if 'current_edit_key' in context.user_data and 'current_edit_lang' in context.user_data:
                        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        key = context.user_data['current_edit_key']
                        lang_code = context.user_data['current_edit_lang']
                        
                        from models import update_bot_message
                        msg_id = update_bot_message(key, lang_code, text)
                        
                        if msg_id:
                            # –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                            await update.message.reply_text(
                                f"‚úÖ –¢–µ–∫—Å—Ç —Å –∫–ª—é—á–æ–º {key} –¥–ª—è —è–∑—ã–∫–∞ {lang_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                            await update.message.reply_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if 'current_edit_key' in context.user_data:
                            del context.user_data['current_edit_key']
                        if 'current_edit_lang' in context.user_data:
                            del context.user_data['current_edit_lang']
                        
                        return ADMIN_TEXT_MANAGEMENT
                    
                    elif 'current_edit_key' in context.user_data:
                        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                        key = context.user_data['current_edit_key']
                        parts = text.strip().split('|', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏ (—è–∑—ã–∫, —Ç–µ–∫—Å—Ç)
                        
                        if len(parts) != 2:
                            await update.message.reply_text(
                                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                "–Ø–∑—ã–∫|–¢–µ–∫—Å—Ç\n\n"
                                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                "en|Welcome to the bot!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_edit_text_{key}")
                                ]])
                            )
                            return ADMIN_TEXT_ADD
                        
                        lang_code = parts[0].strip()
                        message_text = parts[1].strip()
                        
                        from models import update_bot_message
                        msg_id = update_bot_message(key, lang_code, message_text)
                        
                        if msg_id:
                            # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                            await update.message.reply_text(
                                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ {key} –Ω–∞ —è–∑—ã–∫ {lang_code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                            await update.message.reply_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.",
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ç–µ–∫—Å—Ç–æ–≤", callback_data="admin_texts")
                                ]])
                            )
                        
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        if 'current_edit_key' in context.user_data:
                            del context.user_data['current_edit_key']
                        
                        return ADMIN_TEXT_MANAGEMENT
                
                return ADMIN_TEXT_EDIT
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –æ–ø—Ü–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            async def admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
                query = update.callback_query
                await query.answer()
                
                action = query.data
                
                if action == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                settings_keyboard = [
                    [InlineKeyboardButton("‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_setting_update_freq")],
                    [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="admin_setting_notifications")],
                    [InlineKeyboardButton("üåê –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_setting_regional")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
                    reply_markup=InlineKeyboardMarkup(settings_keyboard)
                )
                return ADMIN_SETTINGS
            
            async def admin_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
                query = update.callback_query
                await query.answer()
                
                action = query.data
                
                if action == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                users = get_all_users()
                total_users = len(users)
                approved_users = sum(1 for user in users if user.get('is_approved'))
                
                # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                activity = [random.randint(5, 20) for _ in range(7)]
                
                activity_text = "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
                activity_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                activity_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {approved_users}\n\n"
                
                activity_text += "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
                for i, day in enumerate(days):
                    activity_text += f"{day}: {'‚ñÆ' * (activity[i] // 2)} ({activity[i]})\n"
                
                activity_keyboard = [
                    [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_activity_details")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    activity_text,
                    reply_markup=InlineKeyboardMarkup(activity_keyboard)
                )
                return ADMIN_ACTIVITY
            
            async def admin_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                about_text = (
                    "<b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b>\n\n"
                    "<b>‚ú® Trade Analysis Bot ‚ú®</b>\n\n"
                    "<b>–í–µ—Ä—Å–∏—è:</b> 2.0.0\n"
                    "<b>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω:</b> Replit AI\n"
                    "<b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> Proprietary\n\n"
                    "<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ "
                    "—Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
                    "<b>üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
                    "‚Ä¢ Python 3.11\n"
                    "‚Ä¢ Python-telegram-bot\n"
                    "‚Ä¢ PostgreSQL\n"
                    "‚Ä¢ YFinance API\n\n"
                    "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @tradeporu\n"
                )
                
                about_keyboard = [
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    about_text,
                    reply_markup=InlineKeyboardMarkup(about_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_ABOUT
            async def admin_user_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
                stats = get_user_activity_stats()
                
                analytics_text = "<b>üë§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                analytics_text += f"<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                analytics_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                analytics_text += f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {stats['approved']}\n"
                analytics_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['admins']}\n"
                analytics_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_last_week']}\n\n"
                
                analytics_text += "<b>üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:</b>\n"
                for lang in stats['languages']:
                    lang_emoji = {
                        'ru': 'üá∑üá∫',
                        'tg': 'üáπüáØ',
                        'uz': 'üá∫üáø',
                        'kk': 'üá∞üáø',
                        'en': 'üá¨üáß'
                    }.get(lang['language'], 'üåê')
                    
                    analytics_text += f"‚Ä¢ {lang_emoji} {lang['language']}: {lang['count']}\n"
                
                analytics_keyboard = [
                    [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data="admin_user_detailed_report")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    analytics_text,
                    reply_markup=InlineKeyboardMarkup(analytics_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_USER_ANALYTICS
                
            async def admin_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
                await query.edit_message_text(
                    "<b>‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='HTML'
                )
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                from models import export_bot_data
                export_data = export_bot_data()
                
                if export_data:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
                        import os
                        import json
                        from datetime import datetime
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                        export_dir = "exports"
                        if not os.path.exists(export_dir):
                            os.makedirs(export_dir)
                        
                        filename = f"{export_dir}/bot_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                        with open(filename, 'w', encoding='utf-8') as f:
                            json.dump(export_data, f, ensure_ascii=False, indent=2, default=str)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        with open(filename, 'rb') as f:
                            await context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=f,
                                filename=os.path.basename(filename),
                                caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"
                            )
                        
                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        currency_pairs_count = len(export_data.get('currency_pairs', []))
                        messages_count = len(export_data.get('bot_messages', []))
                        settings_count = len(export_data.get('bot_settings', {}))
                        
                        export_text = "<b>‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                        export_text += "–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                        export_text += f"<b>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b>\n"
                        export_text += f"‚Ä¢ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: {currency_pairs_count}\n"
                        export_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {messages_count}\n"
                        export_text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings_count}\n\n"
                        export_text += "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö."
                    except Exception as e:
                        import traceback
                        error_traceback = traceback.format_exc()
                        export_text = f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n<pre>{str(e)}\n\n{error_traceback}</pre>"
                else:
                    export_text = "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
                
                export_keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    export_text,
                    reply_markup=InlineKeyboardMarkup(export_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_EXPORT_DATA
                
            async def admin_import(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞"""
                query = update.callback_query
                
                if not query:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    if update.message and update.message.document:
                        try:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                            file = await context.bot.get_file(update.message.document.file_id)
                            
                            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                            import tempfile
                            import json
                            from models import import_bot_data
                            
                            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.json')
                            await file.download_to_drive(custom_path=temp_file.name)
                            
                            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –∏–º–ø–æ—Ä—Ç–∞
                            await update.message.reply_text(
                                "<b>‚è≥ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ.",
                                parse_mode='HTML'
                            )
                            
                            # –ß–∏—Ç–∞–µ–º –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                            with open(temp_file.name, 'r', encoding='utf-8') as f:
                                try:
                                    data = json.load(f)
                                    
                                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
                                    if import_bot_data(data):
                                        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                                        currency_pairs_count = len(data.get('currency_pairs', []))
                                        messages_count = len(data.get('bot_messages', []))
                                        settings_count = len(data.get('bot_settings', {}))
                                        
                                        success_text = "<b>‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                                        success_text += "<b>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b>\n"
                                        success_text += f"‚Ä¢ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: {currency_pairs_count}\n"
                                        success_text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {messages_count}\n"
                                        success_text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings_count}\n\n"
                                        success_text += "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É."
                                        
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                        await update.message.reply_text(
                                            success_text,
                                            parse_mode='HTML',
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
                                            ])
                                        )
                                    else:
                                        await update.message.reply_text(
                                            "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n–§–∞–π–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                                            parse_mode='HTML',
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
                                            ])
                                        )
                                except json.JSONDecodeError:
                                    await update.message.reply_text(
                                        "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª.",
                                        parse_mode='HTML',
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
                                        ])
                                    )
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            import os
                            os.unlink(temp_file.name)
                            
                        except Exception as e:
                            import traceback
                            error_traceback = traceback.format_exc()
                            await update.message.reply_text(
                                f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n<pre>{str(e)}\n\n{error_traceback}</pre>",
                                parse_mode='HTML',
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")]
                                ])
                            )
                        
                        return ADMIN_MENU
                    return
                
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                import_text = "<b>üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                import_text += "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n"
                import_text += "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b> –ò–º–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
                import_text += "–ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                import_text += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞\n"
                import_text += "‚Ä¢ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã\n"
                import_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                import_text += "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã –Ω–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã.</i>"
                
                import_keyboard = [
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                context.user_data['waiting_for_import'] = True
                
                await query.edit_message_text(
                    import_text,
                    reply_markup=InlineKeyboardMarkup(import_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_IMPORT_DATA
                
            async def admin_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
                    import os
                    if not os.path.exists('bot.log'):
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        with open('bot.log', 'w') as f:
                            f.write("# Log file created\n")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                    with open('bot.log', 'r') as file:
                        log_content = file.readlines()
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –∏–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 20
                        log_lines = log_content[-20:] if len(log_content) >= 20 else log_content
                    
                    logs_text = "<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n<pre>"
                    for line in log_lines:
                        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
                        if len(line) > 100:
                            line = line[:97] + "..."
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
                        line = line.replace('<', '&lt;').replace('>', '&gt;')
                        logs_text += line
                    logs_text += "</pre>"
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                    if len(logs_text) > 4000:
                        logs_text = logs_text[:3996] + "</pre>"
                    
                    # –ï—Å–ª–∏ –ª–æ–≥–∏ –∑–∞–Ω—è–ª–∏ –≤–µ—Å—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è,
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
                    if len(logs_text) > 3900:
                        with open('bot.log', 'rb') as file:
                            await context.bot.send_document(
                                chat_id=update.effective_chat.id,
                                document=file,
                                filename="bot.log",
                                caption="üìã –ü–æ–ª–Ω—ã–π –ª–æ–≥ –±–æ—Ç–∞"
                            )
                except Exception as e:
                    import traceback
                    error_traceback = traceback.format_exc()
                    logs_text = f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤</b>\n\n<pre>{str(e)}\n\n{error_traceback}</pre>"
                
                logs_keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs")],
                    [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –ª–æ–≥", callback_data="admin_download_logs")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    logs_text,
                    reply_markup=InlineKeyboardMarkup(logs_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_LOGS
                
            async def admin_server_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
                try:
                    status_text = "<b>üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
                    status_text += "<b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                    status_text += f"‚Ä¢ –û–°: {platform.system()} {platform.release()}\n"
                    status_text += f"‚Ä¢ Python: {platform.python_version()}\n"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                    if 'start_time' in context.bot_data:
                        start_time = context.bot_data['start_time']
                        if isinstance(start_time, datetime):
                            uptime = datetime.now() - start_time
                            days, remainder = divmod(uptime.total_seconds(), 86400)
                            hours, remainder = divmod(remainder, 3600)
                            minutes, seconds = divmod(remainder, 60)
                            uptime_str = f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º"
                        else:
                            uptime_str = str(start_time)
                    else:
                        uptime_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    status_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n\n"
                    
                    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                    cpu_percent = psutil.cpu_percent()
                    memory = psutil.virtual_memory()
                    
                    status_text += "<b>–†–µ—Å—É—Ä—Å—ã:</b>\n"
                    status_text += f"‚Ä¢ CPU: {cpu_percent}%\n"
                    status_text += f"‚Ä¢ RAM: {memory.percent}% ({memory.used // (1024*1024)} –ú–ë / {memory.total // (1024*1024)} –ú–ë)\n"
                    status_text += f"‚Ä¢ –î–∏—Å–∫: {psutil.disk_usage('/').percent}%\n\n"
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
                    status_text += "<b>–ë–æ—Ç:</b>\n"
                    users = get_all_users()
                    status_text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                    active_users = len([u for u in users if u.get('is_approved')])
                    status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                    status_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(psutil.pids())}\n"
                    
                except Exception as e:
                    import traceback
                    error_traceback = traceback.format_exc()
                    logger.error(f"Error getting server status: {e}")
                    status_text = f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n<pre>{str(e)}\n\n{error_traceback}</pre>"
                
                status_keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_server_status")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    status_text,
                    reply_markup=InlineKeyboardMarkup(status_keyboard),
                    parse_mode='HTML'
                )
                return ADMIN_SERVER_STATUS
                
            async def admin_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                signals_text = "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏*\n\n"
                signals_text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n"
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î)
                signals_text += "*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
                signals_text += "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç\n"
                signals_text += "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: 70%\n"
                signals_text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
                signals_text += "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: –¢—Ä–µ–±—É–µ—Ç—Å—è\n\n"
                
                signals_text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:*\n"
                signals_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ 24 —á–∞—Å–∞: 17\n"
                signals_text += "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: 12\n"
                signals_text += "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: 5\n"
                signals_text += "‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 70.6%\n"
                
                signals_keyboard = [
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="admin_signal_settings")],
                    [InlineKeyboardButton("üìà –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞", callback_data="admin_market_overview")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
                    signals_text = signals_text.replace(char, f"\\{char}")
                
                await query.edit_message_text(
                    signals_text,
                    reply_markup=InlineKeyboardMarkup(signals_keyboard),
                    parse_mode='MarkdownV2'
                )
                return ADMIN_SIGNAL_MANAGEMENT
                
            async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
                query = update.callback_query
                await query.answer()
                
                if query.data == "admin_back":
                    await query.edit_message_text(
                        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_admin_keyboard()
                    )
                    return ADMIN_MENU
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                users = get_all_users()
                total_users = len(users)
                approved_users = sum(1 for user in users if user.get('is_approved'))
                
                stats_text = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                
                stats_text += "*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {approved_users}\n"
                stats_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {sum(1 for user in users if user.get('is_admin'))}\n"
                stats_text += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {sum(1 for user in users if user.get('is_moderator'))}\n\n"
                
                stats_text += "*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
                # –î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
                stats_text += "‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 74\n"
                stats_text += "‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: 487\n"
                stats_text += "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 69.6\n\n"
                
                stats_text += "*–°–∏—Å—Ç–µ–º–∞:*\n"
                uptime = datetime.now() - context.bot_data.get('start_time', datetime.now())
                days, remainder = divmod(uptime.total_seconds(), 86400)
                hours, remainder = divmod(remainder, 3600)
                minutes, seconds = divmod(remainder, 60)
                
                stats_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(days)}d {int(hours)}h {int(minutes)}m\n"
                stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {psutil.cpu_percent()}%\n"
                stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {psutil.virtual_memory().percent}%\n"
                
                stats_keyboard = [
                    [InlineKeyboardButton("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_extended_stats")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
                    stats_text = stats_text.replace(char, f"\\{char}")
                
                await query.edit_message_text(
                    stats_text,
                    reply_markup=InlineKeyboardMarkup(stats_keyboard),
                    parse_mode='MarkdownV2'
                )
                return ADMIN_MENU
                
            async def admin_update_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
                query = update.callback_query
                await query.answer()
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ is_moderator
                    from models import get_db_connection
                    with get_db_connection() as conn:
                        with conn.cursor() as cur:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ is_moderator
                            cur.execute("""
                                SELECT column_name 
                                FROM information_schema.columns 
                                WHERE table_name = 'users' AND column_name = 'is_moderator'
                            """)
                            column_exists = cur.fetchone() is not None
                            
                            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                            if not column_exists:
                                cur.execute("""
                                    ALTER TABLE users 
                                    ADD COLUMN is_moderator BOOLEAN DEFAULT FALSE
                                """)
                                conn.commit()
                                logger.info("Added is_moderator column to users table")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (—á–µ—Ä–µ–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
                    get_bot_settings()  # –°–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É bot_settings –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    get_moderator_permissions()  # –°–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É moderator_permissions –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    
                    update_text = "‚úÖ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*\n\n"
                    update_text += "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
                    update_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫\n"
                    update_text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü\n"
                    update_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
                    update_text += "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
                except Exception as e:
                    logger.error(f"Error updating database: {e}")
                    update_text = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö*\n\n{str(e)}"
                
                update_keyboard = [
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="admin_back")]
                ]
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
                    update_text = update_text.replace(char, f"\\{char}")
                
                await query.edit_message_text(
                    update_text,
                    reply_markup=InlineKeyboardMarkup(update_keyboard),
                    parse_mode='MarkdownV2'
                )
                return ADMIN_MENU
                
                about_text = (
                    "‚ÑπÔ∏è –û –±–æ—Ç–µ\n\n"
                    "‚ú® *Trade Analysis Bot* ‚ú®\n\n"
                    "–í–µ—Ä—Å–∏—è: 2.0.0\n"
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω: Replit AI\n"
                    "–õ–∏—Ü–µ–Ω–∑–∏—è: Proprietary\n\n"
                    "üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n"
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ "
                    "—Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
                    "üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
                    "‚Ä¢ Python 3.11\n"
                    "‚Ä¢ Python-telegram-bot\n"
                    "‚Ä¢ PostgreSQL\n"
                    "‚Ä¢ YFinance API\n\n"
                    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @tradeporu\n"
                )
                
                about_keyboard = [
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]
                
                await query.edit_message_text(
                    about_text,
                    reply_markup=InlineKeyboardMarkup(about_keyboard),
                    parse_mode='Markdown'
                )
                return ADMIN_ABOUT
            
            async def admin_change_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
                query = update.callback_query
                if query:
                    await query.answer()
                    
                    if query.data == "admin_back":
                        await query.edit_message_text(
                            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            reply_markup=get_admin_keyboard()
                        )
                        return ADMIN_MENU
                    
                    # –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é
                    keyboard = [
                        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ]
                    
                    await query.edit_message_text(
                        "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    context.user_data['admin_changing_password'] = True
                    return ADMIN_CHANGE_PASSWORD
                
                elif update.message and context.user_data.get('admin_changing_password'):
                    new_password = update.message.text
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
                    if len(new_password) < 6:
                        await update.message.reply_text(
                            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                        )
                        return ADMIN_CHANGE_PASSWORD
                    
                    # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ config
                    new_password_hash = hash_password(new_password)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
                    global ADMIN_PASSWORD_HASH
                    ADMIN_PASSWORD_HASH = new_password_hash
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
                    await update.message.reply_text(
                        "‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
                        reply_markup=get_admin_keyboard()
                    )
                    
                    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    if 'admin_changing_password' in context.user_data:
                        del context.user_data['admin_changing_password']
                    
                    return ADMIN_MENU
                
                return ADMIN_MENU
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            admin_conv_handler = ConversationHandler(
                entry_points=[CommandHandler("admin", admin_command)],
                states={
                    ADMIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_check_password)],
                    ADMIN_MENU: [CallbackQueryHandler(admin_menu_handler)],
                    ADMIN_USER_MANAGEMENT: [CallbackQueryHandler(admin_user_management)],
                    ADMIN_BROADCAST_MESSAGE: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_message),
                        CallbackQueryHandler(admin_broadcast_message)
                    ],
                    ADMIN_CURRENCY_MANAGEMENT: [CallbackQueryHandler(admin_currency_management)],
                    ADMIN_CURRENCY_ADD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_add_currency),
                        CallbackQueryHandler(admin_add_currency)
                    ],
                    ADMIN_CURRENCY_EDIT: [CallbackQueryHandler(admin_currency_management)],
                    ADMIN_TEXT_MANAGEMENT: [CallbackQueryHandler(admin_text_management)],
                    ADMIN_TEXT_ADD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_add),
                        CallbackQueryHandler(admin_text_add)
                    ],
                    ADMIN_TEXT_EDIT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_edit),
                        CallbackQueryHandler(admin_text_edit)
                    ],
                    ADMIN_ACTIVITY: [CallbackQueryHandler(admin_activity)],
                    ADMIN_SETTINGS: [CallbackQueryHandler(admin_settings)],
                    ADMIN_CHANGE_PASSWORD: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_change_password),
                        CallbackQueryHandler(admin_change_password)
                    ],
                    ADMIN_ABOUT: [CallbackQueryHandler(admin_about)],
                    ADMIN_EXPORT_DATA: [CallbackQueryHandler(admin_export)],
                    ADMIN_IMPORT_DATA: [
                        MessageHandler(filters.Document.ALL, admin_import),
                        CallbackQueryHandler(admin_import)
                    ],
                    ADMIN_LOGS: [CallbackQueryHandler(admin_logs)],
                    ADMIN_SERVER_STATUS: [CallbackQueryHandler(admin_server_status)],
                    ADMIN_USER_ANALYTICS: [CallbackQueryHandler(admin_user_analytics)],
                    ADMIN_SIGNAL_MANAGEMENT: [CallbackQueryHandler(admin_signals)],
                    ADMIN_DIRECT_MESSAGE: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_direct_message_handler),
                        CallbackQueryHandler(admin_direct_message_handler)
                    ],
                    ADMIN_SEND_MESSAGE_TO_USER: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_send_message_to_user),
                        CallbackQueryHandler(admin_send_message_to_user)
                    ],
                    ADMIN_SEARCH_USER: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_user_handler),
                        CallbackQueryHandler(admin_search_user_handler)
                    ],
                    ADMIN_OTC_SIGNALS: [
                        CallbackQueryHandler(admin_otc_signals_handler)
                    ],
                    ADMIN_TRADING_VIEW: [
                        CallbackQueryHandler(admin_trading_view_handler)
                    ],
                    ADMIN_SCHEDULER: [
                        CallbackQueryHandler(admin_scheduler_handler)
                    ],
                    ADMIN_API: [
                        CallbackQueryHandler(admin_api_handler)
                    ],
                    ADMIN_SECURITY: [
                        CallbackQueryHandler(admin_security_handler)
                    ],
                    ADMIN_PROXY: [
                        CallbackQueryHandler(admin_proxy_handler)
                    ],
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    ADMIN_MESSAGE_TO_PENDING: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_message_to_pending_handler),
                        CallbackQueryHandler(admin_message_to_pending_handler)
                    ],
                    ADMIN_SELECT_USERS: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_select_users_handler),
                        CallbackQueryHandler(admin_select_users_handler)
                    ],
                    ADMIN_CONTENT_MANAGER: [
                        CallbackQueryHandler(admin_content_manager_handler)
                    ],
                    ADMIN_STATISTICS: [
                        CallbackQueryHandler(admin_statistics_handler)
                    ],
                    ADMIN_QUICK_COMMANDS: [
                        CallbackQueryHandler(admin_quick_commands_handler)
                    ],
                    ADMIN_HISTORY: [
                        CallbackQueryHandler(admin_history_handler)
                    ],
                    ADMIN_PLUGINS: [
                        CallbackQueryHandler(admin_plugins_handler)
                    ],
                    ADMIN_MARKETPLACE: [
                        CallbackQueryHandler(admin_marketplace_handler)
                    ]
                },
                fallbacks=[CommandHandler("start", start)]
            )
            application.add_handler(admin_conv_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            application.add_handler(CallbackQueryHandler(handle_admin_action, pattern=r"^(approve|reject)_\d+$"))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
            application.add_handler(CallbackQueryHandler(handle_trading_books, pattern="^trading_books$"))
            application.add_handler(CallbackQueryHandler(handle_trading_beginner, pattern="^trading_beginner$"))
            application.add_handler(CallbackQueryHandler(handle_trading_strategies, pattern="^trading_strategies$"))
            application.add_handler(CallbackQueryHandler(handle_trading_tools, pattern="^trading_tools$"))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(button_click))

            # Set up error handlers
            application.add_error_handler(error_handler)

            # Reset error count on successful startup
            error_count = 0
            last_error_time = None

            # Run the bot with enhanced polling settings
            logger.info("Bot is running...")
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except Exception as e:
            current_time = datetime.now()

            # Reset error count if last error was more than 1 hour ago
            if last_error_time and (current_time - last_error_time).seconds > 3600:
                error_count = 0

            error_count += 1
            last_error_time = current_time

            logger.error(f"Bot crashed with error: {str(e)}")
            logger.info(f"Attempting to restart in {reconnect_delay} seconds...")

            if error_count >= max_consecutive_errors:
                logger.critical("Too many consecutive errors. Forcing system restart...")
                try:
                    # Additional cleanup before restart
                    if 'application' in locals():
                        try:
                            application.stop()
                        except:
                            pass
                    os.execv(sys.executable, ['python'] + sys.argv)
                except Exception as restart_error:
                    logger.error(f"Failed to restart: {restart_error}")
                continue

            # Implement exponential backoff for reconnection attempts
            time.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 2, max_reconnect_delay)

            # Log detailed error information
            logger.error("Detailed error information:", exc_info=True)
            continue
        finally:
            # Reset reconnect delay on successful connection
            reconnect_delay = 5

async def admin_direct_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    
    if query:
        await query.answer()
        if query.data == "admin_back":
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        return ADMIN_DIRECT_MESSAGE
    
    if update.message:
        user_id_text = update.message.text.strip()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            user_id = int(user_id_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = get_user(user_id)
            if not user_info:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_DIRECT_MESSAGE
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['admin_recipient_id'] = user_id
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            username = user_info.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            is_approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user_info.get('is_approved') else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            
            await update.message.reply_text(
                f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                f"üë§ –ò–º—è: {username}\n"
                f"üÜî ID: {user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {is_approved}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                ]])
            )
            return ADMIN_SEND_MESSAGE_TO_USER
        
        except ValueError:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ).",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ADMIN_DIRECT_MESSAGE
        except Exception as e:
            logger.error(f"Error in direct message handler: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ADMIN_DIRECT_MESSAGE
    
    return ADMIN_DIRECT_MESSAGE

async def admin_search_user_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    
    if query:
        await query.answer()
        if query.data == "admin_back":
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        if query.data.startswith("user_select_"):
            user_id = int(query.data.replace("user_select_", ""))
            context.user_data['admin_recipient_id'] = user_id
            
            user_info = get_user(user_id)
            if user_info:
                username = user_info.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                is_approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user_info.get('is_approved') else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                is_admin = "üëë –î–∞" if user_info.get('is_admin') else "üë§ –ù–µ—Ç"
                created_at = user_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                user_keyboard = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if user_info.get('is_approved'):
                    user_keyboard.append([
                        InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"user_message_{user_id}"),
                        InlineKeyboardButton("üö´ –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"user_reset_{user_id}")
                    ])
                else:
                    user_keyboard.append([
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                        InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"user_message_{user_id}")
                    ])
                
                if not user_info.get('is_admin'):
                    user_keyboard.append([
                        InlineKeyboardButton("üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"user_admin_{user_id}"),
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"user_delete_{user_id}")
                    ])
                
                user_keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                await query.edit_message_text(
                    f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                    f"üîπ –ò–º—è: {username}\n"
                    f"üîπ ID: {user_id}\n"
                    f"üîπ –°—Ç–∞—Ç—É—Å: {is_approved}\n"
                    f"üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}\n"
                    f"üîπ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n",
                    reply_markup=InlineKeyboardMarkup(user_keyboard)
                )
                return ADMIN_USER_MANAGEMENT
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if query.data.startswith("user_message_"):
            user_id = int(query.data.replace("user_message_", ""))
            context.user_data['admin_recipient_id'] = user_id
            
            user_info = get_user(user_id)
            if user_info:
                username = user_info.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                is_approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user_info.get('is_approved') else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                
                await query.edit_message_text(
                    f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                    f"üë§ –ò–º—è: {username}\n"
                    f"üÜî ID: {user_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {is_approved}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                    ]])
                )
                return ADMIN_SEND_MESSAGE_TO_USER
        
        return ADMIN_SEARCH_USER
    
    if update.message:
        search_query = update.message.text.strip()
        
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID
            try:
                user_id = int(search_query)
                user = get_user(user_id)
                if user:
                    users = [user]
                else:
                    users = []
            except ValueError:
                # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                users = get_user_by_username(search_query)
                if not isinstance(users, list):
                    users = [users] if users else []
            
            if not users:
                await update.message.reply_text(
                    f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_SEARCH_USER
            
            if len(users) == 1:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
                user = users[0]
                user_id = user['user_id']
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                is_approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user.get('is_approved') else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                is_admin = "üëë –î–∞" if user.get('is_admin') else "üë§ –ù–µ—Ç"
                
                user_keyboard = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if user.get('is_approved'):
                    user_keyboard.append([
                        InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"user_message_{user_id}"),
                        InlineKeyboardButton("üö´ –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"user_reset_{user_id}")
                    ])
                else:
                    user_keyboard.append([
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
                        InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"user_message_{user_id}")
                    ])
                
                if not user.get('is_admin'):
                    user_keyboard.append([
                        InlineKeyboardButton("üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"user_admin_{user_id}"),
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"user_delete_{user_id}")
                    ])
                
                user_keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                await update.message.reply_text(
                    f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                    f"üîπ –ò–º—è: {username}\n"
                    f"üîπ ID: {user_id}\n"
                    f"üîπ –°—Ç–∞—Ç—É—Å: {is_approved}\n"
                    f"üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}\n",
                    reply_markup=InlineKeyboardMarkup(user_keyboard)
                )
                return ADMIN_USER_MANAGEMENT
            else:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                keyboard = []
                for user in users:
                    user_id = user['user_id']
                    username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    status = "‚úÖ" if user.get('is_approved') else "‚è≥"
                    keyboard.append([
                        InlineKeyboardButton(f"{status} {username} (ID: {user_id})", callback_data=f"user_select_{user_id}")
                    ])
                
                keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
                
                await update.message.reply_text(
                    f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return ADMIN_SEARCH_USER
        
        except Exception as e:
            logger.error(f"Error in search user handler: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ADMIN_SEARCH_USER
    
    return ADMIN_SEARCH_USER

async def admin_otc_signals_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OTC —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è Pocket Option"""
    query = update.callback_query
    
    if not query:
        return ADMIN_OTC_SIGNALS
    
    await query.answer()
    action = query.data
    
    if action == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif action == "otc_view_active":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö OTC —Å–∏–≥–Ω–∞–ª–æ–≤
        otc_signals_text = (
            "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ OTC —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è Pocket Option\n\n"
            "üìä –¢–µ–∫—É—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
            "1. EUR/USD - ‚¨ÜÔ∏è –í–í–ï–†–• (80%) - 18:45\n"
            "2. GBP/JPY - ‚¨áÔ∏è –í–ù–ò–ó (75%) - 19:00\n"
            "3. AUD/CAD - ‚¨ÜÔ∏è –í–í–ï–†–• (78%) - 19:15\n"
            "4. USD/CHF - ‚¨áÔ∏è –í–ù–ò–ó (82%) - 19:30\n\n"
            "‚è± –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 18:30"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="otc_refresh")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_otc_signals")]
        ]
        
        await query.edit_message_text(
            otc_signals_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS
    
    elif action == "otc_add_signal":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ OTC —Å–∏–≥–Ω–∞–ª–∞
        add_signal_text = (
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ OTC —Å–∏–≥–Ω–∞–ª–∞\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è OTC —Å–µ—Å—Å–∏–π Pocket Option —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_otc_signals")]
        ]
        
        await query.edit_message_text(
            add_signal_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS
    
    elif action == "otc_settings":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OTC
        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OTC —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
            "üîπ –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: 75%\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –í–∫–ª—é—á–µ–Ω–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: 5 –º–∏–Ω—É—Ç\n\n"
            "üîπ –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–æ–≤:\n"
            "‚Ä¢ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: –í—Å–µ\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, LTC\n"
            "‚Ä¢ –ê–∫—Ü–∏–∏: –í—ã–∫–ª—é—á–µ–Ω—ã\n\n"
            "üîπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            "‚Ä¢ –ë—É–¥–Ω–∏: 18:00 - 22:00\n"
            "‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –í—ã–∫–ª—é—á–µ–Ω–æ\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_otc_signals")]
        ]
        
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS
    
    elif action == "otc_stats":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ OTC —Å–∏–≥–Ω–∞–ª–æ–≤
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OTC —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
            "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            "‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: 120\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: 92 (76.7%)\n"
            "‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: 28 (23.3%)\n\n"
            "üèÜ –¢–æ–ø-3 –∞–∫—Ç–∏–≤–∞ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:\n"
            "1. EUR/USD - 82% (31/38)\n"
            "2. GBP/JPY - 80% (24/30)\n"
            "3. USD/CHF - 79% (19/24)\n\n"
            "üìâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
            "‚Ä¢ –ü–Ω: 75% (15/20)\n"
            "‚Ä¢ –í—Ç: 80% (16/20)\n"
            "‚Ä¢ –°—Ä: 78% (18/23)\n"
            "‚Ä¢ –ß—Ç: 82% (18/22)\n"
            "‚Ä¢ –ü—Ç: 69% (11/16)\n"
            "‚Ä¢ –°–±: 75% (9/12)\n"
            "‚Ä¢ –í—Å: 71% (5/7)\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_otc_signals")]
        ]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS
    
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é OTC
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="otc_view_active")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", callback_data="otc_add_signal")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OTC", callback_data="otc_settings")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="otc_stats")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OTC —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è Pocket Option\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_OTC_SIGNALS

async def admin_trading_view_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Trading View"""
    query = update.callback_query
    if not query:
        return ADMIN_TRADING_VIEW
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Trading View
    trading_view_text = (
        "üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Trading View\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π Trading View "
        "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ "
        "–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π Trading View."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        trading_view_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_TRADING_VIEW

async def admin_scheduler_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    query = update.callback_query
    if not query:
        return ADMIN_SCHEDULER
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler_text = (
        "‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "
        "—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫:\n"
        "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        scheduler_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_SCHEDULER

async def admin_api_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    query = update.callback_query
    if not query:
        return ADMIN_API
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    api_text = (
        "üîå API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API:\n"
        "‚Ä¢ –ë–∏—Ä–∂–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –ª–µ–Ω—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤\n"
        "‚Ä¢ –°–µ—Ä–≤–∏—Å—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã\n"
        "–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        api_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_API

async def admin_security_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    if not query:
        return ADMIN_SECURITY
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_text = (
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–∞—Ä–æ–ª–µ–π\n"
        "‚Ä¢ –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ IP\n"
        "–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        security_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_SECURITY

async def admin_proxy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    if not query:
        return ADMIN_PROXY
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
    proxy_text = (
        "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SOCKS5/HTTP –ø—Ä–æ–∫—Å–∏\n"
        "‚Ä¢ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏\n"
        "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏\n"
        "–∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        proxy_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PROXY

async def admin_message_to_pending_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    query = update.callback_query
    
    if query:
        await query.answer()
        
        if query.data == "admin_back":
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        
        elif query.data == "send_to_all_pending":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['send_to_all_pending'] = True
            
            await query.edit_message_text(
                "üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                ]])
            )
            return ADMIN_MESSAGE_TO_PENDING
        
        elif query.data == "select_pending_users":
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            from models import get_pending_users
            pending_users = get_pending_users()
            
            if not pending_users or len(pending_users) == 0:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_MESSAGE_TO_PENDING
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard.append([
                InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="select_all_pending")
            ])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
            for i, user in enumerate(pending_users[:10]):
                user_id = user.get('user_id')
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                is_selected = user_id in context.user_data.get('selected_pending_list', [])
                checkbox = "‚òëÔ∏è" if is_selected else "‚¨ú"
                
                keyboard.append([
                    InlineKeyboardButton(f"{checkbox} @{username} (ID: {user_id})", 
                                       callback_data=f"toggle_pending_{user_id}")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 10
            if len(pending_users) > 10:
                keyboard.append([
                    InlineKeyboardButton("‚è© –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="pending_page_next_1")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            action_buttons = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            selected_count = len(context.user_data.get('selected_pending_list', []))
            if selected_count > 0:
                action_buttons.append(
                    InlineKeyboardButton(f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º ({selected_count})", 
                                        callback_data="send_to_selected_pending")
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if action_buttons:
                keyboard.append(action_buttons)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            keyboard.append([
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ])
            
            await query.edit_message_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å/—Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ADMIN_MESSAGE_TO_PENDING
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        elif query.data == "select_all_pending":
            from models import get_pending_users
            pending_users = get_pending_users()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_user_ids = [user.get('user_id') for user in pending_users]
            context.user_data['selected_pending_list'] = all_user_ids
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —á–µ–∫–±–æ–∫—Å–∞–º–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="clear_pending_selection")
            ])
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —á–µ–∫–±–æ–∫—Å–∞–º–∏
            for i, user in enumerate(pending_users[:10]):
                user_id = user.get('user_id')
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                keyboard.append([
                    InlineKeyboardButton(f"‚òëÔ∏è @{username} (ID: {user_id})", 
                                       callback_data=f"toggle_pending_{user_id}")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
            if len(pending_users) > 10:
                keyboard.append([
                    InlineKeyboardButton("‚è© –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="pending_page_next_1")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton(f"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º ({len(all_user_ids)})", 
                                   callback_data="send_to_selected_pending")
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            keyboard.append([
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ])
            
            await query.edit_message_text(
                "üë• –í—Å–µ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ADMIN_MESSAGE_TO_PENDING
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        elif query.data == "clear_pending_selection":
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if 'selected_pending_list' in context.user_data:
                del context.user_data['selected_pending_list']
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            query.data = "select_pending_users"
            return await admin_message_to_pending_handler(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif query.data.startswith("toggle_pending_"):
            user_id = int(query.data.replace("toggle_pending_", ""))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if 'selected_pending_list' not in context.user_data:
                context.user_data['selected_pending_list'] = []
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in context.user_data['selected_pending_list']:
                context.user_data['selected_pending_list'].remove(user_id)
            else:
                context.user_data['selected_pending_list'].append(user_id)
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            query.data = "select_pending_users"
            return await admin_message_to_pending_handler(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        elif query.data == "send_to_selected_pending":
            selected_users = context.user_data.get('selected_pending_list', [])
            
            if not selected_users or len(selected_users) == 0:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_MESSAGE_TO_PENDING
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            context.user_data['send_to_selected_pending'] = True
            
            await query.edit_message_text(
                f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ({len(selected_users)})\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                ]])
            )
            return ADMIN_MESSAGE_TO_PENDING
            
        elif query.data.startswith("select_pending_"):
            # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            user_id = int(query.data.replace("select_pending_", ""))
            user_info = get_user(user_id)
            
            if not user_info:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_MESSAGE_TO_PENDING
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['admin_recipient_id'] = user_id
            username = user_info.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            
            await query.edit_message_text(
                f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                f"üë§ –ò–º—è: @{username}\n"
                f"üÜî ID: {user_id}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                ]])
            )
            return ADMIN_MESSAGE_TO_PENDING
    
    elif update.message:
        # –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        message_text = update.message.text
        
        if 'send_to_all_pending' in context.user_data and context.user_data['send_to_all_pending']:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                from models import get_pending_user_ids
                pending_user_ids = get_pending_user_ids()
                
                if not pending_user_ids or len(pending_user_ids) == 0:
                    await update.message.reply_text(
                        "‚ùå –ù–µ—Ç –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.",
                        reply_markup=get_admin_keyboard()
                    )
                    if 'send_to_all_pending' in context.user_data:
                        del context.user_data['send_to_all_pending']
                    return ADMIN_MENU
                
                success_count = 0
                fail_count = 0
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for user_id in pending_user_ids:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message_text
                        )
                        success_count += 1
                    except Exception as e:
                        logger.error(f"Error sending message to user {user_id}: {e}")
                        fail_count += 1
                
                # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if 'send_to_all_pending' in context.user_data:
                    del context.user_data['send_to_all_pending']
                
                await update.message.reply_text(
                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {fail_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
                    reply_markup=get_admin_keyboard()
                )
                return ADMIN_MENU
                
            except Exception as e:
                logger.error(f"Error broadcasting to pending users: {e}")
                
                if 'send_to_all_pending' in context.user_data:
                    del context.user_data['send_to_all_pending']
                    
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}",
                    reply_markup=get_admin_keyboard()
                )
                return ADMIN_MENU
                
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        elif 'send_to_selected_pending' in context.user_data and context.user_data['send_to_selected_pending']:
            selected_users = context.user_data.get('selected_pending_list', [])
            
            if not selected_users or len(selected_users) == 0:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=get_admin_keyboard()
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if 'send_to_selected_pending' in context.user_data:
                    del context.user_data['send_to_selected_pending']
                if 'selected_pending_list' in context.user_data:
                    del context.user_data['selected_pending_list']
                
                return ADMIN_MENU
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            success_count = 0
            fail_count = 0
            
            for user_id in selected_users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                        parse_mode='Markdown'
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    fail_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.message.reply_text(
                f"üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}\n"
                f"üì® –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected_users)}",
                reply_markup=get_admin_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if 'send_to_selected_pending' in context.user_data:
                del context.user_data['send_to_selected_pending']
            if 'selected_pending_list' in context.user_data:
                del context.user_data['selected_pending_list']
            
            return ADMIN_MENU
            
        elif 'admin_recipient_id' in context.user_data:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                user_id = context.user_data['admin_recipient_id']
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                    parse_mode='Markdown'
                )
                
                # –û—á–∏—â–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                del context.user_data['admin_recipient_id']
                
                await update.message.reply_text(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                    reply_markup=get_admin_keyboard()
                )
                return ADMIN_MENU
                
            except Exception as e:
                logger.error(f"Error sending message to user: {e}")
                
                if 'admin_recipient_id' in context.user_data:
                    del context.user_data['admin_recipient_id']
                    
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                    reply_markup=get_admin_keyboard()
                )
                return ADMIN_MENU
        
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            await update.message.reply_text(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
    
    return ADMIN_MESSAGE_TO_PENDING

async def admin_select_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    
    if query:
        await query.answer()
        
        if query.data == "admin_back":
            await query.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        
        elif query.data == "search_users_criteria":
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            await query.edit_message_text(
                "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID –∏ —Ç.–¥.):",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
            context.user_data['search_users_mode'] = 'search_criteria'
            return ADMIN_SELECT_USERS
        
        elif query.data == "select_from_list":
            # –í—ã–±–æ—Ä –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from models import get_all_users
            all_users = get_all_users()
            
            if not all_users or len(all_users) == 0:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_SELECT_USERS
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = []
            for user in all_users[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                user_id = user.get('user_id')
                username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                is_approved = "‚úÖ" if user.get('is_approved') else "‚è≥"
                keyboard.append([
                    InlineKeyboardButton(f"{is_approved} @{username} (ID: {user_id})", callback_data=f"select_user_{user_id}")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 10
            if len(all_users) > 10:
                keyboard.append([
                    InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="users_more")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ])
            
            await query.edit_message_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ADMIN_SELECT_USERS
        
        elif query.data == "segment_by_activity":
            # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("üèÉ –ê–∫—Ç–∏–≤–Ω—ã–µ (7 –¥–Ω–µ–π)", callback_data="segment_active_7")],
                [InlineKeyboardButton("üö∂ –ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω–µ–π)", callback_data="segment_active_30")],
                [InlineKeyboardButton("üõå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (>30 –¥–Ω–µ–π)", callback_data="segment_inactive_30")],
                [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="segment_all")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            
            await query.edit_message_text(
                "üìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ADMIN_SELECT_USERS
            
        elif query.data.startswith("select_user_"):
            # –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
            user_id = int(query.data.replace("select_user_", ""))
            user_info = get_user(user_id)
            
            if not user_info:
                await query.edit_message_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
                return ADMIN_SELECT_USERS
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['admin_recipient_id'] = user_id
            username = user_info.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            is_approved = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user_info.get('is_approved') else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            
            await query.edit_message_text(
                f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
                f"üë§ –ò–º—è: @{username}\n"
                f"üÜî ID: {user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {is_approved}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
                ]])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
            context.user_data['message_mode'] = 'direct_message'
            return ADMIN_SEND_MESSAGE_TO_USER
    
    elif update.message and 'search_users_mode' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = update.message.text.strip()
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            matching_users = []
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID
            try:
                user_id = int(search_query)
                user = get_user(user_id)
                if user:
                    matching_users.append(user)
            except ValueError:
                pass
            
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not matching_users:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏
                from models import get_user_by_username
                user = get_user_by_username(search_query)
                if user:
                    matching_users.append(user)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
            if matching_users:
                keyboard = []
                for user in matching_users:
                    user_id = user.get('user_id')
                    username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    is_approved = "‚úÖ" if user.get('is_approved') else "‚è≥"
                    keyboard.append([
                        InlineKeyboardButton(f"{is_approved} @{username} (ID: {user_id})", callback_data=f"select_user_{user_id}")
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ])
                
                await update.message.reply_text(
                    f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(matching_users)}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                    ]])
                )
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            del context.user_data['search_users_mode']
            return ADMIN_SELECT_USERS
            
        except Exception as e:
            logger.error(f"Error searching users: {e}")
            
            if 'search_users_mode' in context.user_data:
                del context.user_data['search_users_mode']
                
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ADMIN_SELECT_USERS
    
    return ADMIN_SELECT_USERS

async def admin_content_manager_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    query = update.callback_query
    if not query:
        return ADMIN_CONTENT_MANAGER
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif query.data == "admin_education_content":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        education_text = (
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ö–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É", callback_data="admin_trading_books")],
            [InlineKeyboardButton("üî∞ –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", callback_data="admin_trading_beginner")],
            [InlineKeyboardButton("üìà –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", callback_data="admin_trading_strategies")],
            [InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞", callback_data="admin_trading_tools")],
            [InlineKeyboardButton("üì± OTC –ø–∞—Ä—ã –∏ —Å–∏–≥–Ω–∞–ª—ã", callback_data="admin_otc_pairs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_content")]
        ]
        
        await query.edit_message_text(
            education_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_trading_books":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É
        books_text = (
            "üìñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –∫–Ω–∏–≥ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="admin_add_book")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", callback_data="admin_edit_books")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="admin_delete_book")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_education_content")]
        ]
        
        await query.edit_message_text(
            books_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_trading_strategies":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        strategies_text = (
            "üìà –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="admin_add_strategy")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", callback_data="admin_edit_strategies")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data="admin_delete_strategy")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_education_content")]
        ]
        
        await query.edit_message_text(
            strategies_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_trading_tools":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        tools_text = (
            "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="admin_add_tool")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", callback_data="admin_edit_tools")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", callback_data="admin_delete_tool")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_education_content")]
        ]
        
        await query.edit_message_text(
            tools_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_trading_beginner":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
        beginner_text = (
            "üî∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="admin_add_beginner_topic")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã", callback_data="admin_edit_beginner_topics")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data="admin_delete_beginner_topic")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_education_content")]
        ]
        
        await query.edit_message_text(
            beginner_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_otc_pairs":
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OTC –ø–∞—Ä–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        otc_text = (
            "üì± –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OTC –ø–∞—Ä –∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å OTC –ø–∞—Ä—É", callback_data="admin_add_otc_pair")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å OTC –ø–∞—Ä—ã", callback_data="admin_edit_otc_pairs")],
            [InlineKeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞–º–∏", callback_data="admin_otc_signals")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_education_content")]
        ]
        
        await query.edit_message_text(
            otc_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data.startswith("admin_add_") or query.data.startswith("admin_edit_") or query.data.startswith("admin_delete_"):
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        action_type = "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" if "add" in query.data else "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if "edit" in query.data else "—É–¥–∞–ª–µ–Ω–∏—è"
        section_type = query.data.replace("admin_add_", "").replace("admin_edit_", "").replace("admin_delete_", "")
        
        # –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        section_names = {
            "book": "–∫–Ω–∏–≥–∏", 
            "books": "–∫–Ω–∏–≥",
            "strategy": "—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            "strategies": "—Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
            "tool": "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "tools": "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
            "beginner_topic": "—Ç–µ–º—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
            "beginner_topics": "—Ç–µ–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
            "otc_pair": "OTC –ø–∞—Ä—ã",
            "otc_pairs": "OTC –ø–∞—Ä",
        }
        
        section_name = section_names.get(section_type, section_type)
        
        message_text = (
            f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è {action_type} {section_name}\n\n"
            f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞ —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é –≤ –∫–æ–¥–µ –±–æ—Ç–∞."
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
        back_to = "admin_education_content"
        if "book" in section_type:
            back_to = "admin_trading_books"
        elif "strategy" in section_type:
            back_to = "admin_trading_strategies"
        elif "tool" in section_type:
            back_to = "admin_trading_tools"
        elif "beginner" in section_type:
            back_to = "admin_trading_beginner"
        elif "otc" in section_type:
            back_to = "admin_otc_pairs"
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=back_to)]
        ]
        
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ADMIN_CONTENT_MANAGER
    
    elif query.data == "admin_content":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        pass
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    content_text = (
        "üìë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_education_content")],
        [InlineKeyboardButton("üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_images")],
        [InlineKeyboardButton("üìÇ –§–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="admin_files")],
        [InlineKeyboardButton("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞", callback_data="admin_appearance")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        content_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ADMIN_CONTENT_MANAGER

async def admin_statistics_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    if not query:
        return ADMIN_STATISTICS
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
        
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    stats_text = (
        "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –†–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –û—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º\n"
        "–∏ –¥—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_STATISTICS

async def admin_quick_commands_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥"""
    query = update.callback_query
    if not query:
        return ADMIN_QUICK_COMMANDS
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
    commands_text = (
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "–∏ –¥—Ä—É–≥–∏–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        commands_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_QUICK_COMMANDS

async def admin_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    if not query:
        return ADMIN_HISTORY
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
    history_text = (
        "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        "–∏ –¥—Ä—É–≥–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        history_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_HISTORY

async def admin_plugins_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏"""
    query = update.callback_query
    if not query:
        return ADMIN_PLUGINS
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏
    plugins_text = (
        "üß© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞–º–∏\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤\n"
        "–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        plugins_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_PLUGINS

async def admin_marketplace_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
    query = update.callback_query
    if not query:
        return ADMIN_MARKETPLACE
    
    await query.answer()
    
    if query.data == "admin_back":
        await query.edit_message_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    marketplace_text = (
        "üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:\n"
        "‚Ä¢ –û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n"
        "–∏ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await query.edit_message_text(
        marketplace_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_MARKETPLACE

async def show_trading_education_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Displaying trading education menu for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
    except Exception as e:
        logger.error(f"Error in show_trading_education_menu: {e}")
        lang_code = 'ru'
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    titles = {
        'tg': 'üìö –ú–∞–≤–æ–¥–∏ –æ–º”Ø–∑–∏—à”£ –æ–∏–¥ –±–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥',
        'ru': 'üìö –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É',
        'uz': 'üìö Treyding bo\'yicha o\'quv materiallari',
        'kk': 'üìö –¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ–π—ã–Ω—à–∞ –æ“õ—É –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã',
        'en': 'üìö Trading Educational Materials'
    }
    
    # –¢–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    descriptions = {
        'tg': '–î–∞—Ä –±–∞—Ö—à–∏ "–û–º”Ø–∑–∏—à–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥" —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –º–∞–≤–æ–¥“≥–æ–∏ –º—É—Ñ–∏–¥ –≤–∞ —Ç–∞—ä–ª–∏–º”£ –æ–∏–¥ –±–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥ –ø–∞–π–¥–æ –∫—É–Ω–µ–¥.',
        'ru': '–í —Ä–∞–∑–¥–µ–ª–µ "–û–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É" –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É—á–µ–±–Ω—ã–µ –ø–æ—Å–æ–±–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.',
        'uz': 'Treyding ta\'limi bo\'limida siz moliya bozorlarida savdo qilish bo\'yicha foydali materiallar va o\'quv qo\'llanmalarini topasiz.',
        'kk': '–¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ–π—ã–Ω—à–∞ –æ“õ—ã—Ç—É –±”©–ª—ñ–º—ñ–Ω–¥–µ —Å—ñ–∑ “õ–∞—Ä–∂—ã –Ω–∞—Ä—ã“õ—Ç–∞—Ä—ã–Ω–¥–∞ —Å–∞—É–¥–∞ –∂–∞—Å–∞—É –±–æ–π—ã–Ω—à–∞ –ø–∞–π–¥–∞–ª—ã –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä –º–µ–Ω –æ“õ—É “õ“±—Ä–∞–ª–¥–∞—Ä—ã–Ω —Ç–∞–±–∞—Å—ã–∑.',
        'en': 'In the "Trading Education" section, you\'ll find useful materials and tutorials on trading in financial markets.'
    }
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_buttons = {
        'tg': {
            'books': "üìö –ö–∏—Ç–æ–±“≥–æ –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
            'beginner': "üî∞ –û–º”Ø–∑–∏—à–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥ –∞–∑ —Å–∏—Ñ—Ä",
            'strategies': "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
            'tools': "üß∞ –ê–±–∑–æ—Ä“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
            'back': "‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç"
        },
        'ru': {
            'books': "üìö –ö–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É",
            'beginner': "üî∞ –û–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É —Å –Ω—É–ª—è", 
            'strategies': "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
            'tools': "üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
            'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
        },
        'uz': {
            'books': "üìö Treyding bo'yicha kitoblar",
            'beginner': "üî∞ Treyding bo'yicha boshlang'ich ta'lim",
            'strategies': "üìà Treyding strategiyalari",
            'tools': "üß∞ Treyding vositalari",
            'back': "‚Ü©Ô∏è Orqaga"
        },
        'kk': {
            'books': "üìö –¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç–∞—Ä",
            'beginner': "üî∞ –¢—Ä–µ–π–¥–∏–Ω–≥—Ç—ñ –Ω”©–ª–¥–µ–Ω “Ø–π—Ä–µ–Ω—É",
            'strategies': "üìà –¢—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã",
            'tools': "üß∞ –¢—Ä–µ–π–¥–∏–Ω–≥ “õ“±—Ä–∞–ª–¥–∞—Ä—ã",
            'back': "‚Ü©Ô∏è –ê—Ä—Ç“õ–∞"
        },
        'en': {
            'books': "üìö Trading Books",
            'beginner': "üî∞ Trading for Beginners",
            'strategies': "üìà Trading Strategies",
            'tools': "üß∞ Trading Tools",
            'back': "‚Ü©Ô∏è Back"
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    title = titles.get(lang_code, titles['ru'])
    description = descriptions.get(lang_code, descriptions['ru'])
    buttons = category_buttons.get(lang_code, category_buttons['ru'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton(buttons['books'], callback_data="trading_books"),
            InlineKeyboardButton(buttons['beginner'], callback_data="trading_beginner")
        ],
        [
            InlineKeyboardButton(buttons['strategies'], callback_data="trading_strategies"),
            InlineKeyboardButton(buttons['tools'], callback_data="trading_tools")
        ],
        [
            InlineKeyboardButton(buttons['back'], callback_data="return_to_main")
        ]
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    message = f"*{title}*\n\n{description}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–Ω–∏–≥, –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
books = {}

async def handle_trading_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∫–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Processing trading_books request for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
    except Exception as e:
        logger.error(f"Error in handle_trading_books: {e}")
        lang_code = 'ru'
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    titles = {
        'tg': 'üìö –ö–∏—Ç–æ–±“≥–æ –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥',
        'ru': 'üìö –ö–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É',
        'uz': 'üìö Treyding bo\'yicha kitoblar',
        'kk': 'üìö –¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç–∞—Ä',
        'en': 'üìö Trading Books'
    }
    
    # –¢–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    descriptions = {
        'tg': '–ò–Ω—Ç–∏—Ö–æ–±–∏ –∫–∏—Ç–æ–±“≥–æ–∏ –±–∞–ª–∞–Ω–¥—Å–∏—Ñ–∞—Ç –±–∞—Ä–æ–∏ —Ç–∞—ä–ª–∏–º–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥:',
        'ru': '–ü–æ–¥–±–æ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É:',
        'uz': 'Treyding o\'rganish uchun sifatli kitoblar to\'plami:',
        'kk': '–¢—Ä–µ–π–¥–∏–Ω–≥—Ç—ñ “Ø–π—Ä–µ–Ω—É “Ø—à—ñ–Ω —Å–∞–ø–∞–ª—ã –∫—ñ—Ç–∞–ø—Ç–∞—Ä –∂–∏—ã–Ω—Ç—ã“ì—ã:',
        'en': 'Selection of quality books for learning trading:'
    }
    
    # –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    global books
    books = {
        'tg': [
            {
                "title": "1. '“≤–∏—Å—Å–∏—ë—Ç“≥–æ–∏ —Ç—Ä–µ–π–¥–µ—Ä' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "–ö–∏—Ç–æ–± –¥–∞—Ä –±–æ—Ä–∞–∏ —Ä—É“≥—à–∏–Ω–æ—Å–∏–∏ –±–æ–∑–æ—Ä–∏ –º–æ–ª–∏—è–≤”£ –≤–∞ —á”£ —Ç–∞–≤—Ä —ç“≥—Å–æ—Å–æ—Ç—Ä–æ –∏–¥–æ—Ä–∞ –∫–∞—Ä–¥–∞–Ω. –ú—É–∞–ª–ª–∏—Ñ —Ç–∞“∑—Ä–∏–±–∞–∏ —Ö—É–¥—Ä–æ –º—É–±–æ–¥–∏–ª–∞ –º–µ–∫—É–Ω–∞–¥ –≤–∞ —Ä–æ“≥“≥–æ–∏ —Ñ–∏–∫—Ä—Ä–æ–Ω–∏–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–∏—à–æ–Ω –º–µ–¥–∏“≥–∞–¥.",
                "pages": "240 —Å–∞“≥–∏—Ñ–∞",
                "year": "1990",
                "download_link": "https://t.me/tradepobooks/10"
            },
            {
                "title": "2. '–¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£ –±–∞—Ä–æ–∏ –Ω–∞–≤ –±–∞ –Ω–∞–≤' - –î. –®–≤–∞–≥–µ—Ä",
                "description": "–ò–Ω –¥–∞—Å—Ç—É—Ä–∏ –º—É–∫–∞–º–º–∞–ª –æ–∏–¥ –±–∞ —Ç–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£ –±–∞—Ä–æ–∏ “≥–∞–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“≥–æ–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–Ω –º–µ–±–æ—à–∞–¥. –ö–∏—Ç–æ–± –±–æ —É—Å—É–ª–∏ —Å–æ–¥–¥–∞ –Ω–∞–≤–∏—à—Ç–∞ —à—É–¥–∞–∞—Å—Ç –≤–∞ –ø—Ä–∏–Ω—Å–∏–ø“≥–æ–∏ –∞—Å–æ—Å–∏–∏ —Ç–∞“≥–ª–∏–ª–∏ –±–æ–∑–æ—Ä—Ä–æ –¥–∞—Ä –±–∞—Ä –º–µ–≥–∏—Ä–∞–¥.",
                "pages": "380 —Å–∞“≥–∏—Ñ–∞",
                "year": "1996",
                "download_link": "https://t.me/tradepobooks/12"
            },
            {
                "title": "3. '–•–æ—Ç–∏—Ä–∞“≥–æ–∏ —Ç—Ä–µ–π–¥–µ—Ä–∏ –≤–∞–ª—é—Ç–∞–≥”£' - –ö. –ë–æ—Ä—Å–µ–ª–∏–Ω–æ",
                "description": "–ú—É–∞–ª–ª–∏—Ñ —Ç–∞–º–æ–º–∏ —Ç–∞“∑—Ä–∏–±–∞–∏ —Ö—É–¥—Ä–æ “≥–∞–º—á—É–Ω —è–∫–µ –∞–∑ –±–µ“≥—Ç–∞—Ä–∏–Ω —Ç—Ä–µ–π–¥–µ—Ä–æ–Ω–∏ –≤–∞–ª—é—Ç–∞ –±–∞ —Ö–æ–Ω–∞–Ω–¥–∞ –Ω–∞“õ–ª –º–µ–∫—É–Ω–∞–¥. “≤–∏–∫–æ—è“≥–æ–∏ –∞“∑–æ–∏–± –≤–∞ –º–∞—Å–ª–∏“≥–∞—Ç“≥–æ–∏ –∞–º–∞–ª”£.",
                "pages": "220 —Å–∞“≥–∏—Ñ–∞",
                "year": "2005",
                "download_link": "https://t.me/tradepobooks/15"
            },
            {
                "title": "4. '–¢—Ä–µ–π–¥–∏–Ω–≥ –¥–∞—Ä –∑–æ–Ω–∞–∏' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "–ö–∏—Ç–æ–±–∏ –º–∞—à“≥—É—Ä –æ–∏–¥ –±–∞ —Ä—É“≥—à–∏–Ω–æ—Å–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥, –∫–∏ –¥–∞—Ä –æ–Ω –º—É–∞–ª–ª–∏—Ñ –ø–∞–Ω“∑ “≥–∞“õ–∏“õ–∞—Ç–∏ –∞—Å–æ—Å–∏—Ä–æ, –∫–∏ –±–æ—è–¥ “≥–∞—Ä —è–∫ —Ç—Ä–µ–π–¥–µ—Ä –¥–æ–Ω–∞–¥, –º–µ—Ñ–∞“≥–º–æ–Ω–∞–¥. –ë–∞—Ä–æ–∏ –æ–Ω“≥–æ–µ, –∫–∏ –º–µ—Ö–æ“≥–∞–Ω–¥ –±–∞ —Ç—Ä–µ–π–¥–µ—Ä –º—É–≤–∞—Ñ—Ñ–∞“õ —Ç–∞–±–¥–∏–ª —ë–±–∞–Ω–¥.",
                "pages": "280 —Å–∞“≥–∏—Ñ–∞",
                "year": "2000",
                "download_link": "https://t.me/tradepobooks/17"
            },
            {
                "title": "5. '–ê—Å–æ—Å“≥–æ–∏ —Ç–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£' - –î. –ú–µ—Ä—Ñ–∏",
                "description": "“ö–æ–º—É—Å–∏ —Ç–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£, –∫–∏ 20 —Å–æ–ª–∏ —Ç–∞“∑—Ä–∏–±–∞–∏ –º—É–∞–ª–ª–∏—Ñ –¥–∞—Ä —Ç–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏—Ä–æ –¥–∞—Ä –±–∞—Ä –º–µ–≥–∏—Ä–∞–¥. –î–∞—Ä –∫–∏—Ç–æ–± “≥–∞–º–∞ “∑–∞–Ω–±–∞“≥–æ–∏ –º—É“≥–∏–º–∏ —Ç–∞“≥–ª–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫”£ —Ç–∞–≤—Å–∏—Ñ —à—É–¥–∞–∞–Ω–¥.",
                "pages": "592 —Å–∞“≥–∏—Ñ–∞",
                "year": "1986",
                "download_link": "https://t.me/tradepobooks/19"
            },
            {
                "title": "6. '–†—É“≥—à–∏–Ω–æ—Å–∏–∏ –ø—É–ª' - –ú. –õ–∞–±–∫–æ–≤—Å–∫–∏–π",
                "description": "–ö–∏—Ç–æ–± –±–∞ “∑–∞–Ω–±–∞“≥–æ–∏ —Ä–∞–≤–æ–Ω–∏–∏ –º—É–Ω–æ—Å–∏–±–∞—Ç –±–æ –ø—É–ª –º–µ–ø–∞—Ä–¥–æ–∑–∞–¥. –ú—É–∞–ª–ª–∏—Ñ —Ä–æ–±–∏—Ç–∞–∏ –±–∞–π–Ω–∏ –ø—É–ª –≤–∞ –Ω–µ–∫—É–∞“≥–≤–æ–ª–∏–∏ —à–∞—Ö—Å–∏—Ä–æ –º—É“≥–æ–∫–∏–º–∞ –º–µ–∫—É–Ω–∞–¥ –≤–∞ –¥–∞—Ä –±–æ—Ä–∞–∏ –æ–Ω –∫–∏ —á”£ –≥—É–Ω–∞ –∞–∑ “∑–∏“≥–∞—Ç–∏ –º–æ–ª–∏—è–≤”£ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±—É–¥–∞–Ω –≤–∞ –¥–∞—Ä –∞–π–Ω–∏ –∑–∞–º–æ–Ω —Ö—É—à–±–∞—Ö—Ç –±—É–¥–∞–Ω –º—É–º–∫–∏–Ω –∞—Å—Ç.",
                "pages": "250 —Å–∞“≥–∏—Ñ–∞",
                "year": "2020",
                "download_link": "https://t.me/tradepobooks/22"
            }
        ],
        'ru': [
            {
                "title": "1. '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "–ö–Ω–∏–≥–∞ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∏ –æ —Ç–æ–º, –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏—è–º–∏. –ê–≤—Ç–æ—Ä –¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.",
                "pages": "240 —Å—Ç—Ä–∞–Ω–∏—Ü",
                "year": "1990",
                "download_link": "https://t.me/tradepobooks/10"
            },
            {
                "title": "2. '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' - –î. –®–≤–∞–≥–µ—Ä",
                "description": "–≠—Ç–æ –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. –ö–Ω–∏–≥–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ—Å—Ç—ã–º –º–µ—Ç–æ–¥–æ–º –∏ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.",
                "pages": "380 —Å—Ç—Ä–∞–Ω–∏—Ü",
                "year": "1996",
                "download_link": "https://t.me/tradepobooks/12"
            },
            {
                "title": "3. '–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞' - –ö. –ë–æ—Ä—Å–µ–ª–∏–Ω–æ",
                "description": "–ê–≤—Ç–æ—Ä —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á–∏—Ç–∞—Ç–µ–ª—é –≤–µ—Å—å —Å–≤–æ–π –æ–ø—ã—Ç –∫–∞–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ –ª—É—á—à–∏—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.",
                "pages": "220 —Å—Ç—Ä–∞–Ω–∏—Ü",
                "year": "2005",
                "download_link": "https://t.me/tradepobooks/15"
            },
            {
                "title": "4. '–¢—Ä–µ–π–¥–∏–Ω–≥ –≤ –∑–æ–Ω–µ' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "–ò–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∞–≤—Ç–æ—Ä –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —Ç—Ä–µ–π–¥–µ—Ä. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–º —Ç—Ä–µ–π–¥–µ—Ä–æ–º.",
                "pages": "280 —Å—Ç—Ä–∞–Ω–∏—Ü",
                "year": "2000",
                "download_link": "https://t.me/tradepobooks/17"
            },
            {
                "title": "5. '–û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞' - –î. –ú–µ—Ä—Ñ–∏",
                "description": "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç 20 –ª–µ—Ç –æ–ø—ã—Ç–∞ –∞–≤—Ç–æ—Ä–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ. –í –∫–Ω–∏–≥–µ –æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                "pages": "592 —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
                "year": "1986",
                "download_link": "https://t.me/tradepobooks/19"
            },
            {
                "title": "6. '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –¥–µ–Ω–µ–≥' - –ú. –õ–∞–±–∫–æ–≤—Å–∫–∏–π",
                "description": "–ö–Ω–∏–≥–∞ –ø–æ—Å–≤—è—â–µ–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ–Ω—å–≥–∞–º. –ê–≤—Ç–æ—Ä –æ–±—Å—É–∂–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–µ–Ω—å–≥–∞–º–∏ –∏ –ª–∏—á–Ω—ã–º –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ–º –∏ –æ —Ç–æ–º, –∫–∞–∫ –±—ã—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ —É—Å–ø–µ—à–Ω—ã–º –∏ –ø—Ä–∏ —ç—Ç–æ–º —Å—á–∞—Å—Ç–ª–∏–≤—ã–º.",
                "pages": "250 —Å—Ç—Ä–∞–Ω–∏—Ü",
                "year": "2020",
                "download_link": "https://t.me/tradepobooks/22"
            }
        ],
        'uz': [
            {
                "title": "1. 'Treydingning psixologiyasi' - Mark Duglas",
                "description": "Moliya bozorlari psixologiyasi va qanday qilib his-tuyg'ularni boshqarish haqida kitob. Muallif o'z tajribasini bo'lishadi va muvaffaqiyatli treyding uchun to'g'ri fikrlash yo'llarini ko'rsatadi.",
                "pages": "240 bet",
                "year": "1990",
                "download_link": "https://t.me/tradepobooks/10"
            },
            {
                "title": "2. 'Yangi boshlanuvchilar uchun texnik tahlil' - D. Shvager",
                "description": "Bu barcha toifadagi treyderlar uchun texnik tahlil bo'yicha to'liq qo'llanma. Kitob oddiy usulda yozilgan va bozorni tahlil qilishning asosiy tamoyillarini qamrab oladi.",
                "pages": "380 bet",
                "year": "1996",
                "download_link": "https://t.me/tradepobooks/12"
            },
            {
                "title": "3. 'Valyuta treyderining xotiralari' - K. Borselino",
                "description": "Muallif o'zining eng yaxshi valyuta treyderlaridan biri sifatidagi tajribasini o'quvchiga aytib beradi. Qiziqarli hikoyalar va amaliy maslahatlar.",
                "pages": "220 bet",
                "year": "2005",
                "download_link": "https://t.me/tradepobooks/15"
            },
            {
                "title": "4. 'Zonada treyding' - Mark Duglas",
                "description": "Treyding psixologiyasi haqidagi mashhur kitob, unda muallif har bir treyderga bilishi kerak bo'lgan beshta asosiy haqiqatni tushuntiradi. Muvaffaqiyatli treyderga aylanishni istaydiganlar uchun.",
                "pages": "280 bet",
                "year": "2000",
                "download_link": "https://t.me/tradepobooks/17"
            },
            {
                "title": "5. 'Texnik tahlil asoslari' - D. Merfi",
                "description": "Texnik tahlil entsiklopediyasi, unda muallifning 20 yillik texnik tahlil tajribasi aks etgan. Kitobda grafik tahlilning barcha muhim jihatlari tasvirlangan.",
                "pages": "592 bet",
                "year": "1986",
                "download_link": "https://t.me/tradepobooks/19"
            },
            {
                "title": "6. 'Pul psixologiyasi' - M. Labkovskiy",
                "description": "Kitob pulga bo'lgan munosabatning psixologik jihatlariga bag'ishlangan. Muallif pul va shaxsiy farovonlik o'rtasidagi bog'liqlikni va qanday qilib moliyaviy jihatdan muvaffaqiyatli va ayni paytda baxtli bo'lish mumkinligi haqida muhokama qiladi.",
                "pages": "250 bet",
                "year": "2020",
                "download_link": "https://t.me/tradepobooks/22"
            }
        ],
        'kk': [
            {
                "title": "1. '–¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "“ö–∞—Ä–∂—ã –Ω–∞—Ä—ã“õ—Ç–∞—Ä—ã–Ω—ã“£ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã –∂”ô–Ω–µ —ç–º–æ—Ü–∏—è–ª–∞—Ä–¥—ã “õ–∞–ª–∞–π –±–∞—Å“õ–∞—Ä—É —Ç—É—Ä–∞–ª—ã –∫—ñ—Ç–∞–ø. –ê–≤—Ç–æ—Ä ”©–∑ —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ–º–µ–Ω –±”©–ª—ñ—Å–µ–¥—ñ –∂”ô–Ω–µ —Ç–∞–±—ã—Å—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∫–µ –¥“±—Ä—ã—Å –æ–π–ª–∞—É –∂–æ–ª–¥–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.",
                "pages": "240 –±–µ—Ç",
                "year": "1990",
                "download_link": "https://t.me/tradepobooks/10"
            },
            {
                "title": "2. '–ë–∞—Å—Ç–∞—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É' - –î. –®–≤–∞–≥–µ—Ä",
                "description": "–ë“±–ª –±–∞—Ä–ª—ã“õ —Å–∞–Ω–∞—Ç—Ç–∞“ì—ã —Ç—Ä–µ–π–¥–µ—Ä–ª–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É–¥—ã“£ —Ç–æ–ª—ã“õ –Ω“±—Å“õ–∞—É–ª—ã“ì—ã. –ö—ñ—Ç–∞–ø “õ–∞—Ä–∞–ø–∞–π—ã–º ”ô–¥—ñ—Å–ø–µ–Ω –∂–∞–∑—ã–ª“ì–∞–Ω –∂”ô–Ω–µ –Ω–∞—Ä—ã“õ—Ç—ã —Ç–∞–ª–¥–∞—É–¥—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ “õ–∞“ì–∏–¥–∞–ª–∞—Ä—ã–Ω “õ–∞–º—Ç–∏–¥—ã.",
                "pages": "380 –±–µ—Ç",
                "year": "1996",
                "download_link": "https://t.me/tradepobooks/12"
            },
            {
                "title": "3. '–í–∞–ª—é—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä—ñ–Ω—ñ“£ –µ—Å—Ç–µ–ª—ñ–∫—Ç–µ—Ä—ñ' - –ö. –ë–æ—Ä—Å–µ–ª–∏–Ω–æ",
                "description": "–ê–≤—Ç–æ—Ä –µ“£ –∂–∞“õ—Å—ã –≤–∞–ª—é—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–ª–µ—Ä—ñ–Ω—ñ“£ –±—ñ—Ä—ñ —Ä–µ—Ç—ñ–Ω–¥–µ–≥—ñ –±–∞—Ä–ª—ã“õ —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ–Ω –æ“õ—ã—Ä–º–∞–Ω“ì–∞ –∞–π—Ç—ã–ø –±–µ—Ä–µ–¥—ñ. “ö—ã–∑—ã“õ—Ç—ã ”ô“£–≥—ñ–º–µ–ª–µ—Ä –º–µ–Ω —Ç”ô–∂—ñ—Ä–∏–±–µ–ª—ñ–∫ –∫–µ“£–µ—Å—Ç–µ—Ä.",
                "pages": "220 –±–µ—Ç",
                "year": "2005",
                "download_link": "https://t.me/tradepobooks/15"
            },
            {
                "title": "4. '–ê–π–º–∞“õ—Ç–∞“ì—ã —Ç—Ä–µ–π–¥–∏–Ω–≥' - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å",
                "description": "–¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã —Ç—É—Ä–∞–ª—ã –∞—Ç–∞“õ—Ç—ã –∫—ñ—Ç–∞–ø, –æ–Ω–¥–∞ –∞–≤—Ç–æ—Ä ”ô—Ä–±—ñ—Ä —Ç—Ä–µ–π–¥–µ—Ä –±—ñ–ª—É—ñ –∫–µ—Ä–µ–∫ –±–µ—Å –Ω–µ–≥—ñ–∑–≥—ñ —à—ã–Ω–¥—ã“õ—Ç—ã —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–µ–¥—ñ. –¢–∞–±—ã—Å—Ç—ã —Ç—Ä–µ–π–¥–µ—Ä–≥–µ –∞–π–Ω–∞–ª“ì—ã—Å—ã –∫–µ–ª–µ—Ç—ñ–Ω–¥–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.",
                "pages": "280 –±–µ—Ç",
                "year": "2000",
                "download_link": "https://t.me/tradepobooks/17"
            },
            {
                "title": "5. '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É –Ω–µ–≥—ñ–∑–¥–µ—Ä—ñ' - –î. –ú–µ—Ä—Ñ–∏",
                "description": "–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è—Å—ã, –æ–Ω–¥–∞ –∞–≤—Ç–æ—Ä–¥—ã“£ —Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É–¥–∞“ì—ã 20 –∂—ã–ª–¥—ã“õ —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ “õ–∞–º—Ç—ã–ª“ì–∞–Ω. –ö—ñ—Ç–∞–ø—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É–¥—ã“£ –±–∞—Ä–ª—ã“õ –º–∞“£—ã–∑–¥—ã –∞—Å–ø–µ–∫—Ç—ñ–ª–µ—Ä—ñ —Å–∏–ø–∞—Ç—Ç–∞–ª“ì–∞–Ω.",
                "pages": "592 –±–µ—Ç",
                "year": "1986",
                "download_link": "https://t.me/tradepobooks/19"
            },
            {
                "title": "6. '–ê“õ—à–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã' - –ú. –õ–∞–±–∫–æ–≤—Å–∫–∏–π",
                "description": "–ö—ñ—Ç–∞–ø –∞“õ—à–∞“ì–∞ “õ–∞—Ç—ã–Ω–∞—Å—Ç—ã“£ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã“õ –∞—Å–ø–µ–∫—Ç—ñ–ª–µ—Ä—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω. –ê–≤—Ç–æ—Ä –∞“õ—à–∞ –º–µ–Ω –∂–µ–∫–µ ”ô–ª-–∞—É“õ–∞—Ç –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –∂”ô–Ω–µ “õ–∞–ª–∞–π “õ–∞—Ä–∂—ã–ª—ã“õ –∂–∞“ì—ã–Ω–∞–Ω —Ç–∞–±—ã—Å—Ç—ã –∂”ô–Ω–µ —Å–æ–Ω—ã–º–µ–Ω –±—ñ—Ä–≥–µ –±–∞“õ—ã—Ç—Ç—ã –±–æ–ª—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω —Ç–∞–ª“õ—ã–ª–∞–π–¥—ã.",
                "pages": "250 –±–µ—Ç",
                "year": "2020",
                "download_link": "https://t.me/tradepobooks/22"
            }
        ],
        'en': [
            {
                "title": "1. 'Trading in the Zone' - Mark Douglas",
                "description": "A book about the psychology of financial markets and how to manage emotions. The author shares his experience and shows ways of correct thinking for successful trading.",
                "pages": "240 pages",
                "year": "1990",
                "download_link": "https://t.me/tradepobooks/10"
            },
            {
                "title": "2. 'Technical Analysis for Beginners' - J. Schwager",
                "description": "This is a complete guide to technical analysis for all categories of traders. The book is written in a simple method and covers the basic principles of market analysis.",
                "pages": "380 pages",
                "year": "1996",
                "download_link": "https://t.me/tradepobooks/12"
            },
            {
                "title": "3. 'Reminiscences of a Currency Trader' - K. Borselino",
                "description": "The author tells the reader all his experience as one of the best currency traders. Interesting stories and practical advice.",
                "pages": "220 pages",
                "year": "2005",
                "download_link": "https://t.me/tradepobooks/15"
            },
            {
                "title": "4. 'The Disciplined Trader' - Mark Douglas",
                "description": "A famous book on trading psychology, in which the author explains the five basic truths that every trader should know. For those who want to become a successful trader.",
                "pages": "280 pages",
                "year": "2000",
                "download_link": "https://t.me/tradepobooks/17"
            },
            {
                "title": "5. 'Technical Analysis Foundations' - J. Murphy",
                "description": "Encyclopedia of technical analysis, covering the author's 20 years of experience in technical analysis. The book describes all important aspects of graphical analysis.",
                "pages": "592 pages",
                "year": "1986",
                "download_link": "https://t.me/tradepobooks/19"
            },
            {
                "title": "6. 'The Psychology of Money' - M. Housel",
                "description": "The book is dedicated to the psychological aspects of attitude to money. The author discusses the connection between money and personal well-being and how to be financially successful and at the same time happy.",
                "pages": "250 pages",
                "year": "2020",
                "download_link": "https://t.me/tradepobooks/22"
            }
        ]
    }
    
    button_text = {
        'tg': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç',
        'ru': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
        'uz': '‚Ü©Ô∏è Orqaga',
        'kk': '‚Ü©Ô∏è –ê—Ä—Ç“õ–∞',
        'en': '‚Ü©Ô∏è Back'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    title = titles.get(lang_code, titles['ru'])
    description = descriptions.get(lang_code, descriptions['ru'])
    book_list = books.get(lang_code, books['ru'])
    back_button = button_text.get(lang_code, button_text['ru'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    keyboard = []
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–Ω–∏–≥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    download_button_text = {
        'tg': 'üì• –ë–æ—Ä–≥–∏—Ä”£ –∫–∞—Ä–¥–∞–Ω',
        'ru': 'üì• –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É',
        'uz': 'üì• Kitobni yuklab olish',
        'kk': 'üì• –ö—ñ—Ç–∞–ø—Ç—ã –∂“Ø–∫—Ç–µ—É',
        'en': 'üì• Download book'
    }
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    details_button_text = {
        'tg': '‚ÑπÔ∏è –ú–∞—ä–ª—É–º–æ—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª',
        'ru': '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
        'uz': '‚ÑπÔ∏è Batafsil',
        'kk': '‚ÑπÔ∏è –¢–æ–ª—ã“ì—ã—Ä–∞“õ',
        'en': '‚ÑπÔ∏è Details'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ –∏ –∫–Ω–æ–ø–∫–∏
    message = f"{title}\n\n{description}\n\n"
    
    for i, book in enumerate(book_list):
        book_title = book["title"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        message += f"*{book_title}*\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
        keyboard.append([
            InlineKeyboardButton(
                download_button_text.get(lang_code, download_button_text['ru']),
                url=book["download_link"]
            ),
            InlineKeyboardButton(
                details_button_text.get(lang_code, details_button_text['ru']),
                callback_data=f"book_details_{i}"
            )
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–Ω–∏–≥–∞–º–∏
        if i < len(book_list) - 1:
            message += "\n--------------------\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(back_button, callback_data="return_to_main")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

async def handle_trading_beginner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É —Å –Ω—É–ª—è"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Processing trading_beginner request for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
    except Exception as e:
        logger.error(f"Error in handle_trading_beginner: {e}")
        lang_code = 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è
    if query.data.startswith("beginner_topic_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–º—ã –∏–∑ callback_data
        topic_number = query.data.replace("beginner_topic_", "")
        return await show_beginner_topic_details(update, context, topic_number, lang_code)
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª –æ–±—É—á–µ–Ω–∏—è
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    titles = {
        'tg': 'üî∞ –û–º”Ø–∑–∏—à–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥ –∞–∑ —Å–∏—Ñ—Ä',
        'ru': 'üî∞ –û–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥—É —Å –Ω—É–ª—è',
        'uz': 'üî∞ Treyding bo\'yicha boshlang\'ich ta\'lim',
        'kk': 'üî∞ –¢—Ä–µ–π–¥–∏–Ω–≥—Ç—ñ –Ω”©–ª–¥–µ–Ω “Ø–π—Ä–µ–Ω—É',
        'en': 'üî∞ Trading for Beginners'
    }
    
    # –¢–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    descriptions = {
        'tg': '–†–æ“≥–Ω–∞–º–æ–∏ “õ–∞–¥–∞–º –±–∞ “õ–∞–¥–∞–º –±–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥. –ò–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥, –∫–∏ —á–∏—Ä–æ –º–µ–æ–º”Ø–∑–µ–¥:',
        'ru': '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å:',
        'uz': 'Treyding boshlash uchun bosqichma-bosqich qo\'llanma. O\'rganmoqchi bo\'lgan narsani tanlang:',
        'kk': '–¢—Ä–µ–π–¥–∏–Ω–≥—Ç—ñ –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω “õ–∞–¥–∞–º–¥—ã“õ –Ω“±—Å“õ–∞—É–ª—ã“õ. –ù–µ–Ω—ñ –æ“õ—ã“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:',
        'en': 'Step-by-step guide to start trading. Choose what you want to learn:'
    }
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    topic_titles = {
        'tg': [
            "1Ô∏è‚É£ *–ê—Å–æ—Å“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥*",
            "2Ô∏è‚É£ *–ò–Ω—Ç–∏—Ö–æ–±–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞*",
            "3Ô∏è‚É£ *–¢–∞“≥–ª–∏–ª–∏ –±–æ–∑–æ—Ä*",
            "4Ô∏è‚É£ *–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ*",
            "5Ô∏è‚É£ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥*",
            "6Ô∏è‚É£ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Å–∞–≤–¥–æ*",
            "7Ô∏è‚É£ *–ê–º–∞–ª–∏—è–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥*",
            "8Ô∏è‚É£ *–¢–∞–∫–º–∏–ª–∏ –º–∞–ª–∞–∫–∞*"
        ],
        'ru': [
            "1Ô∏è‚É£ *–û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞*",
            "2Ô∏è‚É£ *–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã*",
            "3Ô∏è‚É£ *–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞*",
            "4Ô∏è‚É£ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏*",
            "5Ô∏è‚É£ *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞*",
            "6Ô∏è‚É£ *–¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*",
            "7Ô∏è‚É£ *–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞*",
            "8Ô∏è‚É£ *–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏*"
        ],
        'uz': [
            "1Ô∏è‚É£ *Treyding asoslari*",
            "2Ô∏è‚É£ *Platforma tanlash*",
            "3Ô∏è‚É£ *Bozor tahlili*",
            "4Ô∏è‚É£ *Xavflarni boshqarish*",
            "5Ô∏è‚É£ *Treyding psixologiyasi*",
            "6Ô∏è‚É£ *Savdo strategiyalari*",
            "7Ô∏è‚É£ *Treyding amaliyoti*",
            "8Ô∏è‚É£ *Malakani oshirish*"
        ],
        'kk': [
            "1Ô∏è‚É£ *–¢—Ä–µ–π–¥–∏–Ω–≥ –Ω–µ–≥—ñ–∑–¥–µ—Ä—ñ*",
            "2Ô∏è‚É£ *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–Ω—ã —Ç–∞“£–¥–∞—É*",
            "3Ô∏è‚É£ *–ù–∞—Ä—ã“õ—Ç—ã —Ç–∞–ª–¥–∞—É*",
            "4Ô∏è‚É£ *–¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É*",
            "5Ô∏è‚É£ *–¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã*",
            "6Ô∏è‚É£ *–°–∞—É–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã*",
            "7Ô∏è‚É£ *–¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Ä–∞–∫—Ç–∏–∫–∞—Å—ã*",
            "8Ô∏è‚É£ *–ë—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—É*"
        ],
        'en': [
            "1Ô∏è‚É£ *Trading Basics*",
            "2Ô∏è‚É£ *Platform Selection*",
            "3Ô∏è‚É£ *Market Analysis*",
            "4Ô∏è‚É£ *Risk Management*",
            "5Ô∏è‚É£ *Trading Psychology*",
            "6Ô∏è‚É£ *Trading Strategies*",
            "7Ô∏è‚É£ *Trading Practice*",
            "8Ô∏è‚É£ *Skill Enhancement*"
        ]
    }
    
    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    button_texts = {
        'tg': {
            'details': "üìñ –ú—É—Ñ–∞—Å—Å–∞–ª",
            'back': "‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç",
            'main': "üè† –ë–∞ —Å–∞“≥–∏—Ñ–∞–∏ –∞—Å–æ—Å”£"
        },
        'ru': {
            'details': "üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            'main': "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"
        },
        'uz': {
            'details': "üìñ Batafsil",
            'back': "‚Ü©Ô∏è Orqaga",
            'main': "üè† Bosh sahifaga"
        },
        'kk': {
            'details': "üìñ –¢–æ–ª—ã“ì—ã—Ä–∞“õ",
            'back': "‚Ü©Ô∏è –ê—Ä—Ç“õ–∞",
            'main': "üè† –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ"
        },
        'en': {
            'details': "üìñ More Details",
            'back': "‚Ü©Ô∏è Back",
            'main': "üè† Home"
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    title = titles.get(lang_code, titles['ru'])
    description = descriptions.get(lang_code, descriptions['ru'])
    topics = topic_titles.get(lang_code, topic_titles['ru'])
    button_text = button_texts.get(lang_code, button_texts['ru'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"{title}\n\n{description}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—É—á–µ–Ω–∏—è
    for i, topic in enumerate(topics):
        topic_number = i + 1
        topic_text = topic.replace("*", "")  # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        keyboard.append([
            InlineKeyboardButton(topic_text, callback_data=f"beginner_topic_{topic_number}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(button_text['main'], callback_data="return_to_main")
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def show_beginner_topic_details(update: Update, context: ContextTypes.DEFAULT_TYPE, topic_number: str, lang_code: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É"""
    query = update.callback_query
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    topic_content = {
        'tg': {
            '1': {
                'title': "üî∞ –ê—Å–æ—Å“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
                'content': [
                    "*–ß”£ “≥–∞—Å—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥?*\n–¢—Ä–µ–π–¥–∏–Ω–≥ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à–∏ –¥–æ—Ä–æ–∏“≥–æ–∏ –º–æ–ª–∏—è–≤”£ (–∞—Ä–∑“≥–æ, —Å–∞“≥–º–∏—è“≥–æ, –º–æ–ª“≥–æ) –±–æ –º–∞“õ—Å–∞–¥–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞ –∞—Å—Ç.",
                    "*–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –∞—Å–æ—Å”£:*\n‚Ä¢ –°–ø—Ä–µ–¥ ‚Äì —Ñ–∞—Ä“õ–∏—è—Ç–∏ –Ω–∞—Ä—Ö–∏ —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à\n‚Ä¢ –í–æ–ª–∞—Ç–∏–ª”£ ‚Äì —Ç–∞“ì–∏—Ä—ë–±–∏–∏ –Ω–∞—Ä—Ö–∏ –¥–æ—Ä–æ”£\n‚Ä¢ –õ–∏–∫–≤–∏–¥”£ ‚Äì –æ—Å–æ–Ω —Ç–∞–±–¥–∏–ª –¥–æ–¥–∞–Ω–∏ –¥–æ—Ä–æ”£ –±–∞ –ø—É–ª\n‚Ä¢ Take Profit/Stop Loss ‚Äì —Ñ–∞—Ä–º–æ–∏—à“≥–æ –±–∞—Ä–æ–∏ –Ω–∞–∑–æ—Ä–∞—Ç–∏ —Ö–∞—Ç–∞—Ä“≥–æ",
                    "*–ù–∞–º—É–¥“≥–æ–∏ –±–æ–∑–æ—Ä“≥–æ:*\n‚Ä¢ Forex ‚Äì –±–æ–∑–æ—Ä–∏ –∞—Å—ä–æ—Ä\n‚Ä¢ –ë–æ–∑–æ—Ä–∏ —Å–∞“≥–º–∏—è“≥–æ ‚Äì —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à–∏ —Å–∞“≥–º–∏—è“≥–æ–∏ —à–∏—Ä–∫–∞—Ç“≥–æ\n‚Ä¢ –ë–æ–∑–æ—Ä–∏ —Ñ—å—é—á–µ—Ä—Å“≥–æ ‚Äì —à–∞—Ä—Ç–Ω–æ–º–∞“≥–æ –±–∞—Ä–æ–∏ —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à–∏ –¥–æ—Ä–æ”£ –¥–∞—Ä –æ—è–Ω–¥–∞\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–±–æ–∑–æ—Ä ‚Äì —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à–∏ –∞—Å—ä–æ—Ä–∏ —Ä–∞“õ–∞–º”£",
                    "*–£—Å–ª—É–±“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥:*\n‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥ ‚Äì –º—É–æ–º–∏–ª–æ—Ç–∏ –∫”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç –±–æ –¥–∞—Ä–æ–º–∞–¥–∏ —Ö—É—Ä–¥\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥–∏ —Ä”Ø–∑–æ–Ω–∞ ‚Äì –º—É–æ–º–∏–ª–∞ –¥–∞—Ä –¥–∞–≤–æ–º–∏ —Ä”Ø–∑\n‚Ä¢ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äì –º—É–æ–º–∏–ª–∞“≥–æ –¥–∞—Ä –¥–∞–≤–æ–º–∏ —è–∫—á–∞–Ω–¥ —Ä”Ø–∑ —Ç–æ “≥–∞—Ñ—Ç–∞\n‚Ä¢ –°–∞—Ä–º–æ—è–≥—É–∑–æ—Ä–∏–∏ –¥–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç ‚Äì –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞–≤“õ–µ—ä –±–∞—Ä–æ–∏ –º–æ“≥“≥–æ/—Å–æ–ª“≥–æ"
                ]
            },
            '2': {
                'title': "üñ•Ô∏è –ò–Ω—Ç–∏—Ö–æ–±–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                'content': [
                    "*–ù–∞–º—É–¥“≥–æ–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ:*\n‚Ä¢ –ë—Ä–æ–∫–µ—Ä–æ–Ω ‚Äì —à–∏—Ä–∫–∞—Ç“≥–æ–µ, –∫–∏ –±–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–Ω –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ –±–æ–∑–æ—Ä“≥–æ—Ä–æ –º–µ–¥–∏“≥–∞–Ω–¥\n‚Ä¢ –ë–∏—Ä–∂–∞“≥–æ ‚Äì –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ–µ, –∫–∏ –±–∞ –º—É–æ–º–∏–ª–æ—Ç–∏ –±–µ–≤–æ—Å–∏—Ç–∞ –∏–º–∫–æ–Ω –º–µ–¥–∏“≥–∞–Ω–¥",
                    "*–ú–µ—ä—ë—Ä“≥–æ–∏ –∏–Ω—Ç–∏—Ö–æ–±:*\n‚Ä¢ –ë–æ—ç—ä—Ç–∏–º–æ–¥”£ ‚Äì —Ç–∞–Ω–∑–∏–º–∫—É–Ω–∏–∏ —à–∏—Ä–∫–∞—Ç, —Ç–∞—ä—Ä–∏—Ö–∏ –∫–æ—Ä\n‚Ä¢ –ú–∞–±–ª–∞“ì –±–∞—Ä–æ–∏ –¥–æ—Ö–∏–ª—à–∞–≤”£ ‚Äì “≥–∞–¥–¥–∏ –∞“õ–∞–ª–∏ —Å–∞—Ä–º–æ—è–≥—É–∑–æ—Ä”£\n‚Ä¢ –®–∞—Ä—Ç“≥–æ–∏ –º—É–æ–º–∏–ª–∞ ‚Äì —Å–ø—Ä–µ–¥, –∫–æ–º–∏—Å—Å–∏—è, –ª–µ–≤–µ—Ä–∞–∂\n‚Ä¢ –î–∞—Å—Ç—Ä–∞—Å–∏–∏ —Ñ–æ–Ω–¥ ‚Äì —É—Å—É–ª“≥–æ–∏ –ø–∞—Å–∞–Ω–¥–æ–∑/–±–∞—Ä–æ–≤–∞—Ä–¥–∞–Ω–∏ –º–∞–±–ª–∞“ì\n‚Ä¢ –§—É–Ω–∫—Å–∏–æ–Ω–∞–ª”£ ‚Äì –≥—Ä–∞—Ñ–∏–∫“≥–æ, –Ω–∏—à–æ–Ω–¥–∏“≥–∞–Ω–¥–∞“≥–æ, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ –º–æ–±–∏–ª”£",
                    "*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ–∏ –º–∞—ä—Ä—É—Ñ:*\n‚Ä¢ MetaTrader 4/5 ‚Äì –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ Forex –≤–∞ —Ñ—å—é—á–µ—Ä—Å“≥–æ\n‚Ä¢ TradingView ‚Äì –±–∞—Ä–æ–∏ —Ç–∞“≥–ª–∏–ª –≤–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥\n‚Ä¢ Think or Swim ‚Äì –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ —Å–∞“≥–º–∏—è“≥–æ –≤–∞ –æ–ø—Å–∏–æ–Ω“≥–æ\n‚Ä¢ Binance ‚Äì –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ –∫—Ä–∏–ø—Ç–æ–∞—Å—ä–æ—Ä",
                    "*–¢–∞–≤—Å–∏—è“≥–æ:*\n‚Ä¢ –ê–≤–≤–∞–ª –¥–∞—Ä “≥–∏—Å–æ–±–∏ –Ω–∞–º–æ–∏—à”£ (–¥–µ–º–æ) –∫–æ—Ä –∫—É–Ω–µ–¥\n‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ä–æ –±–∞ —Ö—É–¥ –º—É–≤–æ—Ñ–∏“õ –∫—É–Ω–µ–¥\n‚Ä¢ –ò–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ —Ç–∞“≥–ª–∏–ª –≤–∞ “≥–∏—Å–æ–±–æ—Ç—Ä–æ –æ–º”Ø–∑–µ–¥\n‚Ä¢ –ë–µ—Ö–∞—Ç–∞—Ä–∏–∏ “≥–∏—Å–æ–±—Ä–æ —Ç–∞—ä–º–∏–Ω –∫—É–Ω–µ–¥ (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç—Å–∏—è–∏ –¥—É–æ–º–∏–ª–∞, –ø–∞—Ä–æ–ª–∏ –º—É—Ä–∞–∫–∫–∞–±)"
                ]
            },
            '3': {
                'title': "üìä –¢–∞“≥–ª–∏–ª–∏ –±–æ–∑–æ—Ä",
                'content': [
                    "*–¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£:*\n‚Ä¢ –û–º”Ø–∑–∏—à–∏ –≥—Ä–∞—Ñ–∏–∫“≥–æ –≤–∞ –Ω–∞“õ—à–∞“≥–æ\n‚Ä¢ –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ (MA, MACD, RSI)\n‚Ä¢ –®–∏–Ω–æ—Ö—Ç–∞–Ω–∏ –Ω–∞“õ—à“≥–æ–∏ –Ω–∞—Ä—Ö”£\n‚Ä¢ –î–∞—Ä—ë—Ñ—Ç–∏ —Å–∞—Ç“≥“≥–æ–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ –≤–∞ –º—É“õ–æ–≤–∏–º–∞—Ç",
                    "*–¢–∞“≥–ª–∏–ª–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª”£:*\n‚Ä¢ –û–º”Ø–∑–∏—à–∏ –≤–∞–∑—ä–∏ –∏“õ—Ç–∏—Å–æ–¥–∏–∏ —É–º—É–º”£\n‚Ä¢ –¢–∞“≥–ª–∏–ª–∏ –Ω–∏—à–æ–Ω–¥–∏“≥–∞–Ω–¥–∞“≥–æ–∏ –∏“õ—Ç–∏—Å–æ–¥”£\n‚Ä¢ –ë–∞“≥–æ–¥–∏“≥–∏–∏ —Å–∏—ë—Å–∞—Ç–∏ –ø—É–ª–∏–∏ –±–æ–Ω–∫“≥–æ–∏ –º–∞—Ä–∫–∞–∑”£\n‚Ä¢ –ë–∞“≥–æ–¥–∏“≥–∏–∏ —à–∏—Ä–∫–∞—Ç“≥–æ (–±–∞—Ä–æ–∏ —Å–∞“≥–º–∏—è“≥–æ)",
                    "*–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ –º–∞—ä—Ä—É—Ñ:*\n‚Ä¢ Moving Average (MA) ‚Äì –º–∏—ë–Ω–∞–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞\n‚Ä¢ Relative Strength Index (RSI) ‚Äì –Ω–∏—à–æ–Ω–¥–∏“≥–∞–Ω–¥–∞–∏ –º—É“õ–æ–∏—Å–∞–≤–∏–∏ “õ—É–≤–≤–∞\n‚Ä¢ Moving Average Convergence Divergence (MACD) ‚Äì “≥–∞–º–≥–∏—Ä–æ”£ –≤–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Å–∏—è–∏ –º–∏—ë–Ω–∞–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞\n‚Ä¢ Bollinger Bands ‚Äì —Ö–∞—Ç“≥–æ–∏ –≤–æ–ª–∞—Ç–∏–ª”£ –¥–∞—Ä –∞—Ç—Ä–æ—Ñ–∏ –Ω–∞—Ä—Ö",
                    "*–°–∞—Ä—á–∞—à–º–∞“≥–æ–∏ –∏—Ç—Ç–∏–ª–æ–æ—Ç:*\n‚Ä¢ –¢–∞“õ–≤–∏–º–∏ –∏“õ—Ç–∏—Å–æ–¥”£\n‚Ä¢ –•–∞–±–∞—Ä“≥–æ–∏ –º–æ–ª–∏—è–≤”£\n‚Ä¢ –ù–∞—à—Ä–∏—è“≥–æ–∏ –±–æ–Ω–∫“≥–æ–∏ –º–∞—Ä–∫–∞–∑”£\n‚Ä¢ “≤–∏—Å–æ–±–æ—Ç–∏ —à–∏—Ä–∫–∞—Ç“≥–æ"
                ]
            },
            '4': {
                'title': "‚ö†Ô∏è –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ",
                'content': [
                    "*–ü—Ä–∏–Ω—Å–∏–ø“≥–æ–∏ –∞—Å–æ—Å”£:*\n‚Ä¢ –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ö–∞—Ç–∞—Ä–∏ “≥–∞–¥–¥–∏ –∞–∫—Å–∞—Ä –±–∞—Ä–æ–∏ “≥–∞—Ä —è–∫ –º—É–æ–º–∏–ª–∞\n‚Ä¢ “≤–∞—Ä–≥–∏–∑ –±–µ—à –∞–∑ 1-2% –∞–∑ —Å–∞—Ä–º–æ—è–∏ —É–º—É–º–∏—Ä–æ –±–∞ —Ö–∞—Ç–∞—Ä –Ω–∞–≥—É–∑–æ—Ä–µ–¥\n‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ç—Å–∏—è–∏ —Å–∞—Ä–º–æ—è–≥—É–∑–æ—Ä–∏“≥–æ\n‚Ä¢ “≤–∞–º–µ—à–∞ Stop Loss –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥",
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ:*\n‚Ä¢ Stop Loss ‚Äì —Ñ–∞—Ä–º–æ–∏—à –±–∞—Ä–æ–∏ –º–∞“≥–¥—É–¥ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞—Ä–∞—Ä\n‚Ä¢ Take Profit ‚Äì —Ñ–∞—Ä–º–æ–∏—à –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞\n‚Ä¢ –¢–∞–Ω–æ—Å—É–±–∏ —Ö–∞–≤—Ñ –≤–∞ –¥–∞—Ä–æ–º–∞–¥ ‚Äì 1:2 —ë –±–µ—à—Ç–∞—Ä —Ç–∞–≤—Å–∏—è –¥–æ–¥–∞ –º–µ—à–∞–≤–∞–¥\n‚Ä¢ Money Management ‚Äì —Ç–∞“õ—Å–∏–º–∏ –¥—É—Ä—É—Å—Ç–∏ —Å–∞—Ä–º–æ—è",
                    "*–•–∞—Ç–æ“≥–æ–∏ –º–∞—ä–º—É–ª”£:*\n‚Ä¢ –ú–∞–±–ª–∞“ì–≥—É–∑–æ—Ä–∏–∏ –∞–∑ “≥–∞–¥ –∑–∏—ë–¥ –±–∞ —è–∫ –º—É–æ–º–∏–ª–∞\n‚Ä¢ –ù–∞–±—É–¥–∞–Ω–∏ –Ω–∞“õ—à–∞–∏ –∞–º–∞–ª\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥ –±–∞—Ä —Ö–∏–ª–æ—Ñ–∏ —Ç—Ä–µ–Ω–¥\n‚Ä¢ –ú—É–æ–º–∏–ª–∞“≥–æ–∏ “≥–∏—Å—Å”£\n‚Ä¢ –ú—É–Ω—Ç–∞–∑–∞–º —Ç–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                    "*“ö–æ–∏–¥–∞“≥–æ–∏ –º—É“≥–∏–º:*\n‚Ä¢ –¢–∞–Ω“≥–æ –±–æ –º–∞–±–ª–∞“ì–µ, –∫–∏ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –¥–∞—Å—Ç –¥–∏“≥–µ–¥, —Å–∞–≤–¥–æ –∫—É–Ω–µ–¥\n‚Ä¢ –ñ—É—Ä–Ω–∞–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥ –ø–µ—à –±–∞—Ä–µ–¥\n‚Ä¢ –ú–∞–±–ª–∞“ì–∏ –∞–∑ –¥–∞—Å—Ç –¥–æ–¥–∞—Ä–æ –∑—É–¥ –±–∞—Ä–≥–∞—Ä–¥–æ–Ω–∏–¥–∞–Ω –Ω–∞—Ö–æ“≥–µ–¥\n‚Ä¢ –î–æ–∏–º–æ –¥–æ–Ω–∏—à–∏ —Ö—É–¥—Ä–æ —Ç–∞–∫–º–∏–ª –¥–∏“≥–µ–¥"
                ]
            },
            '5': {
                'title': "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
                'content': [
                    "*“≤–æ–ª–∞—Ç“≥–æ–∏ —ç–º–æ—Ç—Å–∏–æ–Ω–∞–ª”£:*\n‚Ä¢ –¢–∞–º–∞—ä ‚Äì —Ö–æ“≥–∏—à–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞–∏ –∞–∑ “≥–∞–¥ –∑–∏—ë–¥\n‚Ä¢ –¢–∞—Ä—Å ‚Äì –º–µ—Ç–∞–≤–æ–Ω–∞–¥ –±–∞ “õ–∞—Ä–æ—Ä“≥–æ–∏ –Ω–æ–¥—É—Ä—É—Å—Ç –æ–≤–∞—Ä–∞–¥\n‚Ä¢ –£–º–µ–¥ ‚Äì –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞–≤“õ–µ–∏ –∑–∞—Ä–∞—Ä–æ–≤–∞—Ä –¥–∞—Ä —É–º–µ–¥–∏ —Ç–∞“ì–π–∏—Ä\n‚Ä¢ –ê—Ñ—Å”Ø—Å ‚Äì –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞–≤“õ–µ–∏ –∑–∞—Ä–∞—Ä–æ–≤–∞—Ä –±–∞—Ä–æ–∏ –Ω–∞–ø–∞–∑–∏—Ä—É—Ñ—Ç–∞–Ω–∏ –∑–∞—Ä–∞—Ä",
                    "*–ò–Ω—Ç–∏–∑–æ–º–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥:*\n‚Ä¢ –†–∏–æ—è–∏ “õ–∞—Ç—ä–∏–∏ –Ω–∞“õ—à–∞–∏ —Ö—É–¥\n‚Ä¢ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —ç–º–æ—Ç—Å–∏—è“≥–æ\n‚Ä¢ –ú—É–Ω–æ—Å–∏–±–∞—Ç–∏ –º—É–Ω—Ç–∞–∑–∞–º –±–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥\n‚Ä¢ “ö–æ–±–∏–ª–∏—è—Ç–∏ “õ–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω “≥–∞–Ω–≥–æ–º–∏ –∑–∞—Ä–∞—Ä",
                    "*–ù–∞“õ—à–∞–∏ –º—É–æ–º–∏–ª–∞:*\n‚Ä¢ –î–æ—Ö–∏–ª—à–∞–≤”£ –≤–∞ –±–∞—Ä–æ–º–∞–¥\n‚Ä¢ “≤–∞“∑–º–∏ –º—É–æ–º–∏–ª–∞\n‚Ä¢ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ\n‚Ä¢ –®–∞—Ä—Ç“≥–æ–∏ –ª–∞“ì–≤–∏ –Ω–∞“õ—à–∞",
                    "*–¢–∞–≤—Å–∏—è“≥–æ:*\n‚Ä¢ –ñ—É—Ä–Ω–∞–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥ –ø–µ—à –±–∞—Ä–µ–¥ –≤–∞ –Ω–∞—Ç–∏“∑–∞“≥–æ—Ä–æ —Ç–∞“≥–ª–∏–ª –∫—É–Ω–µ–¥\n‚Ä¢ –ë–æ –º–∞–±–ª–∞“ì–∏ —Ö—É—Ä–¥ –æ“ì–æ–∑ –∫—É–Ω–µ–¥, —Ç–æ —Ç–∞“∑—Ä–∏–±–∞ –ø–∞–π–¥–æ –∫—É–Ω–µ–¥\n‚Ä¢ –¢–∞“∑—Ä–∏–±–∞–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä “≥–∏—Å–æ–±–∏ –¥–µ–º–æ —Å–∞–Ω“∑–µ–¥\n‚Ä¢ –ò—Å—Ç–∏—Ä–æ“≥–∞—Ç –∫—É–Ω–µ–¥, –∞–≥–∞—Ä –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ –±–∞–¥ –±–æ—à–µ–¥\n‚Ä¢ –¢–∞–Ω–∞—Ñ—Ñ—É—Å –∫—É–Ω–µ–¥, –∞–≥–∞—Ä —è–∫—á–∞–Ω–¥ –∑–∞—Ä–∞—Ä –ø–∞–π –¥–∞—Ä –ø–∞–π –±–æ—à–∞–¥"
                ]
            },
            '6': {
                'title': "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Å–∞–≤–¥–æ",
                'content': [
                    "*–ù–∞–º—É–¥“≥–æ–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ:*\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Ç—Ä–µ–Ω–¥”£ ‚Äì –±–∞—Ä–æ–∏ –±–æ–∑–æ—Ä“≥–æ–∏ –¥–∞—Ä “≥–∞—Ä–∞–∫–∞—Ç\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Ä–∞–Ω–≥”£ ‚Äì –±–∞—Ä–æ–∏ –±–æ–∑–æ—Ä“≥–æ–∏ –±–æ—Å–ø—Ä–µ–¥\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥ ‚Äì –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞–∏ —Ö—É—Ä–¥–∏ –∑—É–¥\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Å–≤–∏–Ω–≥ ‚Äì –±–∞—Ä–æ–∏ —Ñ–æ–∏–¥–∞ –∞–∑ —Ç–∞“ì–π–∏—Ä–æ—Ç–∏ –º–∏—ë–Ω–∞–º—É“≥–ª–∞—Ç",
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ –º–∞—ä—Ä—É—Ñ:*\n‚Ä¢ –ì—É–∑–∞—Ä–∏—à–∏ –º–∏—ë–Ω–∞–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞ ‚Äì –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –≥—É–∑–∞—Ä–∏—à–∏ MA –±–∞—Ä–æ–∏ –º—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç—Ä–µ–Ω–¥\n‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è —Å –æ—Ç—Å–∫–æ–∫–æ–º ‚Äì –∏–Ω—Ç–∏–∑–æ—Ä–∏ –±–∞—Ä“õ–∞—Ä–æ—Ä—à–∞–≤–∏–∏ –Ω–∞—Ä—Ö –∞–∑ —Å–∞—Ç“≥“≥–æ\n‚Ä¢ –°–∞–≤–¥–æ–∏ —à–∏–∫–∞—Å—Ç–∏ —Å–∞—Ç“≥ ‚Äì –∏–Ω—Ç–∏–∑–æ—Ä–∏ —à–∏–∫–∞—Å—Ç–∏ —Å–∞—Ç“≥“≥–æ–∏ –º—É“≥–∏–º\n‚Ä¢ RSI —Å–∞—Ñ ‚Äì —Ö–∞—Ä–∏–¥—É —Ñ—É—Ä”Ø—à “≥–∞–Ω–≥–æ–º–∏ –±–∞—Ä–∑–∏—ë–¥/–±–∞—Ä–∑–∏—ë–¥ —Ö–∞—Ä–∏–¥–∞–Ω–∏ RSI",
                    "*–ò–Ω—Ç–∏—Ö–æ–±–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:*\n‚Ä¢ –ë–∞ —Å–∞–±–∫–∏ —à–∞—Ö—Å–∏–∏ —Ö—É–¥ –º—É–≤–æ—Ñ–∏“õ–∞—Ç –∫—É–Ω–µ–¥\n‚Ä¢ –ë–∞ –º–∞—Ä“≥–∏–ª–∞–∏ –±–æ–∑–æ—Ä –º—É–≤–æ—Ñ–∏“õ–∞—Ç –∫—É–Ω–µ–¥ (—Ç—Ä–µ–Ω–¥–∏ —ë –¥–∏–∞–ø–∞–∑–æ–Ω)\n‚Ä¢ –ë–∞ –≤–∞“õ—Ç–µ, –∫–∏ —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥ “∑—É–¥–æ –∫—É–Ω–µ–¥, –º—É–≤–æ—Ñ–∏“õ –±–æ—à–µ–¥\n‚Ä¢ –ë–∞ “≥–∞“∑–º–∏ —Å–∞—Ä–º–æ—è–∏ —à—É–º–æ –º—É–≤–æ—Ñ–∏“õ –±–æ—à–∞–¥",
                    "*–¢–∞–∫–º–∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:*\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è—Ä–æ –¥–∞—Ä “≥–∏—Å–æ–±–∏ –¥–µ–º–æ —Å–∞–Ω“∑–µ–¥\n‚Ä¢ –Ø–∫—á–∞–Ω–¥ –º—É–æ–º–∏–ª–∞—Ä–æ –±–∞—Ä–æ–∏ —Å–∞–Ω“∑–∏—à –≥—É–∑–∞—Ä–æ–Ω–µ–¥\n‚Ä¢ –ë–∞ —Ç–∞—ä—Ä–∏—Ö–∏ “õ–∞–±–ª”£ –±–æ—Ä–∏ –¥–∏–≥–∞—Ä —Å–∞–Ω“∑–µ–¥ (–±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥)\n‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ—Ä–æ –±–æ —à–∞—Ä–æ–∏—Ç–∏ “∑–æ—Ä–∏–∏ –±–æ–∑–æ—Ä –º—É—Ç–æ–±–∏“õ –∫—É–Ω–µ–¥"
                ]
            },
            '7': {
                'title': "üë®‚Äçüíª –ê–º–∞–ª–∏—è–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥",
                'content': [
                    "*“≤–∏—Å–æ–±–∏ –¥–µ–º–æ:*\n‚Ä¢ –ë–∞—Ä–æ–∏ –æ–º”Ø–∑–∏—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ—Ä–æ –±–∏–¥—É–Ω–∏ —Ö–∞–≤—Ñ–∏ –≤–æ“õ–µ”£ —Å–∞–Ω“∑–µ–¥\n‚Ä¢ –ú–∞–ª–∞–∫–∞“≥–æ–∏ –º—É–¥–∏—Ä–∏—è—Ç–∏ —Ö–∞–≤—Ñ—Ä–æ —Ç–∞–∫–º–∏–ª –¥–∏“≥–µ–¥\n‚Ä¢ –ë–∞ “≥–∏—Å—Å–∏—ë—Ç —Ö—É–¥—Ä–æ –æ–¥–∞—Ç –∫—É–Ω–æ–Ω–µ–¥",
                    "*–û“ì–æ–∑–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ –≤–æ“õ–µ”£:*\n‚Ä¢ –ë–æ –º–∞–±–ª–∞“ì–∏ —Ö—É—Ä–¥ –æ“ì–æ–∑ –∫—É–Ω–µ–¥\n‚Ä¢ –ê–Ω–¥–æ–∑–∞–∏ –º–∞–≤“õ–µ—ä—Ä–æ –º–∞“≥–¥—É–¥ –∫—É–Ω–µ–¥\n‚Ä¢ –¢–∞–Ω“≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Å–∞–Ω“∑–∏–¥–∞—à—É–¥–∞—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥\n‚Ä¢ –ñ—É—Ä–Ω–∞–ª–∏ –º—É—Ñ–∞—Å—Å–∞–ª–∏ –º—É–æ–º–∏–ª–∞“≥–æ—Ä–æ –ø–µ—à –±–∞—Ä–µ–¥",
                    "*–ñ—É—Ä–Ω–∞–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥:*\n‚Ä¢ –°–∞–±–∞–±–∏ –≤—É—Ä—É–¥ –±–∞ –º—É–æ–º–∏–ª–∞\n‚Ä¢ –°–∞—Ç“≥“≥–æ–∏ Stop Loss –≤–∞ Take Profit\n‚Ä¢ “≤–∞“∑–º–∏ –º–∞–≤“õ–µ—ä\n‚Ä¢ –ù–∞—Ç–∏“∑–∞–∏ –º—É–æ–º–∏–ª–∞ –≤–∞ —Ç–∞“≥–ª–∏–ª–∏ –æ–Ω",
                    "*–¢–∞–∫–º–∏–ª–∏ –º–∞–ª–∞–∫–∞“≥–æ:*\n‚Ä¢ –ú—É–æ–º–∏–ª–∞“≥–æ–∏ –≥—É–∑–∞—à—Ç–∞—Ä–æ —Ç–∞“≥–ª–∏–ª –∫—É–Ω–µ–¥\n‚Ä¢ –•–∞—Ç–æ“≥–æ–∏ —Ç–∞–∫—Ä–æ—Ä–∏—Ä–æ –º—É–∞–π—è–Ω –∫—É–Ω–µ–¥\n‚Ä¢ –û–º–∏–ª“≥–æ–∏ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç—Ä–æ –¥–∞—Ä–∫ –∫—É–Ω–µ–¥\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è—Ä–æ –º—É–≤–æ—Ñ–∏“õ–∏ –Ω–∞—Ç–∏“∑–∞“≥–æ —Ç–∞–∫–º–∏–ª –¥–∏“≥–µ–¥"
                ]
            },
            '8': {
                'title': "üìö –¢–∞–∫–º–∏–ª–∏ –º–∞–ª–∞–∫–∞",
                'content': [
                    "*–°–∞—Ä—á–∞—à–º–∞“≥–æ–∏ –æ–º”Ø–∑–∏—à:*\n‚Ä¢ –ö–∏—Ç–æ–±“≥–æ –æ–∏–¥ –±–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∞ —Ç–∞“≥–ª–∏–ª–∏ –±–æ–∑–æ—Ä\n‚Ä¢ –í–µ–±–∏–Ω–∞—Ä“≥–æ –≤–∞ —Å–µ–º–∏–Ω–∞—Ä“≥–æ–∏ –æ–Ω–ª–∞–π–Ω\n‚Ä¢ “∂–æ–º–µ–∞“≥–æ–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–Ω\n‚Ä¢ –®–∞—Ä“≥–∏ –±–æ–∑–æ—Ä“≥–æ –∞–∑ –∫–æ—Ä—à–∏–Ω–æ—Å–æ–Ω",
                    "*–¢–∞–≤—Å–∏—è“≥–æ–∏ –∫–∏—Ç–æ–±“≥–æ:*\n‚Ä¢ \"–¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£\" - “∂–æ–Ω –ú–µ—Ä—Ñ–∏\n‚Ä¢ \"–°–∞–≤–¥–æ–≥–∞—Ä–∏ –∏–Ω—Ç–∏–∑–æ–º–Ω–æ–∫\" - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å\n‚Ä¢ \"–•–æ—Ç–∏—Ä–∞“≥–æ–∏ —Å–∞–≤–¥–æ–≥–∞—Ä–∏ —Å–∞“≥–º–∏—è\" - –≠–¥–≤–∏–Ω –õ–µ—Ñ–µ–≤—Ä\n‚Ä¢ \"–†–∞–≤–æ–Ω—à–∏–Ω–æ—Å–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥\" - –ë—Ä–µ—Ç—Ç –°—Ç–∏–Ω–±–∞—Ä–≥–µ—Ä",
                    "*“∂–∞–Ω–±–∞“≥–æ–∏ –æ–º”Ø–∑–∏—à:*\n‚Ä¢ –¢–∞“≥–ª–∏–ª–∏ —á–∞—Ä—Ç“≥–æ –≤–∞ –Ω–∞“õ—à“≥–æ\n‚Ä¢ –¢–∞–∫–º–∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ\n‚Ä¢ –ú—É–¥–∏—Ä–∏—è—Ç–∏ —Ö–∞–≤—Ñ\n‚Ä¢ –ù–∞–∑–æ—Ä–∞—Ç–∏ “≥–∏—Å—Å–∏—ë—Ç\n‚Ä¢ –ë–∞“≥–æ–¥–∏“≥–∏–∏ –∏“õ—Ç–∏—Å–æ–¥”£",
                    "*–ù—É–∫—Ç–∞“≥–æ–∏ –º—É“≥–∏–º:*\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥–∏ –º—É–≤–∞—Ñ—Ñ–∞“õ —Ä–∞–≤–∞–Ω–¥–∏ –¥–æ–∏–º–∏–∏ –æ–º”Ø–∑–∏—à –≤–∞ —Ç–∞–∫–º–∏–ª –∞—Å—Ç\n‚Ä¢ –ë–∞ –Ω–∞—Ç–∏“∑–∞“≥–æ–∏ –∫”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç —Ç–∞–≤–∞“∑“∑—É“≥ –Ω–∞–∫—É–Ω–µ–¥\n‚Ä¢ –ù–∏—à–æ–Ω–¥–∏“≥–∞–Ω–¥–∞–∏ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ñ–æ–∏–¥–∞–∏ —É—Å—Ç—É–≤–æ—Ä –∞—Å—Ç\n‚Ä¢ –ë–∞ –Ω–∞—Ç–∏“∑–∞“≥–æ–∏ —Ö—É–¥ –º—É–Ω—Ç–∞–∑–∞–º –Ω–∞–∑–∞—Ä –∫—É–Ω–µ–¥ –≤–∞ —Ç–∞“≥–ª–∏–ª –Ω–∞–º–æ–µ–¥"
                ]
            }
        },
        'ru': {
            '1': {
                'title': "üî∞ –û—Å–Ω–æ–≤—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
                'content': [
                    "*–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä–µ–π–¥–∏–Ω–≥?*\n–¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (–≤–∞–ª—é—Ç—ã, –∞–∫—Ü–∏–∏, —Ç–æ–≤–∞—Ä—ã) —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.",
                    "*–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è:*\n‚Ä¢ –°–ø—Ä–µ–¥ ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏\n‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞\n‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ‚Äî –ª–µ–≥–∫–æ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –≤ –¥–µ–Ω—å–≥–∏\n‚Ä¢ Take Profit/Stop Loss ‚Äî –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–æ–≤",
                    "*–¢–∏–ø—ã —Ä—ã–Ω–∫–æ–≤:*\n‚Ä¢ Forex ‚Äî –≤–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫\n‚Ä¢ –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ ‚Äî –ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–π\n‚Ä¢ –§—å—é—á–µ—Ä—Å–Ω—ã–π —Ä—ã–Ω–æ–∫ ‚Äî –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –∞–∫—Ç–∏–≤–∞ –≤ –±—É–¥—É—â–µ–º\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ä—ã–Ω–æ–∫ ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏",
                    "*–°—Ç–∏–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞:*\n‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥ ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –º–∞–ª–æ–π –ø—Ä–∏–±—ã–ª—å—é\n‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —Å–¥–µ–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n‚Ä¢ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —Å–¥–µ–ª–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –¥–æ –Ω–µ–¥–µ–ª—å\n‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Å—è—Ü–∞–º–∏/–≥–æ–¥–∞–º–∏"
                ]
            },
            '2': {
                'title': "üñ•Ô∏è –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                'content': [
                    "*–¢–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º:*\n‚Ä¢ –ë—Ä–æ–∫–µ—Ä—ã ‚Äî –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞–º –¥–æ—Å—Ç—É–ø –∫ —Ä—ã–Ω–∫–∞–º\n‚Ä¢ –ë–∏—Ä–∂–∏ ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é",
                    "*–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞:*\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å ‚Äî —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã\n‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –ø–æ—Ä–æ–≥ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –£—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ‚Äî —Å–ø—Ä–µ–¥—ã, –∫–æ–º–∏—Å—Å–∏–∏, –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–≤—ã–≤–æ–¥–∞\n‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –º–æ–±–∏–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                    "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n‚Ä¢ MetaTrader 4/5 ‚Äî –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Forex –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏\n‚Ä¢ TradingView ‚Äî –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏\n‚Ä¢ Think or Swim ‚Äî –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏\n‚Ä¢ Binance ‚Äî –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏",
                    "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ —Å–µ–±—è\n‚Ä¢ –ò–∑—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏\n‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—á–µ—Ç–∞ (–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å)"
                ]
            },
            '3': {
                'title': "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
                'content': [
                    "*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (MA, MACD, RSI)\n‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n‚Ä¢ –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                    "*–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:*\n‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π (–¥–ª—è –∞–∫—Ü–∏–π)",
                    "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*\n‚Ä¢ Moving Average (MA) ‚Äî —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è\n‚Ä¢ Relative Strength Index (RSI) ‚Äî –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã\n‚Ä¢ Moving Average Convergence Divergence (MACD) ‚Äî —Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö\n‚Ä¢ Bollinger Bands ‚Äî –ª–∏–Ω–∏–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—ã",
                    "*–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤\n‚Ä¢ –û—Ç—á–µ—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π"
                ]
            },
            '4': {
                'title': "‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏",
                'content': [
                    "*–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:*\n‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É\n‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ —á–µ–º 1-2% –æ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞\n‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n‚Ä¢ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Stop Loss",
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:*\n‚Ä¢ Stop Loss ‚Äî –æ—Ä–¥–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–∞\n‚Ä¢ Take Profit ‚Äî –æ—Ä–¥–µ—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏\n‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∏ –ø—Ä–∏–±—ã–ª–∏ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:2 –∏–ª–∏ –±–æ–ª—å—à–µ\n‚Ä¢ Money Management ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞",
                    "*–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:*\n‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π\n‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ—Ç–∏–≤ —Ç—Ä–µ–Ω–¥–∞\n‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                    "*–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:*\n‚Ä¢ –¢–æ—Ä–≥—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å\n‚Ä¢ –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª\n‚Ä¢ –ù–µ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é —Å—É–º–º—É\n‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è"
                ]
            },
            '5': {
                'title': "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
                'content': [
                    "*–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:*\n‚Ä¢ –ñ–∞–¥–Ω–æ—Å—Ç—å ‚Äî –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å —á—Ä–µ–∑–º–µ—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å\n‚Ä¢ –°—Ç—Ä–∞—Ö ‚Äî –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º\n‚Ä¢ –ù–∞–¥–µ–∂–¥–∞ ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ —É–±—ã—Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–¥–µ–∂–¥–µ –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç\n‚Ä¢ –°–æ–∂–∞–ª–µ–Ω–∏–µ ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ —É–±—ã—Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –Ω–µ–ø—Ä–∏–∑–Ω–∞–Ω–∏—è —É–±—ã—Ç–∫–∞",
                    "*–¢–æ—Ä–≥–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:*\n‚Ä¢ –°—Ç—Ä–æ–≥–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–º—É –ø–ª–∞–Ω—É\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏—è–º–∏\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–π–¥–∏–Ω–≥—É\n‚Ä¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ —É–±—ã—Ç–∫–∞—Ö",
                    "*–ü–ª–∞–Ω —Å–¥–µ–ª–∫–∏:*\n‚Ä¢ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞\n‚Ä¢ –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏\n‚Ä¢ –£—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∞",
                    "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n‚Ä¢ –í–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–ø—ã—Ç\n‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ\n‚Ä¢ –û—Ç–¥—ã—Ö–∞–π—Ç–µ, –µ—Å–ª–∏ –≤—ã –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –ø–æ–¥—Ä—è–¥"
                ]
            },
            '6': {
                'title': "üìà –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                'content': [
                    "*–¢–∏–ø—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:*\n‚Ä¢ –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –¥–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è —Ä—ã–Ω–∫–æ–≤\n‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É—é—â–∏—Ö—Å—è —Ä—ã–Ω–∫–æ–≤\n‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ª–æ–π –ø—Ä–∏–±—ã–ª–∏\n‚Ä¢ –°–≤–∏–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                    "*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n‚Ä¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è MA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞\n‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç –æ—Ç—Å–∫–æ–∫–∞ ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç —É—Ä–æ–≤–Ω–µ–π\n‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø—Ä–æ–±–æ–µ —É—Ä–æ–≤–Ω—è ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ä—ã–≤–∞ –≤–∞–∂–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π\n‚Ä¢ RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö RSI",
                    "*–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–º—É –ª–∏—á–Ω–æ–º—É —Å—Ç–∏–ª—é\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–∑–µ —Ä—ã–Ω–∫–∞ (—Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–π)\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥—É\n‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä—É –≤–∞—à–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
                    "*–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ\n‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥)\n‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ —Ç–µ–∫—É—â–∏–º —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º"
                ]
            },
            '7': {
                'title': "üë®‚Äçüíª –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞",
                'content': [
                    "*–î–µ–º–æ-—Å—á–µ—Ç:*\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞\n‚Ä¢ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ –Ω–∞–≤—ã–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏\n‚Ä¢ –ü—Ä–∏–≤—ã–∫–∞–π—Ç–µ –∫ —ç–º–æ—Ü–∏—è–º",
                    "*–ù–∞—á–∞–ª–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:*\n‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º—ã\n‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n‚Ä¢ –í–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫",
                    "*–¢–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª:*\n‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É\n‚Ä¢ –£—Ä–æ–≤–Ω–∏ Stop Loss –∏ Take Profit\n‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ –∏ –µ–≥–æ –∞–Ω–∞–ª–∏–∑",
                    "*–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤:*\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—à–ª—ã–µ —Å–¥–µ–ª–∫–∏\n‚Ä¢ –í—ã—è–≤–ª—è–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏\n‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞\n‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
                ]
            },
            '8': {
                'title': "üìö –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                'content': [
                    "*–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è:*\n‚Ä¢ –ö–Ω–∏–≥–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –∏ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞\n‚Ä¢ –í–µ–±–∏–Ω–∞—Ä—ã –∏ –æ–Ω–ª–∞–π–Ω-—Å–µ–º–∏–Ω–∞—Ä—ã\n‚Ä¢ –°–æ–æ–±—â–µ—Å—Ç–≤–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n‚Ä¢ –û–±–∑–æ—Ä—ã —Ä—ã–Ω–∫–æ–≤ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
                    "*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–Ω–∏–≥–∏:*\n‚Ä¢ \"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\" - –î–∂–æ–Ω –ú—ç—Ä—Ñ–∏\n‚Ä¢ \"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä\" - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å\n‚Ä¢ \"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å–ø–µ–∫—É–ª—è–Ω—Ç–∞\" - –≠–¥–≤–∏–Ω –õ–µ—Ñ–µ–≤—Ä\n‚Ä¢ \"–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞\" - –ë—Ä–µ—Ç—Ç –°—Ç–∏–Ω–±–∞—Ä–≥–µ—Ä",
                    "*–ê—Å–ø–µ–∫—Ç—ã –æ–±—É—á–µ–Ω–∏—è:*\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n‚Ä¢ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —ç–º–æ—Ü–∏–π\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞",
                    "*–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:*\n‚Ä¢ –£—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ù–µ —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—Ö–∞ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å\n‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                ]
            }
        },
        'uz': {
            '1': {
                'title': "üî∞ Treyding asoslari",
                'content': [
                    "*Treyding nima?*\nTreyding - foyda olish maqsadida moliyaviy aktivlarni (valyuta, aksiyalar, tovarlar) sotib olish va sotish faoliyatidir.",
                    "*Asosiy terminologiya:*\n‚Ä¢ Spred - sotib olish va sotish narxlari o'rtasidagi farq\n‚Ä¢ Volatillik - aktiv narxining o'zgaruvchanligi\n‚Ä¢ Likvidlik - aktivni pulga aylantirish qulayligi\n‚Ä¢ Take Profit/Stop Loss - xavflarni nazorat qilish uchun buyurtmalar",
                    "*Bozor turlari:*\n‚Ä¢ Forex - valyuta bozori\n‚Ä¢ Fond bozori - kompaniya aksiyalarini sotib olish va sotish\n‚Ä¢ Fyuchers bozori - kelajakda aktivni sotib olish/sotish shartnomasi\n‚Ä¢ Kriptovalyuta bozori - raqamli valyutalar savdosi",
                    "*Treyding uslublari:*\n‚Ä¢ Skalping - kam foyda bilan qisqa muddatli bitimlar\n‚Ä¢ Kunlik treyding - kun davomida bitimlar\n‚Ä¢ Sving treyding - bir necha kundan bir necha haftagacha bo'lgan bitimlar\n‚Ä¢ Uzoq muddatli investitsiyalar - pozitsiyani oylar/yillar davomida ushlab turish"
                ]
            },
            '2': {
                'title': "üñ•Ô∏è Platforma tanlash",
                'content': [
                    "*Platforma turlari:*\n‚Ä¢ Brokerlar - treyderlarga bozorlarga kirish imkonini beruvchi kompaniyalar\n‚Ä¢ Birjalar - to'g'ridan-to'g'ri savdo qilish imkonini beruvchi platformalar",
                    "*Tanlash mezonlari:*\n‚Ä¢ Ishonchlilik - kompaniyaning tartibga solinishi, faoliyat tarixi\n‚Ä¢ Kirish bo'sag'asi - investitsiyalash uchun minimal summa\n‚Ä¢ Savdo shartlari - spredlar, komissiyalar, kredit yelkasi\n‚Ä¢ Mablag'lar mavjudligi - to'ldirish/chiqarish usullari\n‚Ä¢ Funktsionalligi - grafiklar, indikatorlar, mobil platforma",
                    "*Mashhur platformalar:*\n‚Ä¢ MetaTrader 4/5 - Forex va fyuchers savdosi uchun\n‚Ä¢ TradingView - tahlil va savdo uchun\n‚Ä¢ Think or Swim - aksiyalar va opsionlar savdosi uchun\n‚Ä¢ Binance - kriptovalyutalar savdosi uchun",
                    "*Tavsiyalar:*\n‚Ä¢ Avval demo hisobda ishlang\n‚Ä¢ Interfeysni o'zingizga moslashtirib oling\n‚Ä¢ Tahlil va hisobot imkoniyatlarini o'rganing\n‚Ä¢ Hisob xavfsizligini ta'minlang (ikki faktorli autentifikatsiya, murakkab parol)"
                ]
            },
            '3': {
                'title': "üìä Bozor tahlili",
                'content': [
                    "*Texnik tahlil:*\n‚Ä¢ Grafiklar va patternlarni o'rganish\n‚Ä¢ Indikatorlardan foydalanish (MA, MACD, RSI)\n‚Ä¢ Narx patternlarini aniqlash\n‚Ä¢ Qo'llab-quvvatlash va qarshilik darajalarini topish",
                    "*Fundamental tahlil:*\n‚Ä¢ Umumiy iqtisodiy vaziyatni o'rganish\n‚Ä¢ Iqtisodiy ko'rsatkichlarni tahlil qilish\n‚Ä¢ Markaziy banklarning pul siyosatini baholash\n‚Ä¢ Kompaniyalarni baholash (aksiyalar uchun)",
                    "*Mashhur indikatorlar:*\n‚Ä¢ Moving Average (MA) - harakatlanuvchi o'rtacha\n‚Ä¢ Relative Strength Index (RSI) - nisbiy kuch indeksi\n‚Ä¢ Moving Average Convergence Divergence (MACD) - harakatlanuvchi o'rtachalarning konvergensiyasi va divergensiyasi\n‚Ä¢ Bollinger Bands - narx atrofidagi volatillik chiziqlari",
                    "*Ma'lumot manbalari:*\n‚Ä¢ Iqtisodiy kalendar\n‚Ä¢ Moliyaviy yangiliklar\n‚Ä¢ Markaziy banklarning nashriyotlari\n‚Ä¢ Kompaniyalar hisobotlari"
                ]
            },
            '4': {
                'title': "‚ö†Ô∏è Xavflarni boshqarish",
                'content': [
                    "*Asosiy tamoyillar:*\n‚Ä¢ Bitta bitim uchun maksimal xavfni aniqlash\n‚Ä¢ Hech qachon umumiy kapitalning 1-2% dan ko'p qismini riskka qo'ymang\n‚Ä¢ Investitsiyalarni diversifikatsiya qilish\n‚Ä¢ Doimo Stop Loss dan foydalaning",
                    "*Xavflarni boshqarish strategiyalari:*\n‚Ä¢ Stop Loss - zararni cheklash uchun buyurtma\n‚Ä¢ Take Profit - foydani qadlash uchun buyurtma\n‚Ä¢ Risk va foyda nisbati - 1:2 yoki undan ko'proq tavsiya qilinadi\n‚Ä¢ Money Management - kapitalni to'g'ri taqsimlash",
                    "*Umumiy xatolar:*\n‚Ä¢ Bitta bitimga juda katta mablag' qo'yish\n‚Ä¢ Harakatlar rejasining yo'qligi\n‚Ä¢ Trendga qarshi savdo\n‚Ä¢ Emotsional bitimlar\n‚Ä¢ Strategiyani doimiy o'zgartirish",
                    "*Muhim qoidalar:*\n‚Ä¢ Faqat yo'qotishni rozi bo'lgan pullar bilan savdo qiling\n‚Ä¢ Savdo jurnaliga ega bo'ling\n‚Ä¢ Yo'qotilgan summani tezda qaytarib olishga urinmang\n‚Ä¢ Bilimingizni doimiy ravishda takomillashtiring"
                ]
            },
            '5': {
                'title': "üß† Treyding psixologiyasi",
                'content': [
                    "*Emotsional holatlar:*\n‚Ä¢ Ochko'zlik - o'ta ko'p foyda olish istagi\n‚Ä¢ Qo'rquv - noto'g'ri qarorlarga olib kelishi mumkin\n‚Ä¢ Umid - burilish umidida zararli pozitsiyani ushlab turish\n‚Ä¢ Afsus - zararni tan olmaslik uchun zararli pozitsiyani ushlab turish",
                    "*Savdo intizomi:*\n‚Ä¢ O'z rejangizga qat'iy rioya qilish\n‚Ä¢ Emotsiyalarni boshqarish\n‚Ä¢ Treydingga tizimli yondashish\n‚Ä¢ Zararlar paytida to'xtay olish qobiliyati",
                    "*Bitim rejasi:*\n‚Ä¢ Kirish va chiqish nuqtalari\n‚Ä¢ Bitim hajmi\n‚Ä¢ Xavflarni boshqarish\n‚Ä¢ Rejani bekor qilish shartlari",
                    "*Tavsiyalar:*\n‚Ä¢ Savdo jurnaliga ega bo'ling va natijalarni tahlil qiling\n‚Ä¢ Tajriba orttirish uchun kam summalar bilan boshlang\n‚Ä¢ Tajribangizni demo hisobda sinab ko'ring\n‚Ä¢ Holingiz yomon bo'lsa, dam oling\n‚Ä¢ Ketma-ket bir nechta zararly bitimlar bo'lganida tanaffus qiling"
                ]
            },
            '6': {
                'title': "üìà Savdo strategiyalari",
                'content': [
                    "*Strategiya turlari:*\n‚Ä¢ Trend strategiyalari - harakatlanayotgan bozorlar uchun\n‚Ä¢ Diapazon strategiyalari - konsolidatsiyalanayotgan bozorlar uchun\n‚Ä¢ Skalping strategiyalari - tez kichik foyda olish uchun\n‚Ä¢ Sving strategiyalari - o'rta muddatli o'zgarishlardan foyda olish uchun",
                    "*Mashhur strategiyalar:*\n‚Ä¢ Harakatlanuvchi o'rtacha kesishish - trendni aniqlash uchun MA kesishishidan foydalanish\n‚Ä¢ Sakrashdan savdo - darajalardan narx tiklanishini kutish\n‚Ä¢ Darajani buzishdan savdo - muhim darajalarni yorib o'tishini kutish\n‚Ä¢ RSI o'ta sotilgan/o'ta sotib olingan - RSI ekstremal qiymatlarida sotib olish/sotish",
                    "*Strategiya tanlash:*\n‚Ä¢ Shaxsiy uslubingizga mos kelishi\n‚Ä¢ Bozor fazasiga mos kelishi (trend yoki diapazon)\n‚Ä¢ Treydingga ajratadigan vaqtingizga mos kelishi\n‚Ä¢ Kapitalingiz hajmiga mos kelishi",
                    "*Strategiyani takomillashtirish:*\n‚Ä¢ Strategiyani demo hisobda sinab ko'ring\n‚Ä¢ Sinov uchun bir nechta bitimlarni amalga oshiring\n‚Ä¢ Tarixiy ma'lumotlarda tekshiring (bektesting)\n‚Ä¢ Indikatorlarni joriy bozor sharoitlariga moslashtirib oling"
                ]
            },
            '7': {
                'title': "üë®‚Äçüíª Treyding amaliyoti",
                'content': [
                    "*Demo hisob:*\n‚Ä¢ Platformani o'rganish uchun foydalaning\n‚Ä¢ Haqiqiy xavf bo'lmagan holda strategiyalarni sinab ko'ring\n‚Ä¢ Xavflarni boshqarish ko'nikmalarini takomillashtiring\n‚Ä¢ Emotsiyalarga ko'nikib boring",
                    "*Haqiqiy savdoni boshlash:*\n‚Ä¢ Kichik summadan boshlang\n‚Ä¢ Pozitsiya hajmini cheklang\n‚Ä¢ Faqat tekshirilgan strategiyadan foydalaning\n‚Ä¢ Batafsil bitimlar jurnalini yuritib boring",
                    "*Savdo jurnali:*\n‚Ä¢ Bitimga kirish sababi\n‚Ä¢ Stop Loss va Take Profit darajalari\n‚Ä¢ Pozitsiya hajmi\n‚Ä¢ Bitim natijasi va uning tahlili",
                    "*Ko'nikmalarni takomillashtirish:*\n‚Ä¢ O'tgan bitimlarni tahlil qiling\n‚Ä¢ Takrorlanuvchi xatolarni aniqlang\n‚Ä¢ Muvaffaqiyat omillarini aniqlang\n‚Ä¢ Natijalarga ko'ra strategiyani o'zgartiring"
                ]
            },
            '8': {
                'title': "üìö Malakani oshirish",
                'content': [
                    "*O'rganish manbalari:*\n‚Ä¢ Treyding va bozor tahlili bo'yicha kitoblar\n‚Ä¢ Vebinarlar va onlayn seminarlar\n‚Ä¢ Treyderlar hamjamiyati\n‚Ä¢ Ekspertlardan bozor sharhlari",
                    "*Tavsiya etilgan kitoblar:*\n‚Ä¢ \"Texnik tahlil\" - Jon Merfi\n‚Ä¢ \"Intizomli treyding\" - Mark Duglas\n‚Ä¢ \"Birja spekulyantining xotiralari\" - Edvin Lefevr\n‚Ä¢ \"Treyding psixologiyasi\" - Brett Stinbarger",
                    "*O'rganish jihatlari:*\n‚Ä¢ Grafiklar va patternlarni tahlil qilish\n‚Ä¢ Strategiyalarni takomillashtirish\n‚Ä¢ Xavflarni boshqarish\n‚Ä¢ Emotsiyalarni nazorat qilish\n‚Ä¢ Iqtisodiy baholash",
                    "*Muhim nuqtalar:*\n‚Ä¢ Muvaffaqiyatli treyding - o'rganish va takomillashtirishning doimiy jarayonidir\n‚Ä¢ Qisqa muddatli natijalarga diqqatingizni qaratmang\n‚Ä¢ Muvaffaqiyat ko'rsatkichi - barqaror foyda\n‚Ä¢ Natijalaringizni muntazam ko'rib chiqing va tahlil qiling"
                ]
            }
        },
        'kk': {
            '1': {
                'title': "üî∞ –¢—Ä–µ–π–¥–∏–Ω–≥ –Ω–µ–≥—ñ–∑–¥–µ—Ä—ñ",
                'content': [
                    "*–¢—Ä–µ–π–¥–∏–Ω–≥ –¥–µ–≥–µ–Ω—ñ–º—ñ–∑ –Ω–µ?*\n–¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –±“±–ª –ø–∞–π–¥–∞ —Ç–∞–±—É –º–∞“õ—Å–∞—Ç—ã–Ω–¥–∞ “õ–∞—Ä–∂—ã –∞–∫—Ç–∏–≤—Ç–µ—Ä—ñ–Ω (–≤–∞–ª—é—Ç–∞, –∞–∫—Ü–∏—è–ª–∞—Ä, —Ç–∞—É–∞—Ä–ª–∞—Ä) —Å–∞—Ç—ã–ø –∞–ª—É –∂”ô–Ω–µ —Å–∞—Ç—É –±–æ–π—ã–Ω—à–∞ “õ—ã–∑–º–µ—Ç.",
                    "*–ù–µ–≥—ñ–∑–≥—ñ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è:*\n‚Ä¢ –°–ø—Ä–µ–¥ ‚Äî —Å–∞—Ç—ã–ø –∞–ª—É –∂”ô–Ω–µ —Å–∞—Ç—É –±–∞“ì–∞—Å—ã –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –∞–π—ã—Ä–º–∞—à—ã–ª—ã“õ\n‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–¥—ñ–ª—ñ–∫ ‚Äî –∞–∫—Ç–∏–≤ –±–∞“ì–∞—Å—ã–Ω—ã“£ ”©–∑–≥–µ—Ä–≥—ñ—à—Ç—ñ–≥—ñ\n‚Ä¢ ”®—Ç—ñ–º–¥—ñ–ª—ñ–∫ ‚Äî –∞–∫—Ç–∏–≤—Ç—ñ –∞“õ—à–∞“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É –∂–µ“£—ñ–ª–¥—ñ–≥—ñ\n‚Ä¢ Take Profit/Stop Loss ‚Äî —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞“õ—ã–ª–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞—Ä",
                    "*–ù–∞—Ä—ã“õ —Ç“Ø—Ä–ª–µ—Ä—ñ:*\n‚Ä¢ Forex ‚Äî –≤–∞–ª—é—Ç–∞ –Ω–∞—Ä—ã“ì—ã\n‚Ä¢ “ö–æ—Ä –Ω–∞—Ä—ã“ì—ã ‚Äî –∫–æ–º–ø–∞–Ω–∏—è –∞–∫—Ü–∏—è–ª–∞—Ä—ã–Ω —Å–∞—Ç—É –∂”ô–Ω–µ —Å–∞—Ç—ã–ø –∞–ª—É\n‚Ä¢ –§—å—é—á–µ—Ä—Å –Ω–∞—Ä—ã“ì—ã ‚Äî –±–æ–ª–∞—à–∞“õ—Ç–∞ –∞–∫—Ç–∏–≤—Ç—ñ —Å–∞—Ç—ã–ø –∞–ª—É/—Å–∞—Ç—É –∫–µ–ª—ñ—Å—ñ–º—à–∞—Ä—Ç—Ç–∞—Ä—ã\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–∞—Ä—ã“ì—ã ‚Äî —Ü–∏—Ñ—Ä–ª—ã“õ –≤–∞–ª—é—Ç–∞–ª–∞—Ä–º–µ–Ω —Å–∞—É–¥–∞",
                    "*–¢—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç–∏–ª—å–¥–µ—Ä—ñ:*\n‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥ ‚Äî –∞–∑ –ø–∞–π–¥–∞–º–µ–Ω “õ—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥—ñ –º”ô–º—ñ–ª–µ–ª–µ—Ä\n‚Ä¢ –ö“Ø–Ω–¥—ñ–∑–≥—ñ —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –∫“Ø–Ω —ñ—à—ñ–Ω–¥–µ–≥—ñ –º”ô–º—ñ–ª–µ–ª–µ—Ä\n‚Ä¢ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –±—ñ—Ä–Ω–µ—à–µ –∫“Ø–Ω–Ω–µ–Ω –±—ñ—Ä–Ω–µ—à–µ –∞–ø—Ç–∞“ì–∞ –¥–µ–π—ñ–Ω —Å–æ–∑—ã–ª–∞—Ç—ã–Ω –º”ô–º—ñ–ª–µ–ª–µ—Ä\n‚Ä¢ “∞–∑–∞“õ –º–µ—Ä–∑—ñ–º–¥—ñ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–ª–∞—Ä ‚Äî –ø–æ–∑–∏—Ü–∏—è–Ω—ã –∞–π–ª–∞—Ä/–∂—ã–ª–¥–∞—Ä –±–æ–π—ã “±—Å—Ç–∞—É"
                ]
            },
            '2': {
                'title': "üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–Ω—ã —Ç–∞“£–¥–∞—É",
                'content': [
                    "*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç“Ø—Ä–ª–µ—Ä—ñ:*\n‚Ä¢ –ë—Ä–æ–∫–µ—Ä–ª–µ—Ä ‚Äî —Ç—Ä–µ–π–¥–µ—Ä–ª–µ—Ä–≥–µ –Ω–∞—Ä—ã“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä–µ—Ç—ñ–Ω –∫–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä\n‚Ä¢ –ë–∏—Ä–∂–∞–ª–∞—Ä ‚Äî —Ç—ñ–∫–µ–ª–µ–π —Å–∞—É–¥–∞ –∂–∞—Å–∞—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ—Ç—ñ–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä",
                    "*–¢–∞“£–¥–∞—É –∫—Ä–∏—Ç–µ—Ä–∏–π–ª–µ—Ä—ñ:*\n‚Ä¢ –°–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫ ‚Äî –∫–æ–º–ø–∞–Ω–∏—è–Ω—ã“£ —Ä–µ—Ç—Ç–µ–ª—É—ñ, –∂“±–º—ã—Å —Ç–∞—Ä–∏—Ö—ã\n‚Ä¢ –ö—ñ—Ä—É —à–µ–≥—ñ ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–∞–ª—É“ì–∞ –º–∏–Ω–∏–º–∞–ª–¥—ã —Å–æ–º–∞\n‚Ä¢ –°–∞—É–¥–∞ —à–∞—Ä—Ç—Ç–∞—Ä—ã ‚Äî —Å–ø—Ä–µ–¥—Ç–µ—Ä, –∫–æ–º–∏—Å—Å–∏—è–ª–∞—Ä, –∫—Ä–µ–¥–∏—Ç –∏—ã“ì—ã\n‚Ä¢ “ö–∞—Ä–∞–∂–∞—Ç “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ–ª—ñ–≥—ñ ‚Äî —Ç–æ–ª—Ç—ã—Ä—É/—à—ã“ì–∞—Ä—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ\n‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚Äî –≥—Ä–∞—Ñ–∏–∫—Ç–µ—Ä, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä, –º–æ–±–∏–ª—å–¥—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                    "*–¢–∞–Ω—ã–º–∞–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä:*\n‚Ä¢ MetaTrader 4/5 ‚Äî Forex –∂”ô–Ω–µ —Ñ—å—é—á–µ—Ä—Å—Ç–µ—Ä–º–µ–Ω —Å–∞—É–¥–∞ –∂–∞—Å–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω\n‚Ä¢ TradingView ‚Äî —Ç–∞–ª–¥–∞—É –∂”ô–Ω–µ —Å–∞—É–¥–∞ –∂–∞—Å–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω\n‚Ä¢ Think or Swim ‚Äî –∞–∫—Ü–∏—è–ª–∞—Ä –º–µ–Ω –æ–ø—Ü–∏–æ–Ω–¥–∞—Ä–º–µ–Ω —Å–∞—É–¥–∞ –∂–∞—Å–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω\n‚Ä¢ Binance ‚Äî –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–ª–∞—Ä–º–µ–Ω —Å–∞—É–¥–∞ –∂–∞—Å–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω",
                    "*“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä:*\n‚Ä¢ –ê–ª–¥—ã–º–µ–Ω –¥–µ–º–æ-—à–æ—Ç—Ç–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ“£—ñ–∑\n‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç—ñ ”©–∑—ñ“£—ñ–∑–≥–µ –±–µ–π—ñ–º–¥–µ“£—ñ–∑\n‚Ä¢ –¢–∞–ª–¥–∞—É –∂”ô–Ω–µ –µ—Å–µ–ø –±–µ—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–Ω –∑–µ—Ä—Ç—Ç–µ“£—ñ–∑\n‚Ä¢ –®–æ—Ç “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–≥—ñ–Ω “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—ñ“£—ñ–∑ (–µ–∫—ñ —Ñ–∞–∫—Ç–æ—Ä–ª—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –∫“Ø—Ä–¥–µ–ª—ñ “õ“±–ø–∏—è —Å”©–∑)"
                ]
            },
            '3': {
                'title': "üìä –ù–∞—Ä—ã“õ—Ç—ã —Ç–∞–ª–¥–∞—É",
                'content': [
                    "*–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É:*\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫—Ç–µ—Ä –º–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–¥–µ—Ä–¥—ñ –∑–µ—Ä—Ç—Ç–µ—É\n‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É (MA, MACD, RSI)\n‚Ä¢ –ë–∞“ì–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–¥–µ—Ä—ñ–Ω —Ç–∞–Ω—É\n‚Ä¢ “ö–æ–ª–¥–∞—É –∂”ô–Ω–µ –∫–µ–¥–µ—Ä–≥—ñ –¥–µ“£–≥–µ–π–ª–µ—Ä—ñ–Ω —Ç–∞–±—É",
                    "*–Ü—Ä–≥–µ–ª—ñ —Ç–∞–ª–¥–∞—É:*\n‚Ä¢ –ñ–∞–ª–ø—ã —ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –∂–∞“ì–¥–∞–π–¥—ã –∑–µ—Ä—Ç—Ç–µ—É\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –∫”©—Ä—Å–µ—Ç–∫—ñ—à—Ç–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞—É\n‚Ä¢ –û—Ä—Ç–∞–ª—ã“õ –±–∞–Ω–∫—Ç–µ—Ä–¥—ñ“£ –∞“õ—à–∞ —Å–∞—è—Å–∞—Ç—ã–Ω –±–∞“ì–∞–ª–∞—É\n‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä–¥—ã –±–∞“ì–∞–ª–∞—É (–∞–∫—Ü–∏—è–ª–∞—Ä “Ø—à—ñ–Ω)",
                    "*–¢–∞–Ω—ã–º–∞–ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä:*\n‚Ä¢ Moving Average (MA) ‚Äî –∂—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞\n‚Ä¢ Relative Strength Index (RSI) ‚Äî —Å–∞–ª—ã—Å—Ç—ã—Ä–º–∞–ª—ã –∫“Ø—à –∏–Ω–¥–µ–∫—Å—ñ\n‚Ä¢ Moving Average Convergence Divergence (MACD) ‚Äî –∂—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞–ª–∞—Ä–¥—ã“£ –∂–∏–Ω–∞“õ—Ç–∞–ª—É—ã –∂”ô–Ω–µ –∞–π—ã—Ä—ã–ª—É—ã\n‚Ä¢ Bollinger Bands ‚Äî –±–∞“ì–∞ –∞–π–Ω–∞–ª–∞—Å—ã–Ω–¥–∞“ì—ã –≤–æ–ª–∞—Ç–∏–ª—å–¥—ñ–ª—ñ–∫ —Å—ã–∑—ã“õ—Ç–∞—Ä—ã",
                    "*–ê“õ–ø–∞—Ä–∞—Ç –∫”©–∑–¥–µ—Ä—ñ:*\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –∫“Ø–Ω—Ç—ñ–∑–±–µ\n‚Ä¢ “ö–∞—Ä–∂—ã –∂–∞“£–∞–ª—ã“õ—Ç–∞—Ä—ã\n‚Ä¢ –û—Ä—Ç–∞–ª—ã“õ –±–∞–Ω–∫—Ç–µ—Ä–¥—ñ“£ –±–∞—Å—ã–ª—ã–º–¥–∞—Ä—ã\n‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä–¥—ã“£ –µ—Å–µ–ø—Ç–µ—Ä—ñ"
                ]
            },
            '4': {
                'title': "‚ö†Ô∏è –¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É",
                'content': [
                    "*–ù–µ–≥—ñ–∑–≥—ñ –ø—Ä–∏–Ω—Ü–∏–ø—Ç–µ—Ä:*\n‚Ä¢ –ú”ô–º—ñ–ª–µ –±–æ–π—ã–Ω—à–∞ –º–∞–∫—Å–∏–º–∞–ª–¥—ã —Ç”ô—É–µ–∫–µ–ª–¥—ñ –∞–Ω—ã“õ—Ç–∞—É\n‚Ä¢ –ñ–∞–ª–ø—ã –∫–∞–ø–∏—Ç–∞–ª–¥—ã“£ 1-2%-–¥–∞–Ω –∞—Ä—Ç—ã“õ —Ç”ô—É–µ–∫–µ–ª–≥–µ –±–∞—Ä–º–∞“£—ã–∑\n‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–ª–∞—Ä–¥—ã ”ô—Ä—Ç–∞—Ä–∞–ø—Ç–∞–Ω–¥—ã—Ä—É\n‚Ä¢ ”ò—Ä–¥–∞–π—ã–º Stop Loss “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑",
                    "*–¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã:*\n‚Ä¢ Stop Loss ‚Äî —à—ã“ì—ã–Ω–¥—ã —à–µ–∫—Ç–µ—É–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å\n‚Ä¢ Take Profit ‚Äî –ø–∞–π–¥–∞–Ω—ã –±–µ–∫—ñ—Ç—É–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—Å\n‚Ä¢ –¢”ô—É–µ–∫–µ–ª –º–µ–Ω –ø–∞–π–¥–∞ –∞—Ä–∞“õ–∞—Ç—ã–Ω–∞—Å—ã ‚Äî 1:2 –Ω–µ–º–µ—Å–µ –æ–¥–∞–Ω –¥–∞ –∫”©–ø “±—Å—ã–Ω—ã–ª–∞–¥—ã\n‚Ä¢ Money Management ‚Äî –∫–∞–ø–∏—Ç–∞–ª–¥—ã –¥“±—Ä—ã—Å –±”©–ª—É",
                    "*–ñ–∏—ñ –∫–µ–∑–¥–µ—Å–µ—Ç—ñ–Ω “õ–∞—Ç–µ–ª–µ—Ä:*\n‚Ä¢ –ë—ñ—Ä –º”ô–º—ñ–ª–µ–≥–µ —Ç—ã–º –∫”©–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–∞–ª—É\n‚Ä¢ ”ò—Ä–µ–∫–µ—Ç –∂–æ—Å–ø–∞—Ä—ã–Ω—ã“£ –±–æ–ª–º–∞—É—ã\n‚Ä¢ –¢—Ä–µ–Ω–¥–∫–µ “õ–∞—Ä—Å—ã —Å–∞—É–¥–∞ –∂–∞—Å–∞—É\n‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª–¥—ã –º”ô–º—ñ–ª–µ–ª–µ—Ä\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã “Ø–Ω–µ–º—ñ –∞—É—ã—Å—Ç—ã—Ä—É",
                    "*–ú–∞“£—ã–∑–¥—ã –µ—Ä–µ–∂–µ–ª–µ—Ä:*\n‚Ä¢ –¢–µ–∫ ”©–∑—ñ“£—ñ–∑ –∂–æ“ì–∞–ª—Ç—É“ì–∞ –¥–∞–π—ã–Ω “õ–∞—Ä–∞–∂–∞—Ç–ø–µ–Ω —Å–∞—É–¥–∞ –∂–∞—Å–∞“£—ã–∑\n‚Ä¢ –°–∞—É–¥–∞ –∂—É—Ä–Ω–∞–ª—ã–Ω –∂“Ø—Ä–≥—ñ–∑—ñ“£—ñ–∑\n‚Ä¢ –ñ–æ“ì–∞–ª—Ç“õ–∞–Ω —Å–æ–º–∞–Ω—ã —Ç–µ–∑ “õ–∞–π—Ç–∞—Ä—É“ì–∞ —Ç—ã—Ä—ã—Å–ø–∞“£—ã–∑\n‚Ä¢ –ë—ñ–ª—ñ–º–¥—ñ “Ø–Ω–µ–º—ñ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—ñ–ø –æ—Ç—ã—Ä—ã“£—ã–∑"
                ]
            },
            '5': {
                'title': "üß† –¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã",
                'content': [
                    "*–≠–º–æ—Ü–∏–æ–Ω–∞–ª–¥—ã –∂–∞“ì–¥–∞–π–ª–∞—Ä:*\n‚Ä¢ –ê—à–∫”©–∑–¥—ñ–∫ ‚Äî —à–∞–º–∞–¥–∞–Ω —Ç—ã—Å –ø–∞–π–¥–∞ —Ç–∞–±—É“ì–∞ “±–º—Ç—ã–ª—É\n‚Ä¢ “ö–æ—Ä“õ—ã–Ω—ã—à ‚Äî –¥“±—Ä—ã—Å –µ–º–µ—Å —à–µ—à—ñ–º–¥–µ—Ä–≥–µ ”ô–∫–µ–ª—É—ñ –º“Ø–º–∫—ñ–Ω\n‚Ä¢ “Æ–º—ñ—Ç ‚Äî –±“±—Ä—ã–ª—É“ì–∞ “Ø–º—ñ—Ç—Ç–µ–Ω—ñ–ø, —à—ã“ì—ã–Ω–¥—ã –ø–æ–∑–∏—Ü–∏—è–Ω—ã “±—Å—Ç–∞–ø —Ç“±—Ä—É\n‚Ä¢ ”®–∫—ñ–Ω—ñ—à ‚Äî —à—ã“ì—ã–Ω–¥—ã –º–æ–π—ã–Ω–¥–∞–º–∞—É “Ø—à—ñ–Ω —à—ã“ì—ã–Ω–¥—ã –ø–æ–∑–∏—Ü–∏—è–Ω—ã “±—Å—Ç–∞–ø —Ç“±—Ä—É",
                    "*–°–∞—É–¥–∞ —Ç”ô—Ä—Ç—ñ–±—ñ:*\n‚Ä¢ –ñ–æ—Å–ø–∞—Ä–¥—ã “õ–∞—Ç–∞“£ “±—Å—Ç–∞–Ω—É\n‚Ä¢ –≠–º–æ—Ü–∏—è–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥–∫–µ –∂“Ø–π–µ–ª—ñ –∫”©–∑“õ–∞—Ä–∞—Å\n‚Ä¢ –®—ã“ì—ã–Ω –∫–µ–∑—ñ–Ω–¥–µ —Ç–æ“õ—Ç–∞–π –±—ñ–ª—É",
                    "*–ú”ô–º—ñ–ª–µ –∂–æ—Å–ø–∞—Ä—ã:*\n‚Ä¢ –ö—ñ—Ä—É –∂”ô–Ω–µ —à—ã“ì—É –Ω“Ø–∫—Ç–µ–ª–µ—Ä—ñ\n‚Ä¢ –ú”ô–º—ñ–ª–µ –∫”©–ª–µ–º—ñ\n‚Ä¢ –¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É\n‚Ä¢ –ñ–æ—Å–ø–∞—Ä–¥—ã —Ç–æ“õ—Ç–∞—Ç—É —à–∞—Ä—Ç—Ç–∞—Ä—ã",
                    "*“∞—Å—ã–Ω—ã—Å—Ç–∞—Ä:*\n‚Ä¢ –°–∞—É–¥–∞ –∂—É—Ä–Ω–∞–ª—ã–Ω –∂“Ø—Ä–≥—ñ–∑—ñ–ø, –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞“£—ã–∑\n‚Ä¢ –¢”ô–∂—ñ—Ä–∏–±–µ –∂–∏–Ω–∞—É “Ø—à—ñ–Ω —à–∞“ì—ã–Ω —Å–æ–º–∞–¥–∞–Ω –±–∞—Å—Ç–∞“£—ã–∑\n‚Ä¢ –¢”ô–∂—ñ—Ä–∏–±–µ“£—ñ–∑–¥—ñ –¥–µ–º–æ-—à–æ—Ç—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑\n‚Ä¢ –ñ–∞“ì–¥–∞–π—ã“£—ã–∑ –Ω–∞—à–∞—Ä –±–æ–ª—Å–∞, –¥–µ–º–∞–ª—ã“£—ã–∑\n‚Ä¢ –ë—ñ—Ä–Ω–µ—à–µ —à—ã“ì—ã–Ω–¥—ã –º”ô–º—ñ–ª–µ–¥–µ–Ω –∫–µ–π—ñ–Ω “Ø–∑—ñ–ª—ñ—Å –∂–∞—Å–∞“£—ã–∑"
                ]
            },
            '6': {
                'title': "üìà –°–∞—É–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã",
                'content': [
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç“Ø—Ä–ª–µ—Ä—ñ:*\n‚Ä¢ –¢—Ä–µ–Ω–¥—Ç—ñ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä ‚Äî “õ–æ–∑“ì–∞–ª—ã—Å—Ç–∞“ì—ã –Ω–∞—Ä—ã“õ—Ç–∞—Ä “Ø—à—ñ–Ω\n‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω–¥—ã“õ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä ‚Äî —Ç“±—Ä–∞“õ—Ç–∞–Ω“ì–∞–Ω –Ω–∞—Ä—ã“õ—Ç–∞—Ä “Ø—à—ñ–Ω\n‚Ä¢ –°–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã ‚Äî –∞–∑ –ø–∞–π–¥–∞–Ω—ã –∂—ã–ª–¥–∞–º –∞–ª—É “Ø—à—ñ–Ω\n‚Ä¢ –°–≤–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã ‚Äî –æ—Ä—Ç–∞ –º–µ—Ä–∑—ñ–º–¥—ñ ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä–¥–µ–Ω –ø–∞–π–¥–∞ —Ç–∞–±—É “Ø—à—ñ–Ω",
                    "*–¢–∞–Ω—ã–º–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä:*\n‚Ä¢ –ñ—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞–ª–∞—Ä–¥—ã“£ “õ–∏—ã–ª—ã—Å—É—ã ‚Äî —Ç—Ä–µ–Ω–¥—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω MA “õ–∏—ã–ª—ã—Å—É—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É\n‚Ä¢ “ö–∞–π—Ç–∞ —Ç–µ–±—ñ–ª—É —Å–∞—É–¥–∞—Å—ã ‚Äî –±–∞“ì–∞–Ω—ã“£ –¥–µ“£–≥–µ–π–ª–µ—Ä–¥–µ–Ω “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—É—ñ–Ω –∫“Ø—Ç—É\n‚Ä¢ –î–µ“£–≥–µ–π–¥—ñ –±“±–∑—É —Å–∞—É–¥–∞—Å—ã ‚Äî –º–∞“£—ã–∑–¥—ã –¥–µ“£–≥–µ–π–ª–µ—Ä–¥—ñ“£ –±“±–∑—ã–ª—É—ã–Ω –∫“Ø—Ç—É\n‚Ä¢ RSI –∞—Ä—Ç—ã“õ —Å–∞—Ç—ã–ª—ã–º/–∞—Ä—Ç—ã“õ —Å–∞—Ç—ã–ø –∞–ª—É ‚Äî RSI —ç–∫—Å—Ç—Ä–µ–º–∞–ª–¥—ã –º”ô–Ω–¥–µ—Ä—ñ–Ω–¥–µ —Å–∞—Ç—ã–ø –∞–ª—É/—Å–∞—Ç—É",
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã —Ç–∞“£–¥–∞—É:*\n‚Ä¢ –°—ñ–∑–¥—ñ“£ –∂–µ–∫–µ —Å—Ç–∏–ª—ñ“£—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å—Ç—ñ–∫\n‚Ä¢ –ù–∞—Ä—ã“õ —Ñ–∞–∑–∞—Å—ã–Ω–∞ —Å”ô–π–∫–µ—Å—Ç—ñ–∫ (—Ç—Ä–µ–Ω–¥—Ç—ñ–∫ –Ω–µ–º–µ—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω–¥—ã“õ)\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥–∫–µ –±”©–ª–µ—Ç—ñ–Ω —É–∞“õ—ã—Ç—ã“£—ã–∑“ì–∞ —Å”ô–π–∫–µ—Å—Ç—ñ–∫\n‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª –∫”©–ª–µ–º—ñ“£—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å—Ç—ñ–∫",
                    "*–°—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É:*\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã –¥–µ–º–æ-—à–æ—Ç—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑\n‚Ä¢ –¢–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω –±—ñ—Ä–Ω–µ—à–µ –º”ô–º—ñ–ª–µ –∂–∞—Å–∞“£—ã–∑\n‚Ä¢ –¢–∞—Ä–∏—Ö–∏ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥–µ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ (–±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥)\n‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã –∞“ì—ã–º–¥–∞“ì—ã –Ω–∞—Ä—ã“õ –∂–∞“ì–¥–∞–π–ª–∞—Ä—ã–Ω–∞ –±–µ–π—ñ–º–¥–µ“£—ñ–∑"
                ]
            },
            '7': {
                'title': "üë®‚Äçüíª –¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Ä–∞–∫—Ç–∏–∫–∞—Å—ã",
                'content': [
                    "*–î–µ–º–æ-—à–æ—Ç:*\n‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–Ω—ã “Ø–π—Ä–µ–Ω—É “Ø—à—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä–¥—ã –Ω–∞“õ—Ç—ã —Ç”ô—É–µ–∫–µ–ª—Å—ñ–∑ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑\n‚Ä¢ –¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É –¥–∞“ì–¥—ã–ª–∞—Ä—ã–Ω –∂–µ—Ç—ñ–ª–¥—ñ—Ä—ñ“£—ñ–∑\n‚Ä¢ –≠–º–æ—Ü–∏—è–ª–∞—Ä“ì–∞ “Ø–π—Ä–µ–Ω—ñ“£—ñ–∑",
                    "*–ù–∞“õ—Ç—ã —Å–∞—É–¥–∞–Ω—ã –±–∞—Å—Ç–∞—É:*\n‚Ä¢ –®–∞“ì—ã–Ω —Å–æ–º–∞–¥–∞–Ω –±–∞—Å—Ç–∞“£—ã–∑\n‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –∫”©–ª–µ–º—ñ–Ω —à–µ–∫—Ç–µ“£—ñ–∑\n‚Ä¢ –¢–µ–∫ —Ç–µ–∫—Å–µ—Ä—ñ–ª–≥–µ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑\n‚Ä¢ –¢–æ–ª—ã“õ –º”ô–º—ñ–ª–µ–ª–µ—Ä –∂—É—Ä–Ω–∞–ª—ã–Ω –∂“Ø—Ä–≥—ñ–∑—ñ“£—ñ–∑",
                    "*–°–∞—É–¥–∞ –∂—É—Ä–Ω–∞–ª—ã:*\n‚Ä¢ –ú”ô–º—ñ–ª–µ–≥–µ –∫—ñ—Ä—É —Å–µ–±–µ–±—ñ\n‚Ä¢ Stop Loss –∂”ô–Ω–µ Take Profit –¥–µ“£–≥–µ–π–ª–µ—Ä—ñ\n‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –∫”©–ª–µ–º—ñ\n‚Ä¢ –ú”ô–º—ñ–ª–µ –Ω”ô—Ç–∏–∂–µ—Å—ñ –∂”ô–Ω–µ –æ–Ω—ã —Ç–∞–ª–¥–∞—É",
                    "*–î–∞“ì–¥—ã–ª–∞—Ä–¥—ã –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É:*\n‚Ä¢ ”®—Ç–∫–µ–Ω –º”ô–º—ñ–ª–µ–ª–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞“£—ã–∑\n‚Ä¢ “ö–∞–π—Ç–∞–ª–∞–Ω–∞—Ç—ã–Ω “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞“£—ã–∑\n‚Ä¢ –¢–∞–±—ã—Å —Ñ–∞–∫—Ç–æ—Ä–ª–∞—Ä—ã–Ω –∞–Ω—ã“õ—Ç–∞“£—ã–∑\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è–Ω—ã –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–≥–µ —Å”ô–π–∫–µ—Å —Ç“Ø–∑–µ—Ç—ñ“£—ñ–∑"
                ]
            },
            '8': {
                'title': "üìö –ë—ñ–ª—ñ–∫—Ç—ñ–ª—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—É",
                'content': [
                    "*–û“õ—É –∫”©–∑–¥–µ—Ä—ñ:*\n‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥ –∂”ô–Ω–µ –Ω–∞—Ä—ã“õ —Ç–∞–ª–¥–∞—É—ã –±–æ–π—ã–Ω—à–∞ –∫—ñ—Ç–∞–ø—Ç–∞—Ä\n‚Ä¢ –í–µ–±–∏–Ω–∞—Ä–ª–∞—Ä –∂”ô–Ω–µ –æ–Ω–ª–∞–π–Ω-—Å–µ–º–∏–Ω–∞—Ä–ª–∞—Ä\n‚Ä¢ –¢—Ä–µ–π–¥–µ—Ä–ª–µ—Ä “õ–∞—É—ã–º–¥–∞—Å—Ç—ã“ì—ã\n‚Ä¢ –°–∞—Ä–∞–ø—à—ã–ª–∞—Ä–¥–∞–Ω –Ω–∞—Ä—ã“õ —à–æ–ª—É–ª–∞—Ä—ã",
                    "*“∞—Å—ã–Ω—ã–ª–∞—Ç—ã–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä:*\n‚Ä¢ \"–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É\" - –î–∂–æ–Ω –ú–µ—Ä—Ñ–∏\n‚Ä¢ \"–¢”ô—Ä—Ç—ñ–ø—Ç—ñ —Ç—Ä–µ–π–¥–µ—Ä\" - –ú–∞—Ä–∫ –î—É–≥–ª–∞—Å\n‚Ä¢ \"–ë–∏—Ä–∂–∞ —Å–ø–µ–∫—É–ª—è–Ω—Ç—ã–Ω—ã“£ –µ—Å—Ç–µ–ª—ñ–∫—Ç–µ—Ä—ñ\" - –≠–¥–≤–∏–Ω –õ–µ—Ñ–µ–≤—Ä\n‚Ä¢ \"–¢—Ä–µ–π–¥–∏–Ω–≥ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è—Å—ã\" - –ë—Ä–µ—Ç—Ç –°—Ç–∏–Ω–±–∞—Ä–≥–µ—Ä",
                    "*–û“õ—É –∞—Å–ø–µ–∫—Ç—ñ–ª–µ—Ä—ñ:*\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫—Ç–µ—Ä –º–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–¥–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞—É\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä–¥—ã –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É\n‚Ä¢ –¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É\n‚Ä¢ –≠–º–æ—Ü–∏—è–ª–∞—Ä–¥—ã –±–∞“õ—ã–ª–∞—É\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –±–∞“ì–∞–ª–∞—É",
                    "*–ú–∞“£—ã–∑–¥—ã —Å”ô—Ç—Ç–µ—Ä:*\n‚Ä¢ –¢–∞–±—ã—Å—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –±“±–ª “Ø–Ω–µ–º—ñ –æ“õ—É –∂”ô–Ω–µ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ\n‚Ä¢ “ö—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥—ñ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–≥–µ —Ñ–æ–∫—É—Å –∂–∞—Å–∞–º–∞“£—ã–∑\n‚Ä¢ –¢–∞–±—ã—Å –∫”©—Ä—Å–µ—Ç–∫—ñ—à—ñ ‚Äî —Ç“±—Ä–∞“õ—Ç—ã –ø–∞–π–¥–∞\n‚Ä¢ –ù”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ“£—ñ–∑–¥—ñ –∂“Ø–π–µ–ª—ñ —Ç“Ø—Ä–¥–µ “õ–∞—Ä–∞–ø, —Ç–∞–ª–¥–∞“£—ã–∑"
                ]
            }
        },
        'en': {
            '1': {
                'title': "üî∞ Trading Basics",
                'content': [
                    "*What is trading?*\nTrading is the activity of buying and selling financial assets (currencies, stocks, commodities) with the aim of making a profit.",
                    "*Basic terminology:*\n‚Ä¢ Spread ‚Äî the difference between buy and sell prices\n‚Ä¢ Volatility ‚Äî the variability of an asset's price\n‚Ä¢ Liquidity ‚Äî the ease of converting an asset into cash\n‚Ä¢ Take Profit/Stop Loss ‚Äî orders for risk control",
                    "*Types of markets:*\n‚Ä¢ Forex ‚Äî currency market\n‚Ä¢ Stock market ‚Äî buying and selling company shares\n‚Ä¢ Futures market ‚Äî contracts for buying/selling an asset in the future\n‚Ä¢ Cryptocurrency market ‚Äî trading digital currencies",
                    "*Trading styles:*\n‚Ä¢ Scalping ‚Äî short-term trades with small profit\n‚Ä¢ Day trading ‚Äî trades within a day\n‚Ä¢ Swing trading ‚Äî trades lasting from several days to weeks\n‚Ä¢ Long-term investments ‚Äî holding a position for months/years"
                ]
            },
            '2': {
                'title': "üñ•Ô∏è Platform Selection",
                'content': [
                    "*Types of platforms:*\n‚Ä¢ Brokers ‚Äî companies that provide traders with access to markets\n‚Ä¢ Exchanges ‚Äî platforms that allow direct trading",
                    "*Selection criteria:*\n‚Ä¢ Reliability ‚Äî company regulation, operating history\n‚Ä¢ Entry threshold ‚Äî minimum amount for investment\n‚Ä¢ Trading conditions ‚Äî spreads, commissions, leverage\n‚Ä¢ Fund accessibility ‚Äî deposit/withdrawal methods\n‚Ä¢ Functionality ‚Äî charts, indicators, mobile platform",
                    "*Popular platforms:*\n‚Ä¢ MetaTrader 4/5 ‚Äî for Forex and futures trading\n‚Ä¢ TradingView ‚Äî for analysis and trading\n‚Ä¢ Think or Swim ‚Äî for stock and options trading\n‚Ä¢ Binance ‚Äî for cryptocurrency trading",
                    "*Recommendations:*\n‚Ä¢ First work on a demo account\n‚Ä¢ Customize the interface to suit your needs\n‚Ä¢ Explore analysis and reporting capabilities\n‚Ä¢ Ensure account security (two-factor authentication, complex password)"
                ]
            },
            '3': {
                'title': "üìä Market Analysis",
                'content': [
                    "*Technical analysis:*\n‚Ä¢ Studying charts and patterns\n‚Ä¢ Using indicators (MA, MACD, RSI)\n‚Ä¢ Recognizing price patterns\n‚Ä¢ Finding support and resistance levels",
                    "*Fundamental analysis:*\n‚Ä¢ Studying the general economic situation\n‚Ä¢ Analyzing economic indicators\n‚Ä¢ Evaluating monetary policy of central banks\n‚Ä¢ Evaluating companies (for stocks)",
                    "*Popular indicators:*\n‚Ä¢ Moving Average (MA) ‚Äî smooths price data\n‚Ä¢ Relative Strength Index (RSI) ‚Äî measures momentum\n‚Ä¢ Moving Average Convergence Divergence (MACD) ‚Äî shows relationship between moving averages\n‚Ä¢ Bollinger Bands ‚Äî volatility lines around price",
                    "*Information sources:*\n‚Ä¢ Economic calendar\n‚Ä¢ Financial news\n‚Ä¢ Central bank publications\n‚Ä¢ Company reports"
                ]
            },
            '4': {
                'title': "‚ö†Ô∏è Risk Management",
                'content': [
                    "*Basic principles:*\n‚Ä¢ Determining maximum risk per trade\n‚Ä¢ Never risk more than 1-2% of total capital\n‚Ä¢ Diversification of investments\n‚Ä¢ Always use Stop Loss",
                    "*Risk management strategies:*\n‚Ä¢ Stop Loss ‚Äî order to limit loss\n‚Ä¢ Take Profit ‚Äî order to secure profit\n‚Ä¢ Risk to reward ratio ‚Äî 1:2 or more is recommended\n‚Ä¢ Money Management ‚Äî proper capital allocation",
                    "*Common mistakes:*\n‚Ä¢ Too large investment in one trade\n‚Ä¢ Lack of action plan\n‚Ä¢ Trading against the trend\n‚Ä¢ Emotional trades\n‚Ä¢ Constant strategy change",
                    "*Important rules:*\n‚Ä¢ Trade only with money you can afford to lose\n‚Ä¢ Keep a trading journal\n‚Ä¢ Don't try to quickly recover a lost amount\n‚Ä¢ Continuously improve your knowledge"
                ]
            },
            '5': {
                'title': "üß† Trading Psychology",
                'content': [
                    "*Emotional states:*\n‚Ä¢ Greed ‚Äî desire to get excessive profit\n‚Ä¢ Fear ‚Äî can lead to wrong decisions\n‚Ä¢ Hope ‚Äî holding a losing position hoping for a reversal\n‚Ä¢ Regret ‚Äî holding a losing position to avoid acknowledging the loss",
                    "*Trading discipline:*\n‚Ä¢ Strict adherence to your plan\n‚Ä¢ Managing emotions\n‚Ä¢ Systematic approach to trading\n‚Ä¢ Ability to stop during losses",
                    "*Trade plan:*\n‚Ä¢ Entry and exit points\n‚Ä¢ Position size\n‚Ä¢ Risk management\n‚Ä¢ Plan cancellation conditions",
                    "*Recommendations:*\n‚Ä¢ Keep a trading journal and analyze results\n‚Ä¢ Start with small amounts to gain experience\n‚Ä¢ Test your experience on a demo account\n‚Ä¢ Rest if you are in a bad state\n‚Ä¢ Take a break after several consecutive losing trades"
                ]
            },
            '6': {
                'title': "üìà Trading Strategies",
                'content': [
                    "*Types of strategies:*\n‚Ä¢ Trend strategies ‚Äî for moving markets\n‚Ä¢ Range strategies ‚Äî for consolidating markets\n‚Ä¢ Scalping strategies ‚Äî for quick small profit\n‚Ä¢ Swing strategies ‚Äî for profit from medium-term changes",
                    "*Popular strategies:*\n‚Ä¢ Moving Average Crossover ‚Äî using MA crossing to determine trend\n‚Ä¢ Trading from bounce ‚Äî waiting for price recovery from levels\n‚Ä¢ Breakout trading ‚Äî waiting for breakthrough of important levels\n‚Ä¢ RSI oversold/overbought ‚Äî buying/selling at extreme RSI values",
                    "*Choosing a strategy:*\n‚Ä¢ Match your personal style\n‚Ä¢ Match the market phase (trending or ranging)\n‚Ä¢ Match the time you can devote to trading\n‚Ä¢ Match the size of your capital",
                    "*Refining strategy:*\n‚Ä¢ Test the strategy on a demo account\n‚Ä¢ Conduct several trades for testing\n‚Ä¢ Check on historical data (backtesting)\n‚Ä¢ Adapt indicators to current market conditions"
                ]
            },
            '7': {
                'title': "üë®‚Äçüíª Trading Practice",
                'content': [
                    "*Demo account:*\n‚Ä¢ Use to learn the platform\n‚Ä¢ Test strategies without real risk\n‚Ä¢ Improve risk management skills\n‚Ä¢ Get used to emotions",
                    "*Starting real trading:*\n‚Ä¢ Start with a small amount\n‚Ä¢ Limit position size\n‚Ä¢ Use only proven strategy\n‚Ä¢ Keep a detailed trading journal",
                    "*Trading journal:*\n‚Ä¢ Reason for entering the trade\n‚Ä¢ Stop Loss and Take Profit levels\n‚Ä¢ Position size\n‚Ä¢ Trade result and its analysis",
                    "*Skill improvement:*\n‚Ä¢ Analyze past trades\n‚Ä¢ Identify recurring mistakes\n‚Ä¢ Determine success factors\n‚Ä¢ Adjust strategy according to results"
                ]
            },
            '8': {
                'title': "üìö Skill Enhancement",
                'content': [
                    "*Learning sources:*\n‚Ä¢ Books on trading and market analysis\n‚Ä¢ Webinars and online seminars\n‚Ä¢ Trader communities\n‚Ä¢ Market reviews from experts",
                    "*Recommended books:*\n‚Ä¢ \"Technical Analysis\" - John Murphy\n‚Ä¢ \"The Disciplined Trader\" - Mark Douglas\n‚Ä¢ \"Reminiscences of a Stock Operator\" - Edwin Lef√®vre\n‚Ä¢ \"Trading Psychology\" - Brett Steenbarger",
                    "*Learning aspects:*\n‚Ä¢ Analysis of charts and patterns\n‚Ä¢ Strategy refinement\n‚Ä¢ Risk management\n‚Ä¢ Emotion control\n‚Ä¢ Economic assessment",
                    "*Important points:*\n‚Ä¢ Successful trading is a continuous process of learning and improvement\n‚Ä¢ Don't focus on short-term results\n‚Ä¢ The indicator of success is stable profit\n‚Ä¢ Regularly review and analyze your results"
                ]
            }
        }
    }
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button_texts = {
        'tg': {
            'back': "‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç",
            'main': "üè† –ë–∞ —Å–∞“≥–∏—Ñ–∞–∏ –∞—Å–æ—Å”£"
        },
        'ru': {
            'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            'main': "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"
        },
        'uz': {
            'back': "‚Ü©Ô∏è Orqaga",
            'main': "üè† Bosh sahifaga"
        },
        'kk': {
            'back': "‚Ü©Ô∏è –ê—Ä—Ç“õ–∞",
            'main': "üè† –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ"
        },
        'en': {
            'back': "‚Ü©Ô∏è Back",
            'main': "üè† Home"
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    button_text = button_texts.get(lang_code, button_texts['ru'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    topic_data = topic_content.get(lang_code, topic_content['ru']).get(topic_number)
    
    if not topic_data:
        # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
        query.data = "trading_beginner"
        return await handle_trading_beginner(update, context)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ç–µ–º—ã
    message = f"{topic_data['title']}\n\n" + "\n\n".join(topic_data['content'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton(button_text['back'], callback_data="trading_beginner")],
        [InlineKeyboardButton(button_text['main'], callback_data="return_to_main")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_trading_strategies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Processing trading_strategies request for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
    except Exception as e:
        logger.error(f"Error in handle_trading_strategies: {e}")
        lang_code = 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    if query.data.startswith("strategy_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ callback_data
        strategy_name = query.data.replace("strategy_", "")
        await show_strategy_details(update, context, strategy_name, lang_code)
        return
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    titles = {
        'tg': 'üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥',
        'ru': 'üìà –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
        'uz': 'üìà Treyding strategiyalari',
        'kk': 'üìà –¢—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã',
        'en': 'üìà Trading Strategies'
    }
    
    # –¢–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    descriptions = {
        'tg': '–ò–Ω—Ç–∏—Ö–æ–± –Ω–∞–º–æ–µ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Å–∞–≤–¥–æ—Ä–æ –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª –≤–∞ –º–∏—Å–æ–ª“≥–æ:',
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤:',
        'uz': 'Batafsil ma\'lumot va misollar olish uchun savdo strategiyasini tanlang:',
        'kk': '–¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –ø–µ–Ω –º—ã—Å–∞–ª–¥–∞—Ä –∞–ª—É “Ø—à—ñ–Ω —Å–∞—É–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:',
        'en': 'Select a trading strategy for detailed information and examples:'
    }
    
    # –ö–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    strategies_buttons = {
        'tg': [
            ["üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Ä—É–π—Ç–∞–º–æ–∏–ª–∏", "üìâ –ò–Ω–≤–µ—Ä—Å–∏—è"],
            ["üìè –°–∞–≤–¥–æ–∏ —Ñ–æ—Å–∏–ª–∞–≤”£", "‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥"],
            ["üí± –ê—Ä–±–∏—Ç—Ä–∞–∂", "üï∞Ô∏è –ü–æ–∑–∏—Ç—Ä–µ–π–¥–∏–Ω–≥"],
            ["üåô –°–∞–≤–¥–æ–∏ —à–∞–±–æ–Ω–∞"]
        ],
        'ru': [
            ["üìä –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "üìâ –†–∞–∑–≤–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"],
            ["üìè –î–∏–∞–ø–∞–∑–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥"],
            ["üí± –ê—Ä–±–∏—Ç—Ä–∞–∂", "üï∞Ô∏è –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"],
            ["üåô –û–≤–µ—Ä–Ω–∞–π—Ç-—Ç—Ä–µ–π–¥–∏–Ω–≥"]
        ],
        'uz': [
            ["üìä Trend strategiyasi", "üìâ Aylanish strategiyasi"],
            ["üìè Diapazonda savdo", "‚ö° Skalping"],
            ["üí± Arbitraj", "üï∞Ô∏è Pozitsion savdo"],
            ["üåô Tungi savdo"]
        ],
        'kk': [
            ["üìä –¢—Ä–µ–Ω–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã", "üìâ –ë“±—Ä—ã–ª—ã—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã"],
            ["üìè –î–∏–∞–ø–∞–∑–æ–Ω–¥—ã —Å–∞—É–¥–∞", "‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥"],
            ["üí± –ê—Ä–±–∏—Ç—Ä–∞–∂", "üï∞Ô∏è –ü–æ–∑–∏—Ü–∏—è–ª—ã“õ —Å–∞—É–¥–∞"],
            ["üåô –¢“Ø–Ω–≥—ñ —Å–∞—É–¥–∞"]
        ],
        'en': [
            ["üìä Trend Trading", "üìâ Reversal Trading"],
            ["üìè Range Trading", "‚ö° Scalping"],
            ["üí± Arbitrage", "üï∞Ô∏è Position Trading"],
            ["üåô Overnight Trading"]
        ]
    }
    
    back_button_text = {
        'tg': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç',
        'ru': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
        'uz': '‚Ü©Ô∏è Orqaga',
        'kk': '‚Ü©Ô∏è –ê—Ä—Ç“õ–∞',
        'en': '‚Ü©Ô∏è Back'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    title = titles.get(lang_code, titles['ru'])
    description = descriptions.get(lang_code, descriptions['ru'])
    buttons = strategies_buttons.get(lang_code, strategies_buttons['ru'])
    back_button = back_button_text.get(lang_code, back_button_text['ru'])
    
    message = f"{title}\n\n{description}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    for button_row in buttons:
        row = []
        for button_text in button_row:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ callback_data
            strategy_name = "".join(button_text.split()[1:])
            callback_data = f"strategy_{strategy_name}"
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(back_button, callback_data="return_to_main")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_trading_tools(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Processing trading_tools request for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
    except Exception as e:
        logger.error(f"Error in handle_trading_tools: {e}")
        lang_code = 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    if query.data.startswith("tool_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ callback_data
        tool_name = query.data.replace("tool_", "")
        await show_tool_details(update, context, tool_name, lang_code)
        return
    
    # –¢–µ–∫—Å—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    titles = {
        'tg': 'üß∞ –ê–±–∑–æ—Ä“≥–æ–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥',
        'ru': 'üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞',
        'uz': 'üß∞ Treyding vositalari',
        'kk': 'üß∞ –¢—Ä–µ–π–¥–∏–Ω–≥ “õ“±—Ä–∞–ª–¥–∞—Ä—ã',
        'en': 'üß∞ Trading Tools'
    }
    
    # –¢–µ–∫—Å—Ç—ã –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    descriptions = {
        'tg': '–ò–Ω—Ç–∏—Ö–æ–± –Ω–∞–º–æ–µ–¥ –∞–±–∑–æ—Ä—Ä–æ –±–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª –≤–∞ —Ç–∞–≤—Å–∏—è“≥–æ:',
        'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:',
        'uz': 'Batafsil ma\'lumot va tavsiyalar olish uchun vositani tanlang:',
        'kk': '–¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –ø–µ–Ω “±—Å—ã–Ω—ã—Å—Ç–∞—Ä –∞–ª—É “Ø—à—ñ–Ω “õ“±—Ä–∞–ª–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:',
        'en': 'Select a tool for detailed information and recommendations:'
    }
    
    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    tools_buttons = {
        'tg': [
            ["üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ", "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ"],
            ["üì± –ó–∞–º–∏–º–∞“≥–æ", "üì∞ –ú–∞–Ω–±–∞—ä“≥–æ–∏ –∞—Ö–±–æ—Ä–æ—Ç"],
            ["üí∞ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ", "üìö –ö–∏—Ç–æ–±—Ö–æ–Ω–∞"]
        ],
        'ru': [
            ["üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"],
            ["üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
            ["üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"]
        ],
        'uz': [
            ["üìä Platformalar", "üìà Indikatorlar"],
            ["üì± Ilovalar", "üì∞ Axborot manbalari"],
            ["üí∞ Risklarni boshqarish", "üìö Kutubxona"]
        ],
        'kk': [
            ["üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä", "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä"],
            ["üì± “ö–æ—Å—ã–º—à–∞–ª–∞—Ä", "üì∞ –ê“õ–ø–∞—Ä–∞—Ç –∫”©–∑–¥–µ—Ä—ñ"],
            ["üí∞ –¢”ô—É–µ–∫–µ–ª–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É", "üìö –ö—ñ—Ç–∞–ø—Ö–∞–Ω–∞"]
        ],
        'en': [
            ["üìä Platforms", "üìà Indicators"],
            ["üì± Applications", "üì∞ Information Sources"],
            ["üí∞ Risk Management", "üìö Library"]
        ]
    }
    
    back_button_text = {
        'tg': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç',
        'ru': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
        'uz': '‚Ü©Ô∏è Orqaga',
        'kk': '‚Ü©Ô∏è –ê—Ä—Ç“õ–∞',
        'en': '‚Ü©Ô∏è Back'
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    title = titles.get(lang_code, titles['ru'])
    description = descriptions.get(lang_code, descriptions['ru'])
    buttons = tools_buttons.get(lang_code, tools_buttons['ru'])
    back_button = back_button_text.get(lang_code, back_button_text['ru'])
    
    message = f"{title}\n\n{description}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    for button_row in buttons:
        row = []
        for button_text in button_row:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ callback_data
            tool_name = "".join(button_text.split()[1:])
            callback_data = f"tool_{tool_name}"
            row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(back_button, callback_data="return_to_main")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_book_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–∞—Ö"""
    try:
        query = update.callback_query
        if not query:
            return
        
        await query.answer()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        logger.info(f"Processing book details request for user_id: {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user(user_id)
        if user_data:
            lang_code = user_data.get('language_code', 'ru')
            logger.info(f"User language: {lang_code}")
        else:
            lang_code = 'ru'
            logger.warning(f"User data not found, using default language")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏ –∏–∑ callback-data
        book_index = int(query.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        book_list = books.get(lang_code, books['ru'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
        if book_index < 0 or book_index >= len(book_list):
            await query.edit_message_text(
                "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="trading_books")
                ]])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–µ
        book = book_list[book_index]
        
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        details_texts = {
            'tg': {
                'title': '–ú–∞—ä–ª—É–º–æ—Ç–∏ –º—É—Ñ–∞—Å—Å–∞–ª –æ–∏–¥ –±–∞ –∫–∏—Ç–æ–±:',
                'description': '–¢–∞–≤—Å–∏—Ñ:',
                'pages': '–ú–∏“õ–¥–æ—Ä–∏ —Å–∞“≥–∏—Ñ–∞“≥–æ:',
                'year': '–°–æ–ª–∏ –Ω–∞—à—Ä:',
                'back': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç',
                'download': 'üì• –ë–æ—Ä–≥–∏—Ä”£ –∫–∞—Ä–¥–∞–Ω'
            },
            'ru': {
                'title': '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ:',
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ:',
                'pages': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:',
                'year': '–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:',
                'back': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                'download': 'üì• –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É'
            },
            'uz': {
                'title': 'Kitob haqida batafsil ma\'lumot:',
                'description': 'Tavsif:',
                'pages': 'Sahifalar soni:',
                'year': 'Nashr yili:',
                'back': '‚Ü©Ô∏è Orqaga',
                'download': 'üì• Kitobni yuklab olish'
            },
            'kk': {
                'title': '–ö—ñ—Ç–∞–ø —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç:',
                'description': '–°–∏–ø–∞—Ç—Ç–∞–º–∞:',
                'pages': '–ë–µ—Ç—Ç–µ—Ä —Å–∞–Ω—ã:',
                'year': '–ñ–∞—Ä–∏—è–ª–∞–Ω“ì–∞–Ω –∂—ã–ª—ã:',
                'back': '‚Ü©Ô∏è –ê—Ä—Ç“õ–∞',
                'download': 'üì• –ö—ñ—Ç–∞–ø—Ç—ã –∂“Ø–∫—Ç–µ—É'
            },
            'en': {
                'title': 'Detailed book information:',
                'description': 'Description:',
                'pages': 'Number of pages:',
                'year': 'Publication year:',
                'back': '‚Ü©Ô∏è Back',
                'download': 'üì• Download book'
            }
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        texts = details_texts.get(lang_code, details_texts['ru'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message = f"*{book['title']}*\n\n"
        message += f"{texts['description']} {book['description']}\n\n"
        message += f"{texts['pages']}: {book['pages']}\n"
        message += f"{texts['year']}: {book['year']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton(texts['download'], url=book['download_link'])],
            [InlineKeyboardButton(texts['back'], callback_data="trading_books")]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error in handle_book_details: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="trading_books")
            ]])
        )

async def show_strategy_details(update: Update, context: ContextTypes.DEFAULT_TYPE, strategy_name: str, lang_code: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    query = update.callback_query
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    strategy_details = {
        '–°–∫–∞–ª—å–ø–∏–Ω–≥': {
            'ru': {
                'title': '‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥ (Scalping)',
                'description': '–ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å —Ü–µ–ª—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.',
                'how_it_works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
                                '1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ M1-M5 –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n'
                                '2. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–º–ø—É–ª—å—Å–∞—Ö —Ü–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ä—ã–≤–∞—Ö —É—Ä–æ–≤–Ω–µ–π\n'
                                '3. –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç\n'
                                '4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞–ª—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ (1-10 –ø—É–Ω–∫—Ç–æ–≤)\n'
                                '5. –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∫ –∫–æ–Ω—Ü—É —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏',
                'example': '–ü—Ä–∏–º–µ—Ä: –¢—Ä–µ–π–¥–µ—Ä –∑–∞–º–µ—á–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ü–∏–Ω–±–∞—Ä" –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ GBP/USD. –û–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å —Ü–µ–ª—å—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 5-7 –ø—É–Ω–∫—Ç–æ–≤ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.',
                'image_description': '–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ EUR/USD (M5) –ø–æ–∫–∞–∑–∞–Ω—ã –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–¥–µ–ª–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞–º–∏ –≤ 5-8 –ø—É–Ω–∫—Ç–æ–≤, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ (—Å–∏–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏) –∏ –≤—ã—Ö–æ–¥–∞ (–∑–µ–ª–µ–Ω—ã–µ —Å—Ç—Ä–µ–ª–∫–∏).',
                'pros_cons': '*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n'
                            '‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n'
                            '‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n'
                            '‚úÖ –ú–µ–Ω—å—à–∞—è –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º\n'
                            '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞\n\n'
                            '*–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:*\n'
                            '‚ùå –í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å–ø—Ä–µ–¥—ã –º–æ–≥—É—Ç —Å—ä–µ–¥–∞—Ç—å –ø—Ä–∏–±—ã–ª—å\n'
                            '‚ùå –¢—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏\n'
                            '‚ùå –í—ã—Å–æ–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n'
                            '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ',
                'tools': '*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞:*\n'
                        '‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: cTrader, MetaTrader 5\n'
                        '‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: MACD (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ 5,3,3), Bollinger Bands (10,2), Stochastic (5,3,3)\n'
                        '‚Ä¢ –ë—Ä–æ–∫–µ—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ —Å–ø—Ä–µ–¥–∞–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º\n'
                        '‚Ä¢ –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤'
            },
            'en': {
                'title': '‚ö° Scalping',
                'description': 'Fast-paced trading aimed at capturing small profits from minimal price movements. Characterized by multiple short-term trades throughout the day.',
                'how_it_works': 'How it works:\n'
                                '1. Use of M1-M5 timeframes to find trading opportunities\n'
                                '2. Opening positions during small price impulses or level breakouts\n'
                                '3. Holding positions from a few seconds to a few minutes\n'
                                '4. Using small stop-losses and take-profits (1-10 points)\n'
                                '5. Closing all positions by the end of the trading session',
                'example': 'Example: A trader notices a "Pinbar" pattern forming on the 5-minute GBP/USD chart. They open a position aiming to make 5-7 points and exit the trade within 2-3 minutes.',
                'image_description': 'The EUR/USD chart (M5) shows short scalping trades with take-profits of 5-8 points, marked with entry points (blue arrows) and exit points (green arrows).',
                'pros_cons': '*Advantages:*\n'
                            '‚úÖ Multiple trading opportunities throughout the day\n'
                            '‚úÖ Quick results\n'
                            '‚úÖ Less exposure to unexpected fundamental events\n'
                            '‚úÖ Ability to profit in any market condition\n\n'
                            '*Disadvantages:*\n'
                            '‚ùå High commissions and spreads can eat into profits\n'
                            '‚ùå Requires constant concentration and quick reactions\n'
                            '‚ùå High psychological pressure\n'
                            '‚ùå Need to use high leverage',
                'tools': '*Tools for Scalping:*\n'
                        '‚Ä¢ Platforms: cTrader, MetaTrader 5\n'
                        '‚Ä¢ Indicators: MACD (with settings 5,3,3), Bollinger Bands (10,2), Stochastic (5,3,3)\n'
                        '‚Ä¢ Brokers with low spreads and fast execution\n'
                        '‚Ä¢ Scripts for automatic setting of stop-losses and take-profits'
            },
            'tg': {
                'title': '‚ö° –°–∫–∞–ª–ø–∏–Ω–≥ (Scalping)',
                'description': '–°–∞–≤–¥–æ–∏ –±–æ—Å—É—Ä—ä–∞—Ç –±–æ –º–∞“õ—Å–∞–¥–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞–∏ —Ö—É—Ä–¥ –∞–∑ “≥–∞—Ä–∞–∫–∞—Ç“≥–æ–∏ “∑—É–∑—ä–∏–∏ –Ω–∞—Ä—Ö. –ë–æ –º–∏“õ–¥–æ—Ä–∏ –∑–∏—ë–¥–∏ –º—É–æ–º–∏–ª–∞“≥–æ–∏ –∫”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç –¥–∞—Ä —Ç”Ø–ª–∏ —Ä”Ø–∑ —Ç–∞–≤—Å–∏—Ñ –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥.',
                'how_it_works': '–ß”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥:\n'
                                '1. –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –¥–∞–≤—Ä–∞“≥–æ–∏ –≤–∞“õ—Ç–∏ M1-M5 –±–∞—Ä–æ–∏ —ë—Ñ—Ç–∞–Ω–∏ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ —Å–∞–≤–¥–æ\n'
                                '2. –ö—É—à–æ–¥–∞–Ω–∏ –º–∞–≤“õ–µ—ä“≥–æ “≥–∞–Ω–≥–æ–º–∏ –∏–º–ø—É–ª—Å“≥–æ–∏ —Ö—É—Ä–¥–∏ –Ω–∞—Ä—Ö —ë —Ä–∞—Ö–Ω–∞“≥–æ–∏ —Å–∞—Ç“≥\n'
                                '3. –ù–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞–≤“õ–µ—ä“≥–æ –∞–∑ —è–∫—á–∞–Ω–¥ —Å–æ–Ω–∏—è —Ç–æ —è–∫—á–∞–Ω–¥ –¥–∞“õ–∏“õ–∞\n'
                                '4. –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –¥–∞—Å—Ç—É—Ä“≥–æ–∏ —Ö—É—Ä–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –≤–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (1-10 –ø—É–Ω–∫—Ç)\n'
                                '5. –ë–∞—Å—Ç–∞–Ω–∏ “≥–∞–º–∞–∏ –º–∞–≤“õ–µ—ä“≥–æ —Ç–æ –æ—Ö–∏—Ä–∏ “∑–∞–ª–∞—Å–∞–∏ —Å–∞–≤–¥–æ',
                'example': '–ú–∏—Å–æ–ª: –¢—Ä–µ–π–¥–µ—Ä —Ç–∞—à–∞–∫–∫—É–ª–∏ –Ω–∞–º—É–Ω–∞–∏ "–ü–∏–Ω–±–∞—Ä"-—Ä–æ –¥–∞—Ä –≥—Ä–∞—Ñ–∏–∫–∏ 5-–¥–∞“õ–∏“õ–∞–≥–∏–∏ GBP/USD –º–µ–±–∏–Ω–∞–¥. –í–∞–π –º–∞–≤“õ–µ—ä—Ä–æ –±–æ –º–∞“õ—Å–∞–¥–∏ –±–∞ –¥–∞—Å—Ç –æ–≤–∞—Ä–¥–∞–Ω–∏ 5-7 –ø—É–Ω–∫—Ç –º–µ–∫—É—à–æ—è–¥ –≤–∞ –∞–∑ –º—É–æ–º–∏–ª–∞ –¥–∞—Ä –º—É–¥–¥–∞—Ç–∏ 2-3 –¥–∞“õ–∏“õ–∞ –º–µ–±–∞—Ä–æ—è–¥.',
                'pros_cons': '*–ê—Ñ–∑–∞–ª–∏—è—Ç“≥–æ:*\n'
                            '‚úÖ –ò–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –±–∏—Å—ë—Ä–∏ —Å–∞–≤–¥–æ –¥–∞—Ä —Ç”Ø–ª–∏ —Ä”Ø–∑\n'
                            '‚úÖ –ù–∞—Ç–∏“∑–∞–∏ —Ñ–∞–≤—Ä”£\n'
                            '‚úÖ –û—Å–µ–±–ø–∞–∑–∏—Ä–∏–∏ –∫–∞–º—Ç–∞—Ä –±–∞ —Ä”Ø–π–¥–æ–¥“≥–æ–∏ “ì–∞–π—Ä–∏—á–∞—à–º–¥–æ—à—Ç–∏ –∞—Å–æ—Å”£\n'
                            '‚úÖ –ò–º–∫–æ–Ω–∏—è—Ç–∏ –¥–∞—Ä–æ–º–∞–¥ –¥–∞—Ä “≥–∞—Ä –≥—É–Ω–∞ —à–∞—Ä–æ–∏—Ç–∏ –±–æ–∑–æ—Ä\n\n'
                            '*–ö–∞–º–±—É–¥–∏“≥–æ:*\n'
                            '‚ùå “≤–∞“õ“õ–∏ —Ö–∏–∑–º–∞—Ç –≤–∞ —Å–ø—Ä–µ–¥“≥–æ–∏ –±–∞–ª–∞–Ω–¥ –º–µ—Ç–∞–≤–æ–Ω–∞–Ω–¥ —Ñ–æ–∏–¥–∞—Ä–æ —Ö”Ø—Ä–∞–Ω–¥\n'
                            '‚ùå –¢–∞–º–∞—Ä–∫—É–∑ –≤–∞ –∞–∫—Å—É–ª–∞–º–∞–ª–∏ –¥–æ–∏–º–∏—Ä–æ —Ç–∞–ª–∞–± –º–µ–∫—É–Ω–∞–¥\n'
                            '‚ùå –§–∏—à–æ—Ä–∏ –±–∞–ª–∞–Ω–¥–∏ –ø—Å–∏—Ö–æ–ª–æ–≥”£\n'
                            '‚ùå –ó–∞—Ä—É—Ä–∞—Ç–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ —Ä—ã—á–∞–≥–∏ –±–∞–ª–∞–Ω–¥'
            }
        },
        '–¢—Ä–µ–Ω–¥–æ–≤–∞—è—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': {
            'tg': {
                'title': 'üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Ä—É–π—Ç–∞–º–æ–∏–ª–∏ (Trend Trading)',
                'description': '–°–∞–≤–¥–æ –¥–∞—Ä —Å–∞–º—Ç–∏ —Ä—É–π—Ç–∞–º–æ–∏–ª–∏ –±–æ–∑–æ—Ä. –ü—Ä–∏–Ω—Å–∏–ø–∏ –∞—Å–æ—Å”£ ‚Äî "—Ç–∞–º–æ–∏–ª –¥”Ø—Å—Ç–∏ —à—É–º–æ—Å—Ç".',
                'how_it_works': '–ß”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥:\n'
                                '1. –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ–∏–ª –±–æ —ë—Ä–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ —Ç–µ—Ö–Ω–∏–∫”£ (MA, MACD)\n'
                                '2. –î–æ—Ö–∏–ª—à–∞–≤”£ –¥–∞—Ä —Å–∞–º—Ç–∏ —Ç–∞–º–æ–∏–ª “≥–∞–Ω–≥–æ–º–∏ –∏—Å–ª–æ“≥–∏ –Ω–∞—Ä—Ö“≥–æ\n'
                                '3. –ì—É–∑–æ—à—Ç–∞–Ω–∏ –¥–∞—Å—Ç—É—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–∞—Ä —Ä”Ø–π—Ç–∞–º–æ–∏–ª–∏ –º—É“õ–æ–±–∏–ª\n'
                                '4. –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞ “≥–∞–Ω–≥–æ–º–∏ –¥–∞–≤–æ–º –¥–æ–¥–∞–Ω–∏ —Ä”Ø–π—Ç–∞–º–æ–∏–ª',
                'example': '–ú–∏—Å–æ–ª: “≤–∞–Ω–≥–æ–º–∏ —Ç–∞–º–æ—é–ª–∏ –∞—Ñ–∑–æ–∏—à—ë–±–∞–Ω–¥–∞ –¥–∞—Ä EUR/USD, —Ç—Ä–µ–π–¥–µ—Ä –º–∞–≤“õ–µ–∏ —Ö–∞—Ä–∏–¥—Ä–æ –¥–∞—Ä –≤–∞–∫—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Å–∏—è–∏ —è–∫—É–º —Ç–∞—à–∫–∏–ª –º–µ–∫—É–Ω–∞–¥.',
                'pros_cons': '*–ê—Ñ–∑–∞–ª–∏—è—Ç“≥–æ:*\n'
                            '‚úÖ –ú—É–Ω–æ—Å–∏–± –±–∞—Ä–æ–∏ —Ç—Ä–µ–π–¥–µ—Ä“≥–æ–∏ –Ω–∞–≤–æ–º”Ø–∑\n'
                            '‚úÖ –ú–µ—Ç–∞–≤–æ–Ω–∞–¥ –±–∞—Ä–æ–∏ –º—É–¥–¥–∞—Ç–∏ —Ç”Ø–ª–æ–Ω”£ —Ñ–æ–∏–¥–∞ –æ—Ä–∞–¥\n\n'
                            '*–ö–∞–º–±—É–¥–∏“≥–æ:*\n'
                            '‚ùå –ú—É–º–∫–∏–Ω –∞—Å—Ç –¥–µ—Ä –≥—É–∑–∞—à—Ç–∞–Ω –∞–∑ —Ç–∞–º–æ—é–ª\n'
                            '‚ùå –ó–∞—Ä—É—Ä –±—É–¥–∞–Ω–∏ —Ç–∞“≥–∞–º–º—É–ª –¥–∞—Ä –¥–∞–≤—Ä–∞“≥–æ–∏ –±–æ–∑–æ—Ä–∏ –±–µ—Ä—É–π—Ç–∞–º–æ'
            },
            'ru': {
                'title': 'üìä –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (Trend Trading)',
                'description': '–¢–æ—Ä–≥–æ–≤–ª—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø ‚Äî "—Ç—Ä–µ–Ω–¥ ‚Äî –≤–∞—à –¥—Ä—É–≥".',
                'how_it_works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
                                '1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (MA, MACD)\n'
                                '2. –í—Ö–æ–¥ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è—Ö —Ü–µ–Ω—ã\n'
                                '3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ç—Ä–µ–Ω–¥–∞\n'
                                '4. –§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞',
                'example': '–ü—Ä–∏–º–µ—Ä: –ü—Ä–∏ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –Ω–∞ EUR/USD —Ç—Ä–µ–π–¥–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏.',
                'image_description': '–ù–∞ —ç—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–µ EUR/USD –≤–∏–¥–µ–Ω –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–π. –°–∏–Ω–∏–º–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã –≤ —Ä—ã–Ω–æ–∫, –∫—Ä–∞—Å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ ‚Äî —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å, –∑–µ–ª–µ–Ω—ã–º–∏ ‚Äî —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç.',
                'pros_cons': '*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n'
                            '‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n'
                            '‚úÖ –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n\n'
                            '*–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:*\n'
                            '‚ùå –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–∑–¥–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞\n'
                            '‚ùå –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥—ã –±–µ–∑—Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞'
            },
            'uz': {
                'title': 'üìä Trend strategiyasi (Trend Trading)',
                'description': 'Bozor yo\'nalishi bo\'yicha savdo qilish. Asosiy tamoyil ‚Äî "trend ‚Äî sizning do\'stingiz".',
                'how_it_works': 'Bu qanday ishlaydi:\n'
                                '1. Texnik indikatorlar (MA, MACD) yordamida trendni aniqlash\n'
                                '2. Narx tuzatilganda trend yo\'nalishida kirish\n'
                                '3. Trendning qarama-qarshi tomonida stop-loss o\'rnatish\n'
                                '4. Trend davom etsa, foydani belgilash',
                'example': 'Misol: EUR/USD\'da ko\'tariluvchi trend bo\'lganda, treydir birinchi tuzatishdan keyin uzun pozitsiya ochadi.',
                'pros_cons': '*Afzalliklari:*\n'
                            '‚úÖ Yangi boshlovchilar uchun mos\n'
                            '‚úÖ Uzoq vaqt davomida foyda keltirishi mumkin\n\n'
                            '*Kamchiliklari:*\n'
                            '‚ùå Trendni kech aniqlash mumkin\n'
                            '‚ùå Trendsiz bozor davrlarida sabr talab qiladi'
            },
            'kk': {
                'title': 'üìä –¢—Ä–µ–Ω–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã (Trend Trading)',
                'description': '–ù–∞—Ä—ã“õ —Ç—Ä–µ–Ω–¥—ñ –±–∞“ì—ã—Ç—ã–Ω–¥–∞ —Å–∞—É–¥–∞ –∂–∞—Å–∞—É. –ù–µ–≥—ñ–∑–≥—ñ “õ–∞“ì–∏–¥–∞ ‚Äî "—Ç—Ä–µ–Ω–¥ ‚Äî —Å—ñ–∑–¥—ñ“£ –¥–æ—Å—ã“£—ã–∑".',
                'how_it_works': '–ë“±–ª “õ–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ:\n'
                                '1. –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã“£ (MA, MACD) –∫”©–º–µ–≥—ñ–º–µ–Ω —Ç—Ä–µ–Ω–¥—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É\n'
                                '2. –ë–∞“ì–∞ —Ç“Ø–∑–µ—Ç—ñ–ª–≥–µ–Ω–¥–µ —Ç—Ä–µ–Ω–¥ –±–∞“ì—ã—Ç—ã–Ω–∞ –∫—ñ—Ä—É\n'
                                '3. –¢—Ä–µ–Ω–¥—Ç—ñ“£ “õ–∞—Ä–∞–º–∞-“õ–∞—Ä—Å—ã –∂–∞“ì—ã–Ω–¥–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–Ω–∞—Ç—É\n'
                                '4. –¢—Ä–µ–Ω–¥ –∂–∞–ª“ì–∞—Å—Å–∞, –ø–∞–π–¥–∞–Ω—ã –±–µ–∫—ñ—Ç—É',
                'example': '–ú—ã—Å–∞–ª: EUR/USD –∂“±–±—ã–Ω–¥–∞ –∫”©—Ç–µ—Ä—ñ–ª—É —Ç—Ä–µ–Ω–¥—ñ –±–æ–ª“ì–∞–Ω –∫–µ–∑–¥–µ, —Ç—Ä–µ–π–¥–µ—Ä –±—ñ—Ä—ñ–Ω—à—ñ —Ç“Ø–∑–µ—Ç—É–¥–µ–Ω –∫–µ–π—ñ–Ω “±–∑–∞“õ –ø–æ–∑–∏—Ü–∏—è –∞—à–∞–¥—ã.',
                'pros_cons': '*–ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã:*\n'
                            '‚úÖ –ñ–∞“£–∞–¥–∞–Ω –±–∞—Å—Ç–∞—É—à—ã–ª–∞—Ä“ì–∞ “õ–æ–ª–∞–π–ª—ã\n'
                            '‚úÖ “∞–∑–∞“õ —É–∞“õ—ã—Ç –±–æ–π—ã –ø–∞–π–¥–∞ ”ô–∫–µ–ª—É—ñ –º“Ø–º–∫—ñ–Ω\n\n'
                            '*–ö–µ–º—à—ñ–ª—ñ–∫—Ç–µ—Ä—ñ:*\n'
                            '‚ùå –¢—Ä–µ–Ω–¥—Ç—ñ –∫–µ—à –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω\n'
                            '‚ùå –¢—Ä–µ–Ω–¥—Å—ñ–∑ –Ω–∞—Ä—ã“õ –∫–µ–∑–µ“£—ñ–Ω–¥–µ —Ç”©–∑—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ “õ–∞–∂–µ—Ç –µ—Ç–µ–¥—ñ'
            },
            'en': {
                'title': 'üìä Trend Trading Strategy',
                'description': 'Trading in the direction of the market trend. The main principle is "the trend is your friend".',
                'how_it_works': 'How it works:\n'
                                '1. Identifying the trend using technical indicators (MA, MACD)\n'
                                '2. Entering in the trend direction during price corrections\n'
                                '3. Setting a stop-loss on the opposite side of the trend\n'
                                '4. Taking profit as the trend continues',
                'example': 'Example: In an uptrend on EUR/USD, a trader opens a long position after the first correction.',
                'pros_cons': '*Advantages:*\n'
                            '‚úÖ Suitable for beginners\n'
                            '‚úÖ Can generate profits for a long time\n\n'
                            '*Disadvantages:*\n'
                            '‚ùå Possible late identification of the trend\n'
                            '‚ùå Requires patience during trendless market periods'
            }
        },
        '–°–≤–∏–Ω–≥—Ç—Ä–µ–π–¥–∏–Ω–≥': {
            'ru': {
                'title': 'üîÑ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ (Swing Trading)',
                'description': '–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –Ω–∞—Ü–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –∏–ª–∏ –Ω–µ–¥–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π (—Å–≤–∏–Ω–≥–æ–≤) —Ä—ã–Ω–∫–∞.',
                'how_it_works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
                               '1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (H4, Daily)\n'
                               '2. –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –º–ª–∞–¥—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (H1)\n'
                               '3. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –ø–µ—Ä–∏–æ–¥–æ–º —É–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å\n'
                               '4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∏—Ä–æ–∫–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –¥–ª—è —É—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n'
                               '5. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏',
                'example': '–ü—Ä–∏–º–µ—Ä: –¢—Ä–µ–π–¥–µ—Ä –∑–∞–º–µ—á–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ì–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏" –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ USD/JPY, —É–∫–∞–∑—ã–≤–∞—é—â–µ–≥–æ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞. –û–Ω –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—ã—à–µ "–≥–æ–ª–æ–≤—ã" –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É—è —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–¥–µ–ª–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.',
                'image_description': '–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ GBP/USD (Daily) –æ—Ç–º–µ—á–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: –≤—Ö–æ–¥—ã –ø—Ä–∏ –æ—Ç—Å–∫–æ–∫–∞—Ö –æ—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –≤—ã—à–µ/–Ω–∏–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–∏–Ω–≥–æ–≤.',
                'pros_cons': '*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n'
                           '‚úÖ –ú–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∏ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n'
                           '‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞\n'
                           '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—â–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π\n'
                           '‚úÖ –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥–Ω–µ–≤–Ω—ã–º —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º\n\n'
                           '*–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:*\n'
                           '‚ùå –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö\n'
                           '‚ùå –ü–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–∞–º –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n'
                           '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã\n'
                           '‚ùå –ú–µ–Ω—å—à–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π',
                'tools': '*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞:*\n'
                        '‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "–ì–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏", "–î–≤–æ–π–Ω–æ–π –≤–µ—Ä—Ö/–Ω–∏–∑", "–§–ª–∞–≥"\n'
                        '‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: EMA (8, 21), RSI (14), MACD (12, 26, 9), –§–∏–±–æ–Ω–∞—á—á–∏\n'
                        '‚Ä¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏\n'
                        '‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤'
            },
            'en': {
                'title': 'üîÑ Swing Trading',
                'description': 'A medium-term trading strategy aimed at capturing price changes over several days or weeks. Takes advantage of market swings.',
                'how_it_works': 'How it works:\n'
                               '1. Determine the current trend on higher timeframes (H4, Daily)\n'
                               '2. Look for reversal or continuation points on lower timeframes (H1)\n'
                               '3. Open positions with holding periods from several days to several weeks\n'
                               '4. Use wider stop-losses and take-profits to account for market volatility\n'
                               '5. Partially close positions when certain profit levels are reached',
                'example': 'Example: A trader notices a "Head and Shoulders" pattern forming on the daily USD/JPY chart, indicating a possible trend reversal. They open a short position, setting a stop-loss above the "head" of the pattern and planning to hold the trade for several weeks to reach the target level.',
                'image_description': 'The GBP/USD chart (Daily) shows key swing trading points: entries at bounces from support/resistance levels, stop-losses above/below local extremes, and target levels based on previous swings.',
                'pros_cons': '*Advantages:*\n'
                           '‚úÖ Fewer trades and lower commissions\n'
                           '‚úÖ Does not require constant market monitoring\n'
                           '‚úÖ Can be combined with a full-time job\n'
                           '‚úÖ Higher risk/reward ratio compared to day trading\n\n'
                           '*Disadvantages:*\n'
                           '‚ùå Higher stop-loss size in points\n'
                           '‚ùå Exposure to news event risks\n'
                           '‚ùå Requires more patience and discipline\n'
                           '‚ùå Fewer trading opportunities compared to intraday trading',
                'tools': '*Tools for Swing Trading:*\n'
                        '‚Ä¢ Chart patterns: "Head and Shoulders", "Double Top/Bottom", "Flag"\n'
                        '‚Ä¢ Indicators: EMA (8, 21), RSI (14), MACD (12, 26, 9), Fibonacci\n'
                        '‚Ä¢ Support and resistance levels, key price levels\n'
                        '‚Ä¢ Risk management tools for longer time periods'
            },
            'tg': {
                'title': 'üîÑ –°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ (Swing Trading)',
                'description': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Å–∞–≤–¥–æ–∏ –º–∏—ë–Ω–∞–º—É“≥–ª–∞—Ç, –∫–∏ –±–∞ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞ –∞–∑ —Ç–∞“ì–π–∏—Ä–æ—Ç–∏ –Ω–∞—Ä—Ö –¥–∞—Ä –¥–∞–≤–æ–º–∏ —è–∫—á–∞–Ω–¥ —Ä”Ø–∑ —ë “≥–∞—Ñ—Ç–∞ —Ä–∞–≤–æ–Ω–∞ –∫–∞—Ä–¥–∞ —à—É–¥–∞–∞—Å—Ç. –ê–∑ –∞—Ñ–∑–∞–ª–∏—è—Ç“≥–æ–∏ —Ç–∞“ì–π–∏—Ä–æ—Ç–∏ (—Å–≤–∏–Ω–≥“≥–æ–∏) –±–æ–∑–æ—Ä –∏—Å—Ç–∏—Ñ–æ–¥–∞ –º–µ–±–∞—Ä–∞–¥.',
                'how_it_works': '–ß”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥:\n'
                               '1. –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ—é–ª–∏ “∑–æ—Ä”£ –¥–∞—Ä –¥–∞–≤—Ä–∞“≥–æ–∏ –≤–∞“õ—Ç–∏ –±–∞–ª–∞–Ω–¥—Ç–∞—Ä (H4, Daily)\n'
                               '2. “∂—É—Å—Ç—É“∑”Ø–∏ –Ω—É“õ—Ç–∞“≥–æ–∏ –±–∞—Ä–≥–∞—à—Ç —ë –¥–∞–≤–æ–º–¥–∏“≥–∏–∏ —Ç–∞–º–æ—é–ª –¥–∞—Ä –¥–∞–≤—Ä–∞“≥–æ–∏ –≤–∞“õ—Ç–∏ —Ö—É—Ä–¥—Ç–∞—Ä (H1)\n'
                               '3. –ö—É—à–æ–¥–∞–Ω–∏ –º–∞–≤“õ–µ—ä“≥–æ –±–æ –¥–∞–≤—Ä–∞–∏ –Ω–∏–≥–æ“≥–¥–æ—Ä”£ –∞–∑ —è–∫—á–∞–Ω–¥ —Ä”Ø–∑ —Ç–æ —è–∫—á–∞–Ω–¥ “≥–∞—Ñ—Ç–∞\n'
                               '4. –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –¥–∞—Å—Ç—É—Ä“≥–æ–∏ –≤–∞—Å–µ–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –≤–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –±–∞—Ä–æ–∏ –±–∞ “≥–∏—Å–æ–± –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω–æ—É—Å—Ç—É–≤–æ—Ä–∏–∏ –±–æ–∑–æ—Ä\n'
                               '5. –ë–∞—Å—Ç–∞–Ω–∏ “∑—É–∑—ä–∏–∏ –º–∞–≤“õ–µ—ä“≥–æ “≥–∞–Ω–≥–æ–º–∏ –±–∞ –¥–∞—Å—Ç –æ–≤–∞—Ä–¥–∞–Ω–∏ —Å–∞—Ç“≥“≥–æ–∏ –º—É–∞–π—è–Ω–∏ —Ñ–æ–∏–¥–∞',
                'pros_cons': '*–ê—Ñ–∑–∞–ª–∏—è—Ç“≥–æ:*\n'
                           '‚úÖ –®—É–º–æ—Ä–∞–∏ –∫–∞–º—Ç–∞—Ä–∏ –º—É–æ–º–∏–ª–∞“≥–æ –≤–∞ “≥–∞“õ“õ–∏ –∫–∞–º—Ç–∞—Ä–∏ –∫–æ–º–∏—Å—Å–∏—è\n'
                           '‚úÖ –ù–∞–∑–æ—Ä–∞—Ç–∏ –¥–æ–∏–º–∏–∏ –±–æ–∑–æ—Ä—Ä–æ —Ç–∞–ª–∞–± –Ω–∞–º–µ–∫—É–Ω–∞–¥\n'
                           '‚úÖ –ò–º–∫–æ–Ω–∏—è—Ç–∏ –º—É—Ç—Ç–∞“≥–∏–¥ –∫–∞—Ä–¥–∞–Ω –±–æ –∫–æ—Ä–∏ –∞—Å–æ—Å”£\n'
                           '‚úÖ –¢–∞–Ω–æ—Å—É–±–∏ –±–∞–ª–∞–Ω–¥—Ç–∞—Ä–∏ —Ö–∞–≤—Ñ/—Ñ–æ–∏–¥–∞ –Ω–∏—Å–±–∞—Ç–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∏ —Ä”Ø–∑–æ–Ω–∞\n\n'
                           '*–ö–∞–º–±—É–¥–∏“≥–æ:*\n'
                           '‚ùå –ê–Ω–¥–æ–∑–∞–∏ –±–∞–ª–∞–Ω–¥—Ç–∞—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–∞—Ä –ø—É–Ω–∫—Ç“≥–æ\n'
                           '‚ùå –û—Å–µ–±–ø–∞–∑–∏—Ä”£ –±–∞ —Ö–∞–≤—Ñ“≥–æ–∏ —Ä”Ø–π–¥–æ–¥“≥–æ–∏ —Ö–∞–±–∞—Ä”£\n'
                           '‚ùå –°–∞–±—Ä –≤–∞ –∏–Ω—Ç–∏–∑–æ–º–∏ –±–µ—à—Ç–∞—Ä —Ç–∞–ª–∞–± –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥\n'
                           '‚ùå –ò–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –∫–∞–º—Ç–∞—Ä–∏ —Å–∞–≤–¥–æ –Ω–∏—Å–±–∞—Ç –±–∞ —Å–∞–≤–¥–æ–∏ –¥–æ—Ö–∏–ª–∏—Ä”Ø–∑”£'
            }
        },
        '–ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è—Ç–æ—Ä–≥–æ–≤–ª—è': {
            'ru': {
                'title': 'üìÜ –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (Position Trading)',
                'description': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–µ–ª—å –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ –∏–ª–∏ –¥–∞–∂–µ –ª–µ—Ç. –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ —Ä—ã–Ω–∫–∞.',
                'how_it_works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
                               '1. –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π\n'
                               '2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö\n'
                               '3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n'
                               '4. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞—Å—á–µ—Ç–æ–º –Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã\n'
                               '5. –£–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤',
                'example': '–ü—Ä–∏–º–µ—Ä: –ò–Ω–≤–µ—Å—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –°–®–ê –∏ –ï–≤—Ä–æ–ø—ã, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–ª–ª–∞—Ä–∞. –ù–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ EUR/USD —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥. –¢—Ä–µ–π–¥–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ 1.1200 —Å —Ü–µ–ª—å—é 1.0500 –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤, –ø–µ—Ä–µ–¥–≤–∏–≥–∞—è —Å—Ç–æ–ø-–ª–æ—Å—Å –≤—Å–ª–µ–¥ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã.',
                'image_description': '–ù–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ EUR/USD –ø–æ–∫–∞–∑–∞–Ω –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–¥–∞–∂—É –Ω–∞ –∫–ª—é—á–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. –û—Ç–º–µ—á–µ–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤–Ω–∏–∑ –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è —Ç—Ä–µ–Ω–¥–∞ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ —á–∞—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏.',
                'pros_cons': '*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n'
                           '‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é\n'
                           '‚úÖ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n'
                           '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ä—ã–Ω–∫–∞\n'
                           '‚úÖ –ú–µ–Ω—å—à–∞—è –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–æ—á–Ω–æ–º—É —à—É–º—É –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–º –∫–æ–ª–µ–±–∞–Ω–∏—è–º\n\n'
                           '*–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:*\n'
                           '‚ùå –¢—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞\n'
                           '‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n'
                           '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤\n'
                           '‚ùå –†–∏—Å–∫ —É–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑-–∑–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞',
                'tools': '*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:*\n'
                        '‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ—Ç—á–µ—Ç—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –±–∞–Ω–∫–æ–≤, –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n'
                        '‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: MA (50, 200), MACD –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö\n'
                        '‚Ä¢ –ú–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤: –º–µ—Ç–æ–¥ –î–æ—É, –≤–æ–ª–Ω–æ–≤–∞—è —Ç–µ–æ—Ä–∏—è –≠–ª–ª–∏–æ—Ç—Ç–∞\n'
                        '‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–æ–º –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π'
            },
            'en': {
                'title': 'üìÜ Position Trading',
                'description': 'A long-term trading strategy based on holding positions from several weeks to several months or even years. Focused on identifying and following long-term market trends.',
                'how_it_works': 'How it works:\n'
                               '1. Analysis of fundamental factors and macroeconomic trends\n'
                               '2. Determining the long-term trend on daily and weekly charts\n'
                               '3. Using major support and resistance levels\n'
                               '4. Opening positions calculated for significant price movements\n'
                               '5. Holding trades for an extended period with periodic adjustment of stop-losses',
                'example': 'Example: An investor analyzes economic indicators of the US and Europe, predicting long-term strengthening of the dollar. A downtrend forms on the weekly EUR/USD chart. The trader opens a short position at 1.1200 targeting 1.0500 and holds it for several months, trailing the stop-loss as price moves.',
                'image_description': 'The weekly EUR/USD chart shows a long-term downtrend with a sell entry point at a key resistance level. Gradual movement of the stop-loss downward as the trend develops and several intermediate levels for partial profit-taking are marked.',
                'pros_cons': '*Advantages:*\n'
                           '‚úÖ Minimal time investment in trading\n'
                           '‚úÖ Very low commission expenses\n'
                           '‚úÖ Potential for significant profits from large market movements\n'
                           '‚úÖ Less exposure to market noise and short-term fluctuations\n\n'
                           '*Disadvantages:*\n'
                           '‚ùå Requires substantial trading capital\n'
                           '‚ùå Long waiting period for results\n'
                           '‚ùå Needs deep understanding of fundamental factors\n'
                           '‚ùå Risk of missing other trading opportunities due to tied-up capital',
                'tools': '*Tools for Position Trading:*\n'
                        '‚Ä¢ Fundamental analysis: central bank reports, macroeconomic indicators\n'
                        '‚Ä¢ Technical indicators: MA (50, 200), MACD on weekly charts\n'
                        '‚Ä¢ Methods for determining global trends: Dow Theory, Elliott Wave Theory\n'
                        '‚Ä¢ Capital management tools for long-term positions'
            },
            'tg': {
                'title': 'üìÜ –°–∞–≤–¥–æ–∏ –º–∞–≤“õ–µ”£ (Position Trading)',
                'description': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Å–∞–≤–¥–æ–∏ –¥–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç, –∫–∏ –±–∞ –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–∞–≤“õ–µ—ä“≥–æ –∞–∑ —è–∫—á–∞–Ω–¥ “≥–∞—Ñ—Ç–∞ —Ç–æ —è–∫—á–∞–Ω–¥ –º–æ“≥ —ë “≥–∞—Ç—Ç–æ —Å–æ–ª“≥–æ –∞—Å–æ—Å —ë—Ñ—Ç–∞–∞—Å—Ç. –ë–∞ –º—É–∞–π—è–Ω –≤–∞ –ø–∞–π—Ä–∞–≤”£ –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ—é–ª“≥–æ–∏ –¥–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç–∏ –±–æ–∑–æ—Ä —Ä–∞–≤–æ–Ω–∞ –∫–∞—Ä–¥–∞ —à—É–¥–∞–∞—Å—Ç.',
                'how_it_works': '–ß”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥:\n'
                               '1. –¢–∞“≥–ª–∏–ª–∏ –æ–º–∏–ª“≥–æ–∏ –∞—Å–æ—Å”£ –≤–∞ —Ç–∞–º–æ—é–ª“≥–æ–∏ –º–∞–∫—Ä–æ–∏“õ—Ç–∏—Å–æ–¥”£\n'
                               '2. –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ—é–ª–∏ –¥–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç –¥–∞—Ä –≥—Ä–∞—Ñ–∏–∫“≥–æ–∏ —Ä”Ø–∑–æ–Ω–∞ –≤–∞ “≥–∞—Ñ—Ç–∞–∏–Ω–∞\n'
                               '3. –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ —Å–∞—Ç“≥“≥–æ–∏ –∞—Å–æ—Å–∏–∏ –¥–∞—Å—Ç–≥–∏—Ä”£ –≤–∞ –º—É“õ–æ–≤–∏–º–∞—Ç\n'
                               '4. –ö—É—à–æ–¥–∞–Ω–∏ –º–∞–≤“õ–µ—ä“≥–æ –±–æ “≥–∏—Å–æ–±–∏ “≥–∞—Ä–∞–∫–∞—Ç“≥–æ–∏ –Ω–∞–∑–∞—Ä—Ä–∞—Å–∏ –Ω–∞—Ä—Ö\n'
                               '5. –ù–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º—É–æ–º–∏–ª–∞“≥–æ –¥–∞—Ä —Ç”Ø–ª–∏ –¥–∞–≤—Ä–∞–∏ –¥–∞—Ä–æ–∑ –±–æ —Ç–∞–Ω–∑–∏–º–∏ –¥–∞–≤—Ä–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å“≥–æ',
                'pros_cons': '*–ê—Ñ–∑–∞–ª–∏—è—Ç“≥–æ:*\n'
                           '‚úÖ –°–∞—Ä—Ñ–∏ –∫–∞–º—Ç–∞—Ä–∏–Ω–∏ –≤–∞“õ—Ç –±–∞—Ä–æ–∏ —Å–∞–≤–¥–æ\n'
                           '‚úÖ –•–∞—Ä–æ“∑–æ—Ç–∏ —Ö–µ–ª–µ –ø–∞—Å—Ç–∏ –∫–æ–º–∏—Å—Å–∏–æ–Ω”£\n'
                           '‚úÖ –ò–º–∫–æ–Ω–∏—è—Ç–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞–∏ –Ω–∞–∑–∞—Ä—Ä–∞—Å –∞–∑ “≥–∞—Ä–∞–∫–∞—Ç“≥–æ–∏ –∫–∞–ª–æ–Ω–∏ –±–æ–∑–æ—Ä\n'
                           '‚úÖ –û—Å–µ–±–ø–∞–∑–∏—Ä–∏–∏ –∫–∞–º—Ç–∞—Ä –±–∞ “ì–∞–≤“ì–æ–∏ –±–æ–∑–æ—Ä –≤–∞ —Ç–∞“ì–π–∏—Ä–æ—Ç–∏ –∫”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç\n\n'
                           '*–ö–∞–º–±—É–¥–∏“≥–æ:*\n'
                           '‚ùå –°–∞—Ä–º–æ—è–∏ –Ω–∞–∑–∞—Ä—Ä–∞—Å–∏ —Å–∞–≤–¥–æ—Ä–æ —Ç–∞–ª–∞–± –º–µ–∫—É–Ω–∞–¥\n'
                           '‚ùå –î–∞–≤—Ä–∞–∏ –¥–∞—Ä–æ–∑–∏ –∏–Ω—Ç–∏–∑–æ—Ä–∏–∏ –Ω–∞—Ç–∏“∑–∞“≥–æ\n'
                           '‚ùå –§–∞“≥–º–∏—à–∏ –∞–º–∏“õ–∏ –æ–º–∏–ª“≥–æ–∏ –∞—Å–æ—Å–∏—Ä–æ —Ç–∞–ª–∞–± –º–µ–∫—É–Ω–∞–¥\n'
                           '‚ùå –•–∞–≤—Ñ–∏ –∞–∑ –¥–∞—Å—Ç –¥–æ–¥–∞–Ω–∏ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ –¥–∏–≥–∞—Ä–∏ —Å–∞–≤–¥–æ –±–æ —Å–∞–±–∞–±–∏ —Å–∞—Ä–º–æ—è–∏ –±–∞–Ω–¥'
            }
        },
        '–†–∞–∑–≤–æ—Ä–æ—Ç–Ω–∞—è—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': {
            'tg': {
                'title': 'üìâ –ò–Ω–≤–µ—Ä—Å–∏—è (Reversal Trading)',
                'description': '“∂—É—Å—Ç—É“∑”Ø–∏ –Ω—É“õ—Ç–∞“≥–æ–∏ –≥–∞—Ä–¥–∏—à –≤–∞ —Ç–∞“ì–π–∏—Ä–∏ —Ç–∞–º–æ—é–ª –¥–∞—Ä –±–æ–∑–æ—Ä. –ú—É–æ–º–∏–ª–æ—Ç –¥–∞—Ä —Å–∞–º—Ç–∏ –º—É“õ–æ–±–∏–ª–∏ —Ç–∞–º–æ—é–ª–∏ “∑–æ—Ä”£.',
                'how_it_works': '–ß”£ —Ç–∞–≤—Ä –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥:\n'
                                '1. –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ –Ω—É“õ—Ç–∞“≥–æ–∏ —ç“≥—Ç–∏–º–æ–ª–∏–∏ –≥–∞—Ä–¥–∏—à (“≥–∞–¥–¥–∏ –∞“õ–∞–ª/–º–∞–∫—Å–∏–º—É–º)\n'
                                '2. –¢–∞—Å–¥–∏“õ–∏ –∏–Ω–≤–µ—Ä—Å–∏—è —Ç–∞–≤–∞—Å—Å—É—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ —Ç–µ—Ö–Ω–∏–∫”£\n'
                                '3. –ì—É–∑–æ—à—Ç–∞–Ω–∏ –æ—Ä–¥–µ—Ä –¥–∞—Ä —Å–∞–º—Ç–∏ –º—É“õ–æ–±–∏–ª–∏ —Ç–∞–º–æ—é–ª–∏ “∑–æ—Ä”£\n'
                                '4. –ù–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –ø–æ–∑–∏—Ç—Å–∏—è —Ç–æ —Ç–∞—à–∞–∫–∫—É–ª–∏ —Ç–∞–º–æ—é–ª–∏ –Ω–∞–≤',
                'example': '–ú–∏—Å–æ–ª: “≤–∞–Ω–≥–æ–º–∏ —Ä–∞—Å–∏–¥–∞–Ω –±–∞ —Å–∞—Ç“≥–∏ –º—É“õ–æ–≤–∏–º–∞—Ç–∏ “õ–∞–≤”£ –¥–∞—Ä —Ç–∞–º–æ—é–ª–∏ –∞—Ñ–∑–æ–∏—à, —Ç—Ä–µ–π–¥–µ—Ä –º–∞–≤“õ–µ–∏ —Ñ—É—Ä”Ø—à—Ä–æ —Ç–∞—à–∫–∏–ª –º–µ–∫—É–Ω–∞–¥.',
                'pros_cons': '*–ê—Ñ–∑–∞–ª–∏—è—Ç“≥–æ:*\n'
                            '‚úÖ –ú–µ—Ç–∞–≤–æ–Ω–∞–¥ —Ñ–æ–∏–¥–∞–∏ –∑–∏—ë–¥ –¥–∏“≥–∞–¥\n'
                            '‚úÖ –ò–º–∫–æ–Ω–∏—è—Ç–∏ –¥–æ—Ö–∏–ª—à–∞–≤”£ –¥–∞—Ä –Ω—É“õ—Ç–∞“≥–æ–∏ –æ–ø—Ç–∏–º–∞–ª”£\n\n'
                            '*–ö–∞–º–±—É–¥–∏“≥–æ:*\n'
                            '‚ùå –•–∞–≤—Ñ–∏ –±–∞–ª–∞–Ω–¥ –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç –±—É–¥–∞–Ω–∏ —Ç–∞“≥–ª–∏–ª\n'
                            '‚ùå –¢–∞–ª–∞–± –º–µ–∫—É–Ω–∞–¥ —Ç–∞“∑—Ä–∏–±–∞–∏ –∑–∏—ë–¥'
            },
            'ru': {
                'title': 'üìâ –†–∞–∑–≤–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (Reversal Trading)',
                'description': '–ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –∏ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Ä—ã–Ω–∫–µ. –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ—Ç–∏–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞.',
                'how_it_works': '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n'
                                '1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ (–º–∏–Ω–∏–º—É–º—ã/–º–∞–∫—Å–∏–º—É–º—ã)\n'
                                '2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n'
                                '3. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø—Ä–æ—Ç–∏–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞\n'
                                '4. –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞',
                'example': '–ü—Ä–∏–º–µ—Ä: –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ, —Ç—Ä–µ–π–¥–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é.',
                'image_description': '–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ USD/JPY –≤–∏–¥–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: –¥–≤–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –Ω–∏—Å—Ö–æ–¥—è—â–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º. –ö—Ä–∞—Å–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –æ—Ç–º–µ—á–µ–Ω—ã —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞, —Å–∏–Ω–∏–º–∏ –ª–∏–Ω–∏—è–º–∏ ‚Äî —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å.',
                'pros_cons': '*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n'
                            '‚úÖ –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤—ã—Å–æ–∫—É—é –ø—Ä–∏–±—ã–ª—å\n'
                            '‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö\n\n'
                            '*–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:*\n'
                            '‚ùå –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ\n'
                            '‚ùå –¢—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞'
            },
            'uz': {
                'title': 'üìâ Aylanish strategiyasi (Reversal Trading)',
                'description': 'Bozorda burilish nuqtalarini va trend o\'zgarishlarini qidirish. Joriy trendga qarshi savdo qilish.',
                'how_it_works': 'Bu qanday ishlaydi:\n'
                                '1. Potensial burilish nuqtalarini (minimumlar/maksimumlar) aniqlash\n'
                                '2. Texnik indikatorlar orqali burilishni tasdiqlash\n'
                                '3. Joriy trendga qarshi buyurtma joylashtirish\n'
                                '4. Yangi trend shakllanguncha pozitsiyani ushlab turish',
                'example': 'Misol: Ko\'tariluvchi trendda kuchli qarshilik darajasiga erishilganda, treydir qisqa pozitsiya ochadi.',
                'pros_cons': '*Afzalliklari:*\n'
                            '‚úÖ Yuqori foyda keltirishi mumkin\n'
                            '‚úÖ Optimal nuqtalarda kirish imkoniyati\n\n'
                            '*Kamchiliklari:*\n'
                            '‚ùå Noto\'g\'ri tahlil qilganda yuqori xavf\n'
                            '‚ùå Sezilarli tajriba talab qiladi'
            },
            'kk': {
                'title': 'üìâ –ë“±—Ä—ã–ª—ã—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã (Reversal Trading)',
                'description': '–ù–∞—Ä—ã“õ—Ç–∞ –±“±—Ä—ã–ª—É –Ω“Ø–∫—Ç–µ–ª–µ—Ä—ñ–Ω –∂”ô–Ω–µ —Ç—Ä–µ–Ω–¥ ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä—ñ–Ω —ñ–∑–¥–µ—É. –ê“ì—ã–º–¥–∞“ì—ã —Ç—Ä–µ–Ω–¥–∫–µ “õ–∞—Ä—Å—ã —Å–∞—É–¥–∞ –∂–∞—Å–∞—É.',
                'how_it_works': '–ë“±–ª “õ–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ:\n'
                                '1. ”ò–ª–µ—É–µ—Ç—Ç—ñ –±“±—Ä—ã–ª—ã—Å –Ω“Ø–∫—Ç–µ–ª–µ—Ä—ñ–Ω (–º–∏–Ω–∏–º—É–º–¥–∞—Ä/–º–∞–∫—Å–∏–º—É–º–¥–∞—Ä) –∞–Ω—ã“õ—Ç–∞—É\n'
                                '2. –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä –∞—Ä“õ—ã–ª—ã –±“±—Ä—ã–ª—ã—Å—Ç—ã —Ä–∞—Å—Ç–∞—É\n'
                                '3. –ê“ì—ã–º–¥–∞“ì—ã —Ç—Ä–µ–Ω–¥–∫–µ “õ–∞—Ä—Å—ã –æ—Ä–¥–µ—Ä –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—É\n'
                                '4. –ñ–∞“£–∞ —Ç—Ä–µ–Ω–¥ “õ–∞–ª—ã–ø—Ç–∞—Å“õ–∞–Ω—à–∞ –ø–æ–∑–∏—Ü–∏—è–Ω—ã “±—Å—Ç–∞–ø —Ç“±—Ä—É',
                'example': '–ú—ã—Å–∞–ª: –ö”©—Ç–µ—Ä—ñ–ª—É —Ç—Ä–µ–Ω–¥—ñ–Ω–¥–µ –∫“Ø—à—Ç—ñ “õ–∞—Ä—Å—ã–ª—ã“õ –¥–µ“£–≥–µ–π—ñ–Ω–µ –∂–µ—Ç–∫–µ–Ω–¥–µ, —Ç—Ä–µ–π–¥–µ—Ä “õ—ã—Å“õ–∞ –ø–æ–∑–∏—Ü–∏—è –∞—à–∞–¥—ã.',
                'pros_cons': '*–ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã:*\n'
                            '‚úÖ –ñ–æ“ì–∞—Ä—ã –ø–∞–π–¥–∞ ”ô–∫–µ–ª—É—ñ –º“Ø–º–∫—ñ–Ω\n'
                            '‚úÖ –û“£—Ç–∞–π–ª—ã –Ω“Ø–∫—Ç–µ–ª–µ—Ä–¥–µ –∫—ñ—Ä—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ\n\n'
                            '*–ö–µ–º—à—ñ–ª—ñ–∫—Ç–µ—Ä—ñ:*\n'
                            '‚ùå “ö–∞—Ç–µ —Ç–∞–ª–¥–∞—É –∂–∞—Å–∞“ì–∞–Ω–¥–∞ –∂–æ“ì–∞—Ä—ã —Ç”ô—É–µ–∫–µ–ª\n'
                            '‚ùå –ï–ª–µ—É–ª—ñ —Ç”ô–∂—ñ—Ä–∏–±–µ–Ω—ñ “õ–∞–∂–µ—Ç –µ—Ç–µ–¥—ñ'
            },
            'en': {
                'title': 'üìâ Reversal Trading Strategy',
                'description': 'Looking for turning points and trend changes in the market. Trading against the current trend.',
                'how_it_works': 'How it works:\n'
                                '1. Identifying potential reversal points (lows/highs)\n'
                                '2. Confirming the reversal through technical indicators\n'
                                '3. Placing an order against the current trend\n'
                                '4. Holding the position until a new trend forms',
                'example': 'Example: When reaching a strong resistance level in an uptrend, a trader opens a short position.',
                'pros_cons': '*Advantages:*\n'
                            '‚úÖ Can bring high profits\n'
                            '‚úÖ Opportunity to enter at optimal points\n\n'
                            '*Disadvantages:*\n'
                            '‚ùå High risk with incorrect analysis\n'
                            '‚ùå Requires significant experience'
            }
        },
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    }
    
    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    button_texts = {
        'tg': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è“≥–æ',
        'ru': '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
        'uz': '‚Ü©Ô∏è Strategiyalar ro\'yxatiga qaytish',
        'kk': '‚Ü©Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ –æ—Ä–∞–ª—É',
        'en': '‚Ü©Ô∏è Return to strategies list'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategy_info = None
    for key, info in strategy_details.items():
        if key.lower() == strategy_name.lower():
            strategy_info = info
            break
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not strategy_info:
        await query.edit_message_text(
            "‚ö†Ô∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(button_texts.get(lang_code, button_texts['ru']), callback_data="trading_strategies")
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    strategy_data = strategy_info.get(lang_code, strategy_info['ru'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message = f"*{strategy_data['title']}*\n\n"
    message += f"{strategy_data['description']}\n\n"
    message += f"{strategy_data['how_it_works']}\n\n"
    message += f"*–ü—Ä–∏–º–µ—Ä:*\n{strategy_data['example']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'image_description' in strategy_data:
        message += f"*–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä:*\n{strategy_data['image_description']}\n\n"
    
    message += strategy_data['pros_cons']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton(button_texts.get(lang_code, button_texts['ru']), callback_data="trading_strategies")]]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_otc_pairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OTC Pocket Option –ø–∞—Ä"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        user_data = get_user(user_id)
        if not user_data or not user_data.get('is_approved'):
            await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang_code = user_data.get('language_code', 'tg')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å OTC –ø–∞—Ä–∞–º–∏
        keyboard = []
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ OTC Pocket Option
        keyboard.append([InlineKeyboardButton("üìä OTC POCKET OPTION üìä", callback_data="header_otc_main")])
        
        # === –û–°–ù–û–í–ù–´–ï OTC –ü–ê–†–´ ===
        keyboard.append([InlineKeyboardButton("üåü –û–°–ù–û–í–ù–´–ï OTC –ü–ê–†–´ üåü", callback_data="header_otc_major")])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ OTC –ø–∞—Ä—ã USD
        major_usd_pairs = [
            "EUR/USD OTC", "GBP/USD OTC", "AUD/USD OTC", "NZD/USD OTC", 
            "USD/CAD OTC", "USD/CHF OTC", "USD/JPY OTC", "USD/SGD OTC"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(major_usd_pairs), 2):
            row = []
            row.append(InlineKeyboardButton(major_usd_pairs[i], callback_data=f"otc_{major_usd_pairs[i].replace('/', '_')}"))
            if i + 1 < len(major_usd_pairs):
                row.append(InlineKeyboardButton(major_usd_pairs[i + 1], callback_data=f"otc_{major_usd_pairs[i + 1].replace('/', '_')}"))
            keyboard.append(row)
        
        # === EUR –ö–†–û–°–°-–ö–£–†–°–´ OTC ===
        keyboard.append([InlineKeyboardButton("üí∂ EUR –ö–†–û–°–°-–ö–£–†–°–´ OTC üí∂", callback_data="header_otc_eur")])
        
        # –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã EUR OTC
        eur_pairs = [
            "EUR/GBP OTC", "EUR/JPY OTC", "EUR/CAD OTC", 
            "EUR/AUD OTC", "EUR/NZD OTC", "EUR/SGD OTC"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º EUR –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(eur_pairs), 2):
            row = []
            row.append(InlineKeyboardButton(eur_pairs[i], callback_data=f"otc_{eur_pairs[i].replace('/', '_')}"))
            if i + 1 < len(eur_pairs):
                row.append(InlineKeyboardButton(eur_pairs[i + 1], callback_data=f"otc_{eur_pairs[i + 1].replace('/', '_')}"))
            keyboard.append(row)
        
        # === GBP –ö–†–û–°–°-–ö–£–†–°–´ OTC ===
        keyboard.append([InlineKeyboardButton("üí∑ GBP –ö–†–û–°–°-–ö–£–†–°–´ OTC üí∑", callback_data="header_otc_gbp")])
        
        # –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã GBP OTC
        gbp_pairs = [
            "GBP/JPY OTC", "GBP/CHF OTC", "GBP/AUD OTC", 
            "GBP/CAD OTC", "GBP/NZD OTC"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º GBP –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(gbp_pairs), 2):
            row = []
            row.append(InlineKeyboardButton(gbp_pairs[i], callback_data=f"otc_{gbp_pairs[i].replace('/', '_')}"))
            if i + 1 < len(gbp_pairs):
                row.append(InlineKeyboardButton(gbp_pairs[i + 1], callback_data=f"otc_{gbp_pairs[i + 1].replace('/', '_')}"))
            keyboard.append(row)
        
        # === –î–†–£–ì–ò–ï –ö–†–û–°–°-–ö–£–†–°–´ OTC ===
        keyboard.append([InlineKeyboardButton("üîÑ –î–†–£–ì–ò–ï –ö–†–û–°–°-–ö–£–†–°–´ OTC üîÑ", callback_data="header_otc_other")])
        
        # –î—Ä—É–≥–∏–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã OTC
        other_pairs = [
            "AUD/JPY OTC", "AUD/CAD OTC", "AUD/CHF OTC", "AUD/NZD OTC",
            "CAD/JPY OTC", "CHF/JPY OTC", "NZD/JPY OTC"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(other_pairs), 2):
            row = []
            row.append(InlineKeyboardButton(other_pairs[i], callback_data=f"otc_{other_pairs[i].replace('/', '_')}"))
            if i + 1 < len(other_pairs):
                row.append(InlineKeyboardButton(other_pairs[i + 1], callback_data=f"otc_{other_pairs[i + 1].replace('/', '_')}"))
            keyboard.append(row)
        
        # === –≠–ö–ó–û–¢–ò–ß–ï–°–ö–ò–ï OTC –ü–ê–†–´ ===
        keyboard.append([InlineKeyboardButton("üåç –≠–ö–ó–û–¢–ò–ß–ï–°–ö–ò–ï OTC –ü–ê–†–´ üåç", callback_data="header_otc_exotic")])
        
        # –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ OTC –ø–∞—Ä—ã
        exotic_pairs = [
            "USD/NOK OTC", "USD/SEK OTC", "USD/PLN OTC", "USD/MXN OTC",
            "USD/ZAR OTC", "USD/TRY OTC"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(exotic_pairs), 2):
            row = []
            if i < len(exotic_pairs):
                row.append(InlineKeyboardButton(exotic_pairs[i], callback_data=f"otc_{exotic_pairs[i].replace('/', '_')}"))
            if i + 1 < len(exotic_pairs):
                row.append(InlineKeyboardButton(exotic_pairs[i + 1], callback_data=f"otc_{exotic_pairs[i + 1].replace('/', '_')}"))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(
            "üì± *OTC Pocket Option*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in OTC pairs handler: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_otc_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OTC —Å–∏–≥–Ω–∞–ª–æ–≤"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        user_data = get_user(user_id)
        if not user_data or not user_data.get('is_approved'):
            await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang_code = user_data.get('language_code', 'tg')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        keyboard = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è OTC —Å–∏–≥–Ω–∞–ª–æ–≤
        keyboard.append([InlineKeyboardButton("üîî OTC —Å–∏–≥–Ω–∞–ª—ã", callback_data="header_otc_signals")])
        
        # –î–∞—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        current_time = datetime.now().strftime("%H:%M:%S")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö OTC —Å–∏–≥–Ω–∞–ª–æ–≤
        otc_signals = [
            {"pair": "EUR/USD OTC", "direction": "BUY", "confidence": 78, "expiry": "18:45"},
            {"pair": "GBP/JPY OTC", "direction": "SELL", "confidence": 75, "expiry": "19:00"},
            {"pair": "AUD/CAD OTC", "direction": "BUY", "confidence": 82, "expiry": "19:15"},
            {"pair": "USD/CHF OTC", "direction": "SELL", "confidence": 80, "expiry": "19:30"},
            {"pair": "AUD/USD OTC", "direction": "BUY", "confidence": 79, "expiry": "19:45"},
            {"pair": "EUR/GBP OTC", "direction": "SELL", "confidence": 77, "expiry": "20:00"},
            {"pair": "USD/SGD OTC", "direction": "BUY", "confidence": 81, "expiry": "20:15"},
            {"pair": "CHF/JPY OTC", "direction": "SELL", "confidence": 76, "expiry": "20:30"},
            {"pair": "EUR/AUD OTC", "direction": "BUY", "confidence": 83, "expiry": "20:45"},
            {"pair": "EUR/NZD OTC", "direction": "SELL", "confidence": 79, "expiry": "21:00"}
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        signals_text = f"üì± *OTC Pocket Option –°–∏–≥–Ω–∞–ª—ã*\n\n‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {current_time}\n\n"
        
        for idx, signal in enumerate(otc_signals, 1):
            direction_emoji = "‚¨ÜÔ∏è" if signal["direction"] == "BUY" else "‚¨áÔ∏è"
            signals_text += f"{idx}. {signal['pair']} - {direction_emoji} {signal['direction']} ({signal['confidence']}%) - {signal['expiry']}\n"
        
        signals_text += "\n‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π.*"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="otc_refresh_signals"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="otc_signal_settings")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
        keyboard.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã", callback_data="otc_subscribe")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="return_to_main")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(
            signals_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in OTC signals handler: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_tool_details(update: Update, context: ContextTypes.DEFAULT_TYPE, tool_name: str, lang_code: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ"""
    query = update.callback_query
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    tools_details = {
        '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã': {
            'tg': {
                'title': 'üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ–∏ —Å–∞–≤–¥–æ',
                'description': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ–∏ —Å–∞–≤–¥–æ - –∏–Ω –Ω–∞—Ä–º–∞—Ñ–∑–æ—Ä –±–∞—Ä–æ–∏ –∞–º–∞–ª–∏—ë—Ç–∏ —Å–∞–≤–¥–æ –¥–∞—Ä –±–æ–∑–æ—Ä“≥–æ–∏ –º–æ–ª–∏—è–≤”£.',
                'popular_tools': '*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞“≥–æ–∏ –º–∞—ä–º—É–ª–∏ —Å–∞–≤–¥–æ:*\n\n'
                                '1. *MetaTrader 4/5*\n'
                                '- –ë–∞—Ä—Ç–∞—Ä–∏“≥–æ: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª”£ –±–∞—Ä–æ–∏ —Å–∞–≤–¥–æ–∏ –∞—Å—ä–æ—Ä –≤–∞ CFD\n'
                                '- –•—É—Å—É—Å–∏—è—Ç“≥–æ: –¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£, —Å–∞–≤–¥–æ–∏ –∞–≤—Ç–æ–º–∞—Ç”£ –±–æ —ë—Ä–∏–∏ —Ä–æ–±–æ—Ç“≥–æ\n'
                                '- “≤–∞“õ“õ–∏ –æ–±—É–Ω–∞: —Ä–æ–π–≥–æ–Ω\n\n'
                                '2. *TradingView*\n'
                                '- –ë–∞—Ä—Ç–∞—Ä–∏“≥–æ: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ –ø–µ—à—Ä–∞—Ñ—Ç–∞–∏ –≥—Ä–∞—Ñ–∏–∫”£ –±–æ –∏–º–∫–æ–Ω–∏—è—Ç“≥–æ–∏ —Ç–∞“≥–ª–∏–ª”£\n'
                                '- –•—É—Å—É—Å–∏—è—Ç“≥–æ: –¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£, –º—É–æ—à–∏—Ä–∞—Ç –±–æ “∑–æ–º–µ–∞, —Å–∫—Ä–∏–ø—Ç–Ω–∞–≤–∏—Å”£\n'
                                '- “≤–∞“õ“õ–∏ –æ–±—É–Ω–∞: –ê–∑ $12.95 –¥–∞—Ä —è–∫ –º–æ“≥\n\n'
                                '3. *cTrader*\n'
                                '- –ë–∞—Ä—Ç–∞—Ä–∏“≥–æ: –î–∞—Å—Ç—Ä–∞—Å–∏–∏ –º—É—Å—Ç–∞“õ–∏–º –±–∞ –±–æ–∑–æ—Ä (DMA)\n'
                                '- –•—É—Å—É—Å–∏—è—Ç“≥–æ: –¢–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£, level 2 –¥–µ—Ñ—Ç–∞—Ä–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ\n'
                                '- “≤–∞“õ“õ–∏ –æ–±—É–Ω–∞: —Ä–æ–π–≥–æ–Ω',
                'recommendations': '*–¢–∞–≤—Å–∏—è“≥–æ –±–∞—Ä–æ–∏ –∏–Ω—Ç–∏—Ö–æ–±–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:*\n\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ –Ω–∞–≤–æ–º”Ø–∑–æ–Ω: MetaTrader 4, TradingView\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ —Ç–∞“≥–ª–∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫”£: TradingView\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ —Å–∞–≤–¥–æ–∏ –∞–≤—Ç–æ–º–∞—Ç”£: MetaTrader 5\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥: cTrader, NinjaTrader\n'
                                  '‚ùó “≤–∞—Ç–º–∞–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ä–æ –¥–∞—Ä “≥–∏—Å–æ–±–∏ –Ω–∞–º–æ–∏—à”£ —Å–∞–Ω“∑–µ–¥',
                'examples': '*–ú–∏—Å–æ–ª:* \n'
                           '–î–∞—Ä TradingView, —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ –≥—É–Ω–æ–≥—É–Ω –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥, –≥—Ä–∞—Ñ–∏–∫“≥–æ–∏ –º—É“õ–æ–∏—Å–∞–≤”£ —Å–æ–∑–µ–¥ –≤–∞ –±–æ “∑–æ–º–µ–∞–∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–Ω –º—É–æ—à–∏—Ä–∞—Ç –∫—É–Ω–µ–¥.'
            },
            'ru': {
                'title': 'üìä –¢–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                'description': '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.',
                'popular_tools': '*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n\n'
                                '1. *MetaTrader 4/5*\n'
                                '- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ñ–æ—Ä–µ–∫—Å –∏ CFD\n'
                                '- –§—É–Ω–∫—Ü–∏–∏: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –ø–æ–º–æ—â—å—é —Ä–æ–±–æ—Ç–æ–≤\n'
                                '- –°—Ç–æ–∏–º–æ—Å—Ç—å: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n'
                                '2. *TradingView*\n'
                                '- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏\n'
                                '- –§—É–Ω–∫—Ü–∏–∏: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤\n'
                                '- –°—Ç–æ–∏–º–æ—Å—Ç—å: –û—Ç $12.95 –≤ –º–µ—Å—è—Ü\n\n'
                                '3. *cTrader*\n'
                                '- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä—ã–Ω–∫—É (DMA)\n'
                                '- –§—É–Ω–∫—Ü–∏–∏: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, level 2 —Å—Ç–∞–∫–∞–Ω —Ü–µ–Ω\n'
                                '- –°—Ç–æ–∏–º–æ—Å—Ç—å: –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                'recommendations': '*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n\n'
                                  '‚úÖ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: MetaTrader 4, TradingView\n'
                                  '‚úÖ –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: TradingView\n'
                                  '‚úÖ –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: MetaTrader 5\n'
                                  '‚úÖ –î–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: cTrader, NinjaTrader\n'
                                  '‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ',
                'examples': '*–ü—Ä–∏–º–µ—Ä:* \n'
                           '–í TradingView –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.'
            },
            'uz': {
                'title': 'üìä Savdo platformalari',
                'description': 'Savdo platformalari - moliya bozorlarida savdo operatsiyalarini amalga oshirish uchun dasturiy ta\'minot.',
                'popular_tools': '*Mashhur savdo platformalari:*\n\n'
                                '1. *MetaTrader 4/5*\n'
                                '- Afzalliklari: Forex va CFD savdosi uchun universal platforma\n'
                                '- Imkoniyatlari: Texnik tahlil, robotlar yordamida avtomatik savdo\n'
                                '- Narxi: bepul\n\n'
                                '2. *TradingView*\n'
                                '- Afzalliklari: Analitik imkoniyatlarga ega rivojlangan grafik platforma\n'
                                '- Imkoniyatlari: Texnik tahlil, jamiyat bilan muloqot, skript yozish\n'
                                '- Narxi: Oyiga $12.95 dan\n\n'
                                '3. *cTrader*\n'
                                '- Afzalliklari: Bozorga to\'g\'ridan-to\'g\'ri kirish (DMA)\n'
                                '- Imkoniyatlari: Texnik tahlil, level 2 narx stakani\n'
                                '- Narxi: bepul',
                'recommendations': '*Platforma tanlash bo\'yicha tavsiyalar:*\n\n'
                                  '‚úÖ Yangi boshlanuvchilar uchun: MetaTrader 4, TradingView\n'
                                  '‚úÖ Texnik tahlil uchun: TradingView\n'
                                  '‚úÖ Avtomatik savdo uchun: MetaTrader 5\n'
                                  '‚úÖ Skalping uchun: cTrader, NinjaTrader\n'
                                  '‚ùó Albatta platformani demo hisobida sinab ko\'ring',
                'examples': '*Misol:* \n'
                           'TradingView\'da siz turli indikatorlardan foydalanishingiz, qiyosiy grafiklarni yaratishingiz va treyderlar jamoasi bilan o\'zaro aloqada bo\'lishingiz mumkin.'
            },
            'kk': {
                'title': 'üìä –°–∞—É–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä—ã',
                'description': '–°–∞—É–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä—ã - “õ–∞—Ä–∂—ã –Ω–∞—Ä—ã“õ—Ç–∞—Ä—ã–Ω–¥–∞ —Å–∞—É–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏—è–ª–∞—Ä—ã–Ω –∂“Ø–∑–µ–≥–µ –∞—Å—ã—Ä—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª—ã“õ –∂–∞—Å–∞“õ—Ç–∞–º–∞.',
                'popular_tools': '*–¢–∞–Ω—ã–º–∞–ª —Å–∞—É–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–ª–∞—Ä—ã:*\n\n'
                                '1. *MetaTrader 4/5*\n'
                                '- –ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã: –§–æ—Ä–µ–∫—Å –∂”ô–Ω–µ CFD —Å–∞—É–¥–∞—Å—ã–Ω–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω ”ô–º–±–µ–±–∞–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n'
                                '- –§—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã: –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É, —Ä–æ–±–æ—Ç—Ç–∞—Ä –∞—Ä“õ—ã–ª—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Å–∞—É–¥–∞\n'
                                '- “ö“±–Ω—ã: —Ç–µ–≥—ñ–Ω\n\n'
                                '2. *TradingView*\n'
                                '- –ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞–ª—ã“õ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ –±–∞—Ä –æ–∑—ã“õ –≥—Ä–∞—Ñ–∏–∫–∞–ª—ã“õ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n'
                                '- –§—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã: –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É, “õ–∞—É—ã–º–¥–∞—Å—Ç—ã“õ–ø–µ–Ω “õ–∞—Ä—ã–º-“õ–∞—Ç—ã–Ω–∞—Å, —Å–∫—Ä–∏–ø—Ç –∂–∞–∑—É\n'
                                '- “ö“±–Ω—ã: –ê–π—ã–Ω–∞ $12.95 –±–∞—Å—Ç–∞–ø\n\n'
                                '3. *cTrader*\n'
                                '- –ê—Ä—Ç—ã“õ—à—ã–ª—ã“õ—Ç–∞—Ä—ã: –ù–∞—Ä—ã“õ“õ–∞ —Ç—ñ–∫–µ–ª–µ–π “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É (DMA)\n'
                                '- –§—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã: –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É, level 2 –±–∞“ì–∞ —Å—Ç–∞–∫–∞–Ω—ã\n'
                                '- “ö“±–Ω—ã: —Ç–µ–≥—ñ–Ω',
                'recommendations': '*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–∞“£–¥–∞—É –±–æ–π—ã–Ω—à–∞ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä:*\n\n'
                                  '‚úÖ –ñ–∞“£–∞–¥–∞–Ω –±–∞—Å—Ç–∞—É—à—ã–ª–∞—Ä“ì–∞: MetaTrader 4, TradingView\n'
                                  '‚úÖ –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ —Ç–∞–ª–¥–∞—É “Ø—à—ñ–Ω: TradingView\n'
                                  '‚úÖ –ê–≤—Ç–æ–º–∞—Ç—Ç—ã —Å–∞—É–¥–∞ “Ø—à—ñ–Ω: MetaTrader 5\n'
                                  '‚úÖ –°–∫–∞–ª—å–ø–∏–Ω–≥ “Ø—à—ñ–Ω: cTrader, NinjaTrader\n'
                                  '‚ùó –ú—ñ–Ω–¥–µ—Ç—Ç—ñ —Ç“Ø—Ä–¥–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–Ω—ã –¥–µ–º–æ —à–æ—Ç—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑',
                'examples': '*–ú—ã—Å–∞–ª:* \n'
                           'TradingView-–¥–µ —Å—ñ–∑ ”ô—Ä—Ç“Ø—Ä–ª—ñ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑, —Å–∞–ª—ã—Å—Ç—ã—Ä–º–∞–ª—ã –≥—Ä–∞—Ñ–∏–∫—Ç–µ—Ä –∂–∞—Å–∞–π –∞–ª–∞—Å—ã–∑ –∂”ô–Ω–µ —Ç—Ä–µ–π–¥–µ—Ä–ª–µ—Ä “õ–∞—É—ã–º–¥–∞—Å—Ç—ã“ì—ã–º–µ–Ω ”©–∑–∞—Ä–∞ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Å–µ –∞–ª–∞—Å—ã–∑.'
            },
            'en': {
                'title': 'üìä Trading Platforms',
                'description': 'Trading platforms are software applications that enable trading operations in financial markets.',
                'popular_tools': '*Popular Trading Platforms:*\n\n'
                                '1. *MetaTrader 4/5*\n'
                                '- Advantages: Universal platform for forex and CFD trading\n'
                                '- Features: Technical analysis, automated trading with robots\n'
                                '- Cost: free\n\n'
                                '2. *TradingView*\n'
                                '- Advantages: Advanced charting platform with analytical capabilities\n'
                                '- Features: Technical analysis, community interaction, script writing\n'
                                '- Cost: From $12.95 per month\n\n'
                                '3. *cTrader*\n'
                                '- Advantages: Direct Market Access (DMA)\n'
                                '- Features: Technical analysis, level 2 order book\n'
                                '- Cost: free',
                'recommendations': '*Platform Selection Recommendations:*\n\n'
                                  '‚úÖ For beginners: MetaTrader 4, TradingView\n'
                                  '‚úÖ For technical analysis: TradingView\n'
                                  '‚úÖ For automated trading: MetaTrader 5\n'
                                  '‚úÖ For scalping: cTrader, NinjaTrader\n'
                                  '‚ùó Always test the platform on a demo account',
                'examples': '*Example:* \n'
                           'In TradingView, you can use various indicators, create comparative charts, and interact with the trading community.'
            }
        },
        '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã': {
            'tg': {
                'title': 'üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ —Ç–µ—Ö–Ω–∏–∫”£',
                'description': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ —Ç–µ—Ö–Ω–∏–∫”£ - –≤–æ—Å–∏—Ç–∞“≥–æ–∏ —Ä–∏—ë–∑”£ –±–∞—Ä–æ–∏ —Ç–∞“≥–ª–∏–ª–∏ –Ω–∞—Ä—Ö“≥–æ –≤–∞ “≥–∞“∑–º–∏ –º—É–æ–º–∏–ª–æ—Ç –º–µ–±–æ—à–∞–Ω–¥.',
                'popular_tools': '*–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ–∏ –º–∞—ä–º—É–ª—Ç–∞—Ä–∏–Ω:*\n\n'
                                '1. *–ú–∏—ë–Ω–∞“≥–æ–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞ (MA)*\n'
                                '- –ò—Å—Ç–∏—Ñ–æ–¥–∞: –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ—é–ª –≤–∞ —Å–∞—Ç“≥–∏ –¥–∞—Å—Ç–≥–∏—Ä”£/–º—É“õ–æ–≤–∏–º–∞—Ç\n'
                                '- –ù–∞–º—É–¥“≥–æ: –û–¥–¥”£ (SMA), –≠–∫—Å–ø–æ–Ω–µ–Ω—Å–∏–∞–ª”£ (EMA), –°–∞–º—Ç–∏ “≥–∞—Ä–∞–∫–∞—Ç–∏ –º—É“õ–∞—Ä—Ä–∞—Ä”£ (SMMA)\n\n'
                                '2. *–ò–Ω–¥–µ–∫—Å–∏ –Ω–∏—Å–±–∏–∏ “õ—É–≤–≤–∞ (RSI)*\n'
                                '- –ò—Å—Ç–∏—Ñ–æ–¥–∞: –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ “≥–æ–ª–∞—Ç“≥–æ–∏ –±–æ—Ä–∏–∑–∏ –±–∞—Ä–∑–∏—ë–¥ —Ö–∞—Ä–∏–¥–∞–Ω/—Ñ—É—Ä”Ø—Ö—Ç–∞–Ω\n'
                                '- –î–æ–∏—Ä–∞–∏ —Ç–∞“ì–π–∏—Ä–æ—Ç: –∞–∑ 0 —Ç–æ 100, –±–æ —Å–∞—Ç“≥“≥–æ–∏ –º—É“≥–∏–º–∏ 30 –≤–∞ 70\n\n'
                                '3. *MACD (“≤–∞–º–≥–∏—Ä–æ”£ –≤–∞ —Å—É—Ä—ä–∞—Ç–±–∞—Ö—à–∏–∏ –º–∏—ë–Ω–∞–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞)*\n'
                                '- –ò—Å—Ç–∏—Ñ–æ–¥–∞: –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞–º–æ—é–ª –≤–∞ “õ—É–≤–≤–∞–∏ –æ–Ω\n'
                                '- –¢–∞—à–∫–∏–ª: –§–∞—Ä“õ–∏—è—Ç–∏ –±–∞–π–Ω–∏ EMA-–∏ –∫”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç –≤–∞ –¥–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç',
                'recommendations': '*–¢–∞–≤—Å–∏—è“≥–æ –æ–∏–¥ –±–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ:*\n\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ –Ω–∞–≤–æ–º”Ø–∑–æ–Ω: –ú–∏—ë–Ω–∞“≥–æ–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞ (–ú–ê), RSI\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ —Ç–∞–º–æ—é–ª: –ú–∏—ë–Ω–∞“≥–æ–∏ “≥–∞—Ä–∞–∫–∞—Ç–∫—É–Ω–∞–Ω–¥–∞, MACD, ADX\n'
                                  '‚úÖ –ë–∞—Ä–æ–∏ –æ—Å–∏–ª–ª—è—Ç—Å–∏—è“≥–æ: RSI, –°—Ç–æ—Ö–∞—Å—Ç–∏–∫, CCI\n'
                                  '‚ùó –Ø–≥–æ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 100% —Å–∞–º–∞—Ä–∞–±–∞—Ö—à –Ω–µ—Å—Ç, —Ç–∞–Ω“≥–æ –¥–∞—Ä —è–∫“∑–æ—è–≥”£ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥',
                'examples': '*–ú–∏—Å–æ–ª:* \n'
                           '–ë–∞—Ä–æ–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Ç–∞–º–æ—é–ª”£ —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –º–∞“∑–º”Ø–∏ EMA-20 –≤–∞ EMA-50 –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥ –≤–∞ “≥–∞–Ω–≥–æ–º–∏ —è–∫–¥–∏–≥–∞—Ä—Ä–æ –±—É—Ä–∏–¥–∞ –≥—É–∑–∞—à—Ç–∞–Ω–∏ –æ–Ω“≥–æ —Å–∏–≥–Ω–∞–ª –º–µ–≥–∏—Ä–µ–¥.'
            },
            'ru': {
                'title': 'üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
                'description': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–æ–∫.',
                'popular_tools': '*–û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:*\n\n'
                                '1. *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã*\n'
                                '- –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (MA): SMA, EMA, VWMA, LWMA\n'
                                '- –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: –∫–∞–Ω–∞–ª—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤–æ–π –ª–∏–Ω–∏–µ–π SMA\n'
                                '- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (ADX): –∏–∑–º–µ—Ä—è–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ (0-100)\n'
                                '- –ü–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (SAR): –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—á–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞\n'
                                '- Ichimoku Kinko Hyo: –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞\n\n'
                                
                                '2. *–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã*\n'
                                '- RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã): 0-100, —Å —É—Ä–æ–≤–Ω—è–º–∏ 30/70\n'
                                '- –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä: –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ %K –∏ %D –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n'
                                '- MACD (–ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è/–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö): –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞\n'
                                '- CCI (–ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞): –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n'
                                '- Momentum: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã\n\n'
                                
                                '3. *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–±—ä–µ–º–∞*\n'
                                '- Volume: –±–∞–∑–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤\n'
                                '- OBV (On-Balance Volume): –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø–æ –¥–Ω—è–º\n'
                                '- Money Flow Index (MFI): —Å–æ–≤–º–µ—â–∞–µ—Ç —Ü–µ–Ω—É –∏ –æ–±—ä–µ–º\n'
                                '- Chaikin Money Flow: –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n'
                                
                                '4. *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏*\n'
                                '- ATR (Average True Range): —Å—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã\n'
                                '- Bollinger Bands Width: —à–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞\n'
                                '- Keltner Channels: –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏',
                                
                'recommendations': '*–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:*\n\n'
                                  '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø (3-4 –º–∞–∫—Å–∏–º—É–º)\n'
                                  '‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞:\n'
                                  '   - –¢—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫: MA, MACD, Bollinger Bands, ADX\n'
                                  '   - –ë–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫: RSI, Stochastic, MFI, CCI\n'
                                  '   - –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫: ATR, Bollinger Bands, Keltner Channels\n'
                                  '‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n'
                                  '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞\n'
                                  '‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n'
                                  '‚ùó –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–Ω–∞—Å—ã—â–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏\n'
                                  '‚ùó –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤\n'
                                  '‚ùó –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤',
                                  
                'examples': '*–ü—Ä–∏–º–µ—Ä—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:*\n\n'
                           '1. *–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:*\n'
                           '- –í—Ö–æ–¥: –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–∞—è MA (EMA-9) –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é (EMA-21) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö\n'
                           '- –í—ã—Ö–æ–¥: –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–∞—è MA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –∏–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏\n'
                           '- Stop-loss: –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞\n\n'
                           
                           '2. *–°—Ç—Ä–∞—Ç–µ–≥–∏—è RSI —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:*\n'
                           '- –í—Ö–æ–¥ –≤ –ª–æ–Ω–≥: RSI –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (–≤—ã—à–µ 30), —Ü–µ–Ω–∞ –≤—ã—à–µ EMA-50\n'
                           '- –í—Ö–æ–¥ –≤ —à–æ—Ä—Ç: RSI –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–∏–∂–µ 70), —Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA-50\n'
                           '- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: Stop-loss –Ω–∞ —É—Ä–æ–≤–Ω–µ 1.5xATR –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞\n\n'
                           
                           '3. *–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ Bollinger Bands:*\n'
                           '- –û—Ç—Å–∫–æ–∫: –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ø—Ä–∏ –æ–±—â–µ–º —Ä–∞—Å—Ç—É—â–µ–º —Ç—Ä–µ–Ω–¥–µ\n'
                           '- –ü—Ä–æ–±–æ–π: –≤—Ö–æ–¥ –ø—Ä–∏ –ø—Ä–æ–±–æ–µ –≤–µ—Ä—Ö–Ω–µ–π/–Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è –∫–∞–Ω–∞–ª–∞\n'
                           '- –¢–∞—Ä–≥–µ—Ç: –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ø–æ–ª–æ—Å–∞ –∏–ª–∏ —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è'
            },
            'uz': {
                'title': 'üìà Texnik indikatorlar',
                'description': 'Texnik indikatorlar - narxlar va savdo hajmini tahlil qilish uchun matematik vositalar.',
                'popular_tools': '*Eng mashhur indikatorlar:*\n\n'
                                '1. *Harakatlanuvchi o\'rtachalar (MA)*\n'
                                '- Foydalanish: Trend va qo\'llab-quvvatlash/qarshilik darajalarini aniqlash\n'
                                '- Turlari: Oddiy (SMA), Eksponensial (EMA), Silliqlangan (SMMA)\n\n'
                                '2. *Nisbiy kuch indeksi (RSI)*\n'
                                '- Foydalanish: Haddan tashqari sotib olish/sotish holatlarini aniqlash\n'
                                '- Diapazon: 0 dan 100 gacha, asosiy darajalar 30 va 70\n\n'
                                '3. *MACD (Harakatlanuvchi o\'rtachalarning yaqinlashishi/farqlanishi)*\n'
                                '- Foydalanish: Trend va uning kuchini aniqlash\n'
                                '- Tarkib: Qisqa muddatli va uzoq muddatli EMA o\'rtasidagi farq',
                'recommendations': '*Indikatorlardan foydalanish bo\'yicha tavsiyalar:*\n\n'
                                  '‚úÖ Yangi boshlanuvchilar uchun: Harakatlanuvchi o\'rtachalar (MA), RSI\n'
                                  '‚úÖ Trendni aniqlash uchun: MA, MACD, ADX\n'
                                  '‚úÖ Ossillyatorlar uchun: RSI, Stoxastik, CCI\n'
                                  '‚ùó Hech bir indikator 100% samaradorlik bermaydi, ularni birgalikda ishlating',
                'examples': '*Misol:* \n'
                           'Trend strategiyasi uchun siz EMA-20 va EMA-50 kombinatsiyasidan foydalanishingiz mumkin, ular kesishganda signal olasiz.'
            },
            'kk': {
                'title': 'üìà –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä',
                'description': '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä - –±–∞“ì–∞–ª–∞—Ä –º–µ–Ω —Å–∞—É–¥–∞ –∫”©–ª–µ–º—ñ–Ω —Ç–∞–ª–¥–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã“õ “õ“±—Ä–∞–ª–¥–∞—Ä.',
                'popular_tools': '*–ï“£ —Ç–∞–Ω—ã–º–∞–ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä:*\n\n'
                                '1. *–ñ—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞–ª–∞—Ä (MA)*\n'
                                '- “ö–æ–ª–¥–∞–Ω—É: –¢—Ä–µ–Ω–¥—Ç—ñ –∂”ô–Ω–µ “õ–æ–ª–¥–∞—É/“õ–∞—Ä—Å—ã–ª—ã“õ –¥–µ“£–≥–µ–π–ª–µ—Ä—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É\n'
                                '- –¢“Ø—Ä–ª–µ—Ä—ñ: “ö–∞—Ä–∞–ø–∞–π—ã–º (SMA), –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª–¥—ã (EMA), –¢–µ–≥—ñ—Å—Ç–µ–ª–≥–µ–Ω (SMMA)\n\n'
                                '2. *–°–∞–ª—ã—Å—Ç—ã—Ä–º–∞–ª—ã –∫“Ø—à –∏–Ω–¥–µ–∫—Å—ñ (RSI)*\n'
                                '- “ö–æ–ª–¥–∞–Ω—É: –®–∞–º–∞–¥–∞–Ω —Ç—ã—Å —Å–∞—Ç—ã–ø –∞–ª—É/—Å–∞—Ç—É –∂–∞“ì–¥–∞–π–ª–∞—Ä—ã–Ω –∞–Ω—ã“õ—Ç–∞—É\n'
                                '- –î–∏–∞–ø–∞–∑–æ–Ω: 0-–¥–µ–Ω 100-–≥–µ –¥–µ–π—ñ–Ω, –º–∞“£—ã–∑–¥—ã –¥–µ“£–≥–µ–π–ª–µ—Ä 30 –∂”ô–Ω–µ 70\n\n'
                                '3. *MACD (–ñ—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞–ª–∞—Ä–¥—ã“£ –∂–∞“õ—ã–Ω–¥–∞—Å—É—ã/–∞–π—ã—Ä–º–∞—à—ã–ª—ã“ì—ã)*\n'
                                '- “ö–æ–ª–¥–∞–Ω—É: –¢—Ä–µ–Ω–¥—Ç—ñ –∂”ô–Ω–µ –æ–Ω—ã“£ –∫“Ø—à—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É\n'
                                '- “ö“±—Ä–∞–º—ã: “ö—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥—ñ –∂”ô–Ω–µ “±–∑–∞“õ –º–µ—Ä–∑—ñ–º–¥—ñ EMA –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –∞–π—ã—Ä–º–∞—à—ã–ª—ã“õ',
                'recommendations': '*–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É –±–æ–π—ã–Ω—à–∞ “±—Å—ã–Ω—ã—Å—Ç–∞—Ä:*\n\n'
                                  '‚úÖ –ñ–∞“£–∞–¥–∞–Ω –±–∞—Å—Ç–∞—É—à—ã–ª–∞—Ä“ì–∞: –ñ—ã–ª–∂—ã–º–∞–ª—ã –æ—Ä—Ç–∞—à–∞–ª–∞—Ä (MA), RSI\n'
                                  '‚úÖ –¢—Ä–µ–Ω–¥—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω: MA, MACD, ADX\n'
                                  '‚úÖ –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–ª–∞—Ä “Ø—à—ñ–Ω: RSI, –°—Ç–æ—Ö–∞—Å—Ç–∏–∫, CCI\n'
                                  '‚ùó –ï—à–±—ñ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä 100% —Ç–∏—ñ–º–¥—ñ–ª—ñ–∫ –±–µ—Ä–º–µ–π–¥—ñ, –æ–ª–∞—Ä–¥—ã –±—ñ—Ä–≥–µ “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑',
                'examples': '*–ú—ã—Å–∞–ª:* \n'
                           '–¢—Ä–µ–Ω–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Å—ã “Ø—à—ñ–Ω —Å—ñ–∑ EMA-20 –∂”ô–Ω–µ EMA-50 –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Å—ã–Ω “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑, –æ–ª–∞—Ä “õ–∏—ã–ª—ã—Å“õ–∞–Ω–¥–∞ —Å–∏–≥–Ω–∞–ª –∞–ª–∞—Å—ã–∑.'
            },
            'en': {
                'title': 'üìà Technical Indicators',
                'description': 'Technical indicators are mathematical tools for analyzing price and volume data. They help traders identify market trends, entry and exit points for trades.',
                'popular_tools': '*Main Indicator Categories:*\n\n'
                                '1. *Trend Indicators*\n'
                                '- Moving Averages (MA): SMA, EMA, VWMA, LWMA\n'
                                '- Bollinger Bands: volatility channels with SMA baseline\n'
                                '- Directional Movement (ADX): measures trend strength (0-100)\n'
                                '- Parabolic SAR: identifies potential trend reversal points\n'
                                '- Ichimoku Kinko Hyo: comprehensive system for trend analysis\n\n'
                                
                                '2. *Oscillators*\n'
                                '- RSI (Relative Strength Index): 0-100, with 30/70 levels\n'
                                '- Stochastic Oscillator: two parameters %K and %D for confirmation\n'
                                '- MACD (Moving Average Convergence/Divergence): histogram\n'
                                '- CCI (Commodity Channel Index): identifies strong movements\n'
                                '- Momentum: shows rate of price change\n\n'
                                
                                '3. *Volume Indicators*\n'
                                '- Volume: basic trading volume indicator\n'
                                '- OBV (On-Balance Volume): accumulated volume by day\n'
                                '- Money Flow Index (MFI): combines price and volume\n'
                                '- Chaikin Money Flow: money flows over a specified period\n\n'
                                
                                '4. *Volatility Indicators*\n'
                                '- ATR (Average True Range): average true price range\n'
                                '- Bollinger Bands Width: width of Bollinger Bands\n'
                                '- Keltner Channels: channels for measuring volatility',
                                
                'recommendations': '*Practical Recommendations for Working with Indicators:*\n\n'
                                  '‚úÖ Use multiple indicators from different groups (3-4 maximum)\n'
                                  '‚úÖ Adapt indicators to current market conditions:\n'
                                  '   - Trending market: MA, MACD, Bollinger Bands, ADX\n'
                                  '   - Ranging market: RSI, Stochastic, MFI, CCI\n'
                                  '   - Volatile market: ATR, Bollinger Bands, Keltner Channels\n'
                                  '‚úÖ Experiment with indicator parameter settings\n'
                                  '‚úÖ Use indicators to confirm signals from chart analysis\n'
                                  '‚úÖ Develop clear entry and exit rules based on indicator readings\n'
                                  '‚ùó Avoid overcrowding your chart with indicators\n'
                                  '‚ùó Always confirm indicator signals with chart analysis\n'
                                  '‚ùó Regularly evaluate the effectiveness of chosen indicators',
                                  
                'examples': '*Examples of Trading Strategies with Indicators:*\n\n'
                           '1. *Moving Average Crossover:*\n'
                           '- Entry: when fast MA (EMA-9) crosses slow MA (EMA-21) from below\n'
                           '- Exit: when fast MA crosses slow MA from above or target profit is reached\n'
                           '- Stop-loss: at the level of the last local minimum\n\n'
                           
                           '2. *RSI Strategy with Confirmation:*\n'
                           '- Long entry: RSI exits oversold zone (above 30), price above EMA-50\n'
                           '- Short entry: RSI exits overbought zone (below 70), price below EMA-50\n'
                           '- Risk management: Stop-loss at 1.5xATR from entry point\n\n'
                           
                           '3. *Bollinger Bands Trading:*\n'
                           '- Bounce: buy when price touches the lower band in an overall uptrend\n'
                           '- Breakout: enter when price breaks upper/lower band after band contraction\n'
                           '- Target: opposite band or middle line'
            }
        },
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ—Ä–∏—Å–∫–∞–º–∏': {
            'tg': {
                'title': 'üí∞ –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ',
                'description': '–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ - —É—Å—É–ª“≥–æ–∏ –ø–∞—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞—Ä–∞—Ä–∏ —ç“≥—Ç–∏–º–æ–ª”£ –≤–∞ –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ —Å–∞—Ä–º–æ—è.',
                'popular_tools': '*–í–æ—Å–∏—Ç–∞“≥–æ–∏ –∞—Å–æ—Å–∏–∏ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ:*\n\n'
                                '1. *–°—Ç–æ–ø-–ª–æ—Å—Å*\n'
                                '- –¢–∞—ä–∏–Ω–æ—Ç: –ú–∞“≥–¥—É–¥ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞—Ä–∞—Ä –¥–∞—Ä “≥–æ–ª–∞—Ç–∏ “≥–∞—Ä–∞–∫–∞—Ç–∏ –Ω–∞—Ä—Ö“≥–æ –±–∞—Ä –∑–∏–¥–¥–∏ –º–∞–≤“õ–µ–∏ —à—É–º–æ\n'
                                '- –ù–∞–≤—ä“≥–æ: –°—Ç–∞—Ç–∏–∫”£, —Ç–∞“ì–π–∏—Ä—ë–±–∞–Ω–¥–∞, —Ñ–æ–∏–∑–Ω–æ–∫\n\n'
                                '2. *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç*\n'
                                '- –¢–∞—ä–∏–Ω–æ—Ç: –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–æ–∏–¥–∞ –¥–∞—Ä —Å–∞—Ç“≥–∏ –º–∞“õ—Å–∞–¥–Ω–æ–∫\n'
                                '- –ù–∞–º—É–¥“≥–æ: –°—Ç–∞—Ç–∏–∫”£, –±–∏—Å—ë—Ä—Å–∞—Ç“≥”£, —Ñ–æ–∏–∑–Ω–æ–∫\n\n'
                                '3. *“≤–∞“∑–º–∏ –º–∞–≤“õ–µ—ä*\n'
                                '- –¢–∞—ä–∏–Ω–æ—Ç: –ú—É–∞–π—è–Ω –∫–∞—Ä–¥–∞–Ω–∏ –º–∏“õ–¥–æ—Ä–∏ –¥—É—Ä—É—Å—Ç–∏ –≤–æ—Å–∏—Ç–∞–∏ –º–æ–ª–∏—è–≤”£ –±–∞—Ä–æ–∏ —Å–∞–≤–¥–æ\n'
                                '- “≤–∏—Å–æ–±–∫—É–Ω”£: –î–∞—Ä –∞—Å–æ—Å–∏ –∞–Ω–¥–æ–∑–∞–∏ “≥–∏—Å–æ–±, —Ö–∞–≤—Ñ–∏ –º—É–æ–º–∏–ª–∞ –≤–∞ –±–∞—Ä–æ–º–∞–¥–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å',
                'recommendations': '*–¢–∞–≤—Å–∏—è“≥–æ –æ–∏–¥ –±–∞ –∏–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ:*\n\n'
                                  '‚úÖ –î–∞—Ä —è–∫ —Å–∞–≤–¥–æ –Ω–∞ –∑–∏—ë–¥–∞ –∞–∑ 1-2% –∞–∑ –º–∞–±–ª–∞“ì–∏ —É–º—É–º–∏—Ä–æ —Ç–∞–≤–∞–∫–∫–∞–ª –∫—É–Ω–µ–¥\n'
                                  '‚úÖ “≤–∞–º–µ—à–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å –≥—É–∑–æ—Ä–µ–¥\n'
                                  '‚úÖ –¢–∞–Ω–æ—Å—É–±–∏ —Ö–∞–≤—Ñ/—Ñ–æ–∏–¥–∞ –∫–∞–º–∞—à 1:2 –±–æ—à–∞–¥\n'
                                  '‚úÖ “≤–∞–Ω–≥–æ–º–∏ –±–æ–∑–æ—Ä–∏ –ø—É—Ä—Ç–∞–ª–æ—Ç—É–º –∞–Ω–¥–æ–∑–∞–∏ –º–∞–≤“õ–µ—ä—Ä–æ –ø–∞—Å—Ç –∫—É–Ω–µ–¥\n'
                                  '‚ùó –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ —Ö–∞–≤—Ñ –∞–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–∏ —Å–∞–≤–¥–æ –º—É“≥–∏–º—Ç–∞—Ä –∞—Å—Ç',
                'examples': '*–ú–∏—Å–æ–ª:* \n'
                           '–ê–≥–∞—Ä —à—É–º–æ “≥–∏—Å–æ–±–∏ $10,000 –¥–æ—à—Ç–∞, 1% —Ö–∞–≤—Ñ—Ä–æ “õ–∞–±—É–ª –∫—É–Ω–µ–¥, –æ–Ω –≥–æ“≥ –¥–∞—Ä —è–∫ —Å–∞–≤–¥–æ –Ω–∞ –±–µ—à—Ç–∞—Ä –∞–∑ $100 —Ö–∞–≤—Ñ –∫—É–Ω–µ–¥. –ê–≥–∞—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å —à—É–º–æ 10 –ø–∏–ø—Å –±–æ—à–∞–¥, —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ 1 –ª–æ—Ç —Å–∞–≤–¥–æ –∫—É–Ω–µ–¥.'
            },
            'ru': {
                'title': 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
                'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç–æ–¥–æ–≤ –∏ –ø—Ä–∏–µ–º–æ–≤ —Å–Ω–∏–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞. –≠—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –Ω–µ–∏–∑–±–µ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —É–±—ã—Ç–∫–æ–≤.',
                'popular_tools': '*–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:*\n\n'
                                '1. *–û—Ä–¥–µ—Ä–∞ –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞*\n'
                                '- *–°—Ç–æ–ø-–ª–æ—Å—Å* - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏\n'
                                '  ‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ\n'
                                '  ‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥ - —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ü–µ–Ω–æ–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏\n'
                                '  ‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π - –º—ã—Å–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n\n'
                                '- *–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç* - —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ\n'
                                '  ‚Ä¢ –û–¥–∏–Ω–æ—á–Ω—ã–π - —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Å—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ\n'
                                '  ‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π - —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö\n\n'
                                
                                '2. *–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏*\n'
                                '- –§–æ—Ä–º—É–ª–∞: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = (–ö–∞–ø–∏—Ç–∞–ª √ó % —Ä–∏—Å–∫–∞) √∑ (–†–∞–∑–º–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö √ó –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–∞)\n'
                                '- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –ø–æ–∑–∏—Ü–∏–π - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞\n'
                                '- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏\n\n'
                                
                                '3. *–¢–µ—Ö–Ω–∏–∫–∏ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏*\n'
                                '- –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–≤–∞–ª—é—Ç—ã, –∞–∫—Ü–∏–∏, —Ç–æ–≤–∞—Ä—ã)\n'
                                '- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –∞–∫—Ç–∏–≤–æ–≤\n'
                                '- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏\n\n'
                                
                                '4. *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º*\n'
                                '- –ü—Ä–∏–Ω—Ü–∏–ø —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–æ—Å—Ç–æ–º –∫–∞–ø–∏—Ç–∞–ª–∞\n'
                                '- –ú–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–±—ã–ª–∏ - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n'
                                '- –ó–∞—â–∏—Ç–∞ –æ—Ç "–ø—Ä–æ—Å–∞–¥–∫–∏" - –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π\n\n'
                                
                                '5. *–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã*\n'
                                '- –¢–æ—Ä–≥–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª –∏ –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫\n'
                                '- –¢–µ—Ö–Ω–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —ç–º–æ—Ü–∏–π –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π\n'
                                '- –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–ª–∞–Ω—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞',
                                
                'recommendations': '*–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏:*\n\n'
                                  '‚úÖ *–ü—Ä–∞–≤–∏–ª–æ 1-2%*: —Ä–∏—Å–∫—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1-2% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É\n'
                                  '‚úÖ *–ü—Ä–∞–≤–∏–ª–æ 6%*: –æ–±—â–∏–π —Ä–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 6% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞\n'
                                  '‚úÖ *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å*: —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –Ω–µ –º–µ–Ω–µ–µ 1:2 –∏–ª–∏ 1:3\n'
                                  '‚úÖ *–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞*: —É–º–µ–Ω—å—à–∞–π—Ç–µ —Ä–∏—Å–∫ –≤ –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n'
                                  '‚úÖ *–õ–µ—Å—Ç–Ω–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥*: —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞\n'
                                  '‚úÖ *–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è*: –∏–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –≤—ã—Å–æ–∫–æ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö\n'
                                  '‚úÖ *–ü—Ä–∞–≤–∏–ª–æ —Å–µ—Ä–∏–π*: –ø–æ—Å–ª–µ 2-3 —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥, —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏\n'
                                  '‚ùó *–ü—Ä–∞–≤–∏–ª–æ "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å"*: –∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º - –æ—Ç–∫–∞–∑ –æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö',
                                  
                'examples': '*–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:*\n\n'
                           '1. *–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏*\n'
                           '   –î–µ–ø–æ–∑–∏—Ç: $10,000 | –†–∏—Å–∫: 1% ($100) | –°—Ç–æ–ø-–ª–æ—Å—Å: 50 –ø—É–Ω–∫—Ç–æ–≤ | –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–∞: $1\n'
                           '   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = $100 √∑ (50 √ó $1) = 2 –º–∏–Ω–∏-–ª–æ—Ç–∞\n\n'
                           
                           '2. *–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏*\n'
                           '   –í—Ö–æ–¥: 1.2000 | –°—Ç–æ–ø-–ª–æ—Å—Å: 1.1950 (—Ä–∏—Å–∫ 50 –ø—É–Ω–∫—Ç–æ–≤)\n'
                           '   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 1: 1.2050 (50% –ø–æ–∑–∏—Ü–∏–∏, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1)\n'
                           '   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2: 1.2100 (50% –ø–æ–∑–∏—Ü–∏–∏, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2)\n'
                           '   –ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP1, –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ (1.2000)\n\n'
                           
                           '3. *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ*\n'
                           '   –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 5%: —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 25%\n'
                           '   –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 10%: —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 50%\n'
                           '   –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 15%: —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é'
            },
            'en': {
                'title': 'üí∞ Risk Management',
                'description': 'Risk management is a system of methods and techniques for reducing potential losses and preserving trading capital. It is a fundamental aspect of successful trading that allows you to trade for extended periods and overcome inevitable periods of losses.',
                'popular_tools': '*Comprehensive Risk Management System:*\n\n'
                                '1. *Capital Protection Orders*\n'
                                '- *Stop-Loss* - limits the maximum loss on a position\n'
                                '  ‚Ä¢ Fixed - set at a specific price level\n'
                                '  ‚Ä¢ Trailing - follows the price, ensuring profit lock-in\n'
                                '  ‚Ä¢ Mental - a mental level without placing an actual order (not recommended)\n\n'
                                '- *Take-Profit* - locks in profit at a target level\n'
                                '  ‚Ä¢ Single - closes the entire position at one level\n'
                                '  ‚Ä¢ Multi-level - partial closure at different levels\n\n'
                                
                                '2. *Position Sizing Calculation*\n'
                                '- Formula: Position Size = (Capital √ó % Risk) √∑ (Stop-Loss in Points √ó Point Value)\n'
                                '- Position calculators - tools for precise calculation\n'
                                '- Automated trading systems with built-in position size management\n\n'
                                
                                '3. *Diversification Techniques*\n'
                                '- Trading different instruments (currencies, stocks, commodities)\n'
                                '- Using non-correlating assets\n'
                                '- Distributing capital across various strategies\n\n'
                                
                                '4. *Capital Management*\n'
                                '- Compound interest principle - increasing position size as capital grows\n'
                                '- Profit withdrawal methods - strategy for partial withdrawal of funds\n'
                                '- Drawdown protection - rules for reducing position sizes\n\n'
                                
                                '5. *Psychological Aspects*\n'
                                '- Trading journal and trade analysis\n'
                                '- Emotion control techniques and decision making\n'
                                '- Following a trading plan and discipline',
                                
                'recommendations': '*Best Risk Management Practices:*\n\n'
                                  '‚úÖ *1-2% Rule*: risk no more than 1-2% of capital per trade\n'
                                  '‚úÖ *6% Rule*: total risk of open positions should not exceed 6% of capital\n'
                                  '‚úÖ *Risk/Reward Ratio*: aim for a ratio of at least 1:2 or 1:3\n'
                                  '‚úÖ *Risk Reduction*: decrease risk during periods of high volatility or after a series of losing trades\n'
                                  '‚úÖ *Tiered Exit*: lock in partial profits at different levels to reduce risk\n'
                                  '‚úÖ *Correlation*: avoid opening similar positions in highly correlated instruments\n'
                                  '‚úÖ *Series Rule*: after 2-3 consecutive losing trades, take a break or reduce position size\n'
                                  '‚ùó *"Do Nothing" Rule*: sometimes the best risk management is to avoid trading in difficult conditions',
                                  
                'examples': '*Practical Application Examples:*\n\n'
                           '1. *Position Size Calculation*\n'
                           '   Account: $10,000 | Risk: 1% ($100) | Stop-Loss: 50 points | Point Value: $1\n'
                           '   Position Size = $100 √∑ (50 √ó $1) = 2 mini lots\n\n'
                           
                           '2. *Multi-Level Position Exit*\n'
                           '   Entry: 1.2000 | Stop-Loss: 1.1950 (50 points risk)\n'
                           '   Take-Profit 1: 1.2050 (50% of position, ratio 1:1)\n'
                           '   Take-Profit 2: 1.2100 (50% of position, ratio 1:2)\n'
                           '   After TP1 is reached, move Stop-Loss to breakeven (1.2000)\n\n'
                           
                           '3. *Capital Management During Drawdown*\n'
                           '   At 5% drawdown: reduce position size by 25%\n'
                           '   At 10% drawdown: reduce position size by 50%\n'
                           '   At 15% drawdown: take a break and review strategy'
            }
        }
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    }
    
    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    button_texts = {
        'tg': '‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ –∞–±–∑–æ—Ä“≥–æ',
        'ru': '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
        'uz': '‚Ü©Ô∏è Vositalar ro\'yxatiga qaytish',
        'kk': '‚Ü©Ô∏è “ö“±—Ä–∞–ª–¥–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ –æ—Ä–∞–ª—É',
        'en': '‚Ü©Ô∏è Return to tools list'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
    tool_info = None
    for key, info in tools_details.items():
        if key.lower() == tool_name.lower():
            tool_info = info
            break
    
    # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not tool_info:
        await query.edit_message_text(
            "‚ö†Ô∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(button_texts.get(lang_code, button_texts['ru']), callback_data="trading_tools")
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    tool_data = tool_info.get(lang_code, tool_info['ru'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message = f"*{tool_data['title']}*\n\n"
    message += f"{tool_data['description']}\n\n"
    message += f"{tool_data['popular_tools']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'recommendations' in tool_data:
        message += f"{tool_data['recommendations']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'examples' in tool_data:
        message += f"{tool_data['examples']}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton(button_texts.get(lang_code, button_texts['ru']), callback_data="trading_tools")]]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_otc_pair_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π OTC –ø–∞—Ä—ã"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        user_data = get_user(user_id)
        if not user_data or not user_data.get('is_approved'):
            await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang_code = user_data.get('language_code', 'tg')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É
        pair_data = query.data.replace("otc_", "").replace("_", "/")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        analyzing_text = {
            'tg': f"‚è≥ –¢–∞“≥–ª–∏–ª–∏ {pair_data}...\n\n–õ—É—Ç—Ñ–∞–Ω, –º—É–Ω—Ç–∞–∑–∏—Ä —à–∞–≤–µ–¥...",
            'ru': f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {pair_data}...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            'uz': f"‚è≥ {pair_data} tahlil qilinmoqda...\n\nIltimos, kuting...",
            'kk': f"‚è≥ {pair_data} —Ç–∞–ª–¥–∞—É –∂“Ø—Ä–≥—ñ–∑—ñ–ª—É–¥–µ...\n\n–ö“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑...",
            'en': f"‚è≥ Analyzing {pair_data}...\n\nPlease wait..."
        }
        
        await query.edit_message_text(
            analyzing_text.get(lang_code, analyzing_text['ru'])
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º–∑–æ–Ω–∞—Ö
        import pytz
        from datetime import datetime, timedelta
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∏—Ö —Ç–∞–π–º–∑–æ–Ω—ã
        timezones = {
            'Moscow': pytz.timezone('Europe/Moscow'),
            'London': pytz.timezone('Europe/London'),
            'New York': pytz.timezone('America/New_York'),
            'Tokyo': pytz.timezone('Asia/Tokyo'),
            'Sydney': pytz.timezone('Australia/Sydney'),
            'Dubai': pytz.timezone('Asia/Dubai')
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö
        current_utc = datetime.now(pytz.UTC)
        time_in_zones = {zone: current_utc.astimezone(tz) for zone, tz in timezones.items()}
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        timezone_names = {
            'tg': {
                'Moscow': '–ú–∞—Å–∫–∞–≤',
                'London': '–õ–æ–Ω–¥–æ–Ω',
                'New York': '–ù—é-–ô–æ—Ä–∫',
                'Tokyo': '–¢–æ–∫–∏–æ',
                'Sydney': '–°–∏–¥–Ω–µ–π',
                'Dubai': '–î—É–±–∞–π',
                'time_header': '‚è∞ –í–∞“õ—Ç–∏ “∑–∞“≥–æ–Ω”£:'
            },
            'ru': {
                'Moscow': '–ú–æ—Å–∫–≤–∞',
                'London': '–õ–æ–Ω–¥–æ–Ω',
                'New York': '–ù—å—é-–ô–æ—Ä–∫',
                'Tokyo': '–¢–æ–∫–∏–æ',
                'Sydney': '–°–∏–¥–Ω–µ–π',
                'Dubai': '–î—É–±–∞–π',
                'time_header': '‚è∞ –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è:'
            },
            'uz': {
                'Moscow': 'Moskva',
                'London': 'London',
                'New York': 'Nyu-York',
                'Tokyo': 'Tokio',
                'Sydney': 'Sidney',
                'Dubai': 'Dubay',
                'time_header': '‚è∞ Jahon vaqti:'
            },
            'kk': {
                'Moscow': '–ú”ô—Å–∫–µ—É',
                'London': '–õ–æ–Ω–¥–æ–Ω',
                'New York': '–ù—å—é-–ô–æ—Ä–∫',
                'Tokyo': '–¢–æ–∫–∏–æ',
                'Sydney': '–°–∏–¥–Ω–µ–π',
                'Dubai': '–î—É–±–∞–π',
                'time_header': '‚è∞ ”ò–ª–µ–º–¥—ñ–∫ —É–∞“õ—ã—Ç:'
            },
            'en': {
                'Moscow': 'Moscow',
                'London': 'London',
                'New York': 'New York',
                'Tokyo': 'Tokyo',
                'Sydney': 'Sydney',
                'Dubai': 'Dubai',
                'time_header': '‚è∞ World time:'
            }
        }
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–π–º–∑–æ–Ω
        localized_tz_names = timezone_names.get(lang_code, timezone_names['en'])
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–Ω–∞–ª–∏–∑)
        await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        direction = random.choice(["BUY", "SELL"])
        confidence = random.randint(70, 90)
        
        # –î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        rsi = random.randint(25, 75)
        macd = round(random.uniform(-0.01, 0.01), 4)
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è Bollinger Bands
        bb_positions = {
            'tg': ["—Å–∞—Ä“≥–∞–¥–∏ –ø–æ—ë–Ω", "–º–∏—ë–Ω–∞", "—Å–∞—Ä“≥–∞–¥–∏ –±–æ–ª–æ"],
            'ru': ["–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞", "—Å—Ä–µ–¥–Ω—è—è", "–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞"],
            'uz': ["quyi chegara", "o'rta", "yuqori chegara"],
            'kk': ["—Ç”©–º–µ–Ω–≥—ñ —à–µ–∫–∞—Ä–∞", "–æ—Ä—Ç–∞—à–∞", "–∂–æ“ì–∞—Ä“ì—ã —à–µ–∫–∞—Ä–∞"],
            'en': ["lower band", "middle", "upper band"]
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        bb_position_list = bb_positions.get(lang_code, bb_positions['ru'])
        bb_position = random.choice(bb_position_list)
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_texts = {
            'tg': {
                'header': f"üìä *–¢–∞“≥–ª–∏–ª–∏ {pair_data}*",
                'signal': "üéØ –°–∏–≥–Ω–∞–ª",
                'confidence': "üìà –ë–æ–≤–∞—Ä”£",
                'expiry': "‚è∞ –í–∞“õ—Ç–∏ –±–∞ –∏—Ç–º–æ–º —Ä–∞—Å–∏–¥–∞–Ω",
                'through': "–∞–∑",
                'min': "–¥–∞“õ–∏“õ–∞",
                'indicators': "üìâ *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä“≥–æ:*",
                'recommendation': "üîç *–¢–∞–≤—Å–∏—è:*",
                'open_deal': "–ö—É—à–æ–¥–∞–Ω–∏ –º—É–æ–º–∏–ª–∞",
                'for': "–±–∞—Ä–æ–∏",
                'with_probability': "–±–æ —ç“≥—Ç–∏–º–æ–ª–∏—è—Ç–∏",
                'risk_warning': "‚ö†Ô∏è *–°–∞–≤–¥–æ –±–æ —Ö–∞—Ç–∞—Ä –∞–ª–æ“õ–∞–º–∞–Ω–¥ –∞—Å—Ç. –ë–∞ –º–∞—Å—ä—É–ª–∏—è—Ç–∏ —Ö—É–¥ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.*"
            },
            'ru': {
                'header': f"üìä *–ê–Ω–∞–ª–∏–∑ {pair_data}*",
                'signal': "üéØ –°–∏–≥–Ω–∞–ª",
                'confidence': "üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                'expiry': "‚è∞ –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏",
                'through': "—á–µ—Ä–µ–∑",
                'min': "–º–∏–Ω",
                'indicators': "üìâ *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*",
                'recommendation': "üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*",
                'open_deal': "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É",
                'for': "–Ω–∞",
                'with_probability': "—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é",
                'risk_warning': "‚ö†Ô∏è *–¢–æ—Ä–≥–æ–≤–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.*"
            },
            'uz': {
                'header': f"üìä *{pair_data} tahlili*",
                'signal': "üéØ Signal",
                'confidence': "üìà Ishonch",
                'expiry': "‚è∞ Tugash vaqti",
                'through': "orqali",
                'min': "daqiqa",
                'indicators': "üìâ *Indikatorlar:*",
                'recommendation': "üîç *Tavsiya:*",
                'open_deal': "Bitim ochish tavsiya etiladi",
                'for': "uchun",
                'with_probability': "ehtimolligi bilan",
                'risk_warning': "‚ö†Ô∏è *Savdo xatarlar bilan bog'liq. O'z javobgarligingiz ostida foydalaning.*"
            },
            'kk': {
                'header': f"üìä *{pair_data} —Ç–∞–ª–¥–∞—É—ã*",
                'signal': "üéØ –°–∏–≥–Ω–∞–ª",
                'confidence': "üìà –°–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫",
                'expiry': "‚è∞ –ê—è“õ—Ç–∞–ª—É —É–∞“õ—ã—Ç—ã",
                'through': "–∞—Ä“õ—ã–ª—ã",
                'min': "–º–∏–Ω",
                'indicators': "üìâ *–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–ª–∞—Ä:*",
                'recommendation': "üîç *“∞—Å—ã–Ω—ã—Å:*",
                'open_deal': "–ú”ô–º—ñ–ª–µ –∞—à—É “±—Å—ã–Ω—ã–ª–∞–¥—ã",
                'for': "“Ø—à—ñ–Ω",
                'with_probability': "—ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã–º–µ–Ω",
                'risk_warning': "‚ö†Ô∏è *–°–∞—É–¥–∞ —Ç”ô—É–µ–∫–µ–ª–¥–µ—Ä–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã. ”®–∑ –∂–∞—É–∞–ø–∫–µ—Ä—à—ñ–ª—ñ–≥—ñ“£—ñ–∑–±–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.*"
            },
            'en': {
                'header': f"üìä *{pair_data} Analysis*",
                'signal': "üéØ Signal",
                'confidence': "üìà Confidence",
                'expiry': "‚è∞ Expiry Time",
                'through': "in",
                'min': "min",
                'indicators': "üìâ *Indicators:*",
                'recommendation': "üîç *Recommendation:*",
                'open_deal': "Recommended to open",
                'for': "for",
                'with_probability': "with probability",
                'risk_warning': "‚ö†Ô∏è *Trading involves risks. Use at your own discretion.*"
            }
        }
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_texts = {
            'tg': {"BUY": "–•–ê–†–ò–î", "SELL": "–§–£–†”Æ–®"},
            'ru': {"BUY": "–ü–û–ö–£–ü–ö–ê", "SELL": "–ü–†–û–î–ê–ñ–ê"},
            'uz': {"BUY": "SOTIB OLISH", "SELL": "SOTISH"},
            'kk': {"BUY": "–°–ê–¢–´–ü –ê–õ–£", "SELL": "–°–ê–¢–£"},
            'en': {"BUY": "BUY", "SELL": "SELL"}
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        texts = analysis_texts.get(lang_code, analysis_texts['ru'])
        dir_text = direction_texts.get(lang_code, direction_texts['ru']).get(direction, direction)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
        keyboard_texts = {
            'tg': {
                'refresh': "üîÑ –ù–∞–≤—Å–æ–∑–∏–∏ —Ç–∞“≥–ª–∏–ª", 
                'more_data': "üìä –ú–∞—ä–ª—É–º–æ—Ç–∏ –±–µ—à—Ç–∞—Ä",
                'home': "üè† –ë–∞ —Å–∞“≥–∏—Ñ–∞–∏ –∞—Å–æ—Å”£",
                'back': "‚Ü©Ô∏è –ë–æ–∑–≥–∞—à—Ç –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ “∑—É—Ñ—Ç“≥–æ"
            },
            'ru': {
                'refresh': "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 
                'more_data': "üìä –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö",
                'home': "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä"
            },
            'uz': {
                'refresh': "üîÑ Tahlilni yangilash", 
                'more_data': "üìä Ko'proq ma'lumot",
                'home': "üè† Bosh sahifaga",
                'back': "‚Ü©Ô∏è Juftliklar ro'yxatiga qaytish"
            },
            'kk': {
                'refresh': "üîÑ –¢–∞–ª–¥–∞—É–¥—ã –∂–∞“£–∞—Ä—Ç—É", 
                'more_data': "üìä –ö”©–±—ñ—Ä–µ–∫ –¥–µ—Ä–µ–∫—Ç–µ—Ä",
                'home': "üè† –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ",
                'back': "‚Ü©Ô∏è –ñ“±–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ –æ—Ä–∞–ª—É"
            },
            'en': {
                'refresh': "üîÑ Refresh Analysis", 
                'more_data': "üìä More Data",
                'home': "üè† Home",
                'back': "‚Ü©Ô∏è Back to Pairs List"
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_texts = keyboard_texts.get(lang_code, keyboard_texts['ru'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton(button_texts['refresh'], callback_data=f"otc_{pair_data.replace('/', '_')}"),
                InlineKeyboardButton(button_texts['more_data'], callback_data=f"otc_more_{pair_data.replace('/', '_')}")
            ],
            [InlineKeyboardButton(button_texts['back'], callback_data="otc_pairs")],
            [InlineKeyboardButton(button_texts['home'], callback_data="return_to_main")]
        ]
        
        # –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (5-10 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        expiry_minutes = random.randint(5, 10)
        expiry_time = (datetime.now() + timedelta(minutes=expiry_minutes)).strftime("%H:%M")
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        direction_emoji = "‚¨ÜÔ∏è" if direction == "BUY" else "‚¨áÔ∏è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–∏—Ä–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        world_time_lines = []
        for zone, time_obj in time_in_zones.items():
            zone_name = localized_tz_names.get(zone, zone)
            time_str = time_obj.strftime("%H:%M:%S")
            world_time_lines.append(f"{zone_name}: *{time_str}*")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–µ –¥–µ–ª–∞—è —Å—Ç—Ä–æ–∫—É —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
        time_info = []
        current_line = ""
        for item in world_time_lines:
            if len(current_line) + len(item) + 3 <= 40:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
                if current_line:
                    current_line += " | "
                current_line += item
            else:
                time_info.append(current_line)
                current_line = item
        if current_line:
            time_info.append(current_line)
        
        time_info_str = "\n".join(time_info)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        result_text = (
            f"{texts['header']}\n\n"
            f"{texts['signal']}: {direction_emoji} *{dir_text}*\n"
            f"{texts['confidence']}: *{confidence}%*\n"
            f"{texts['expiry']}: *{expiry_time}* ({texts['through']} {expiry_minutes} {texts['min']})\n\n"
            f"{texts['indicators']}\n"
            f"‚Ä¢ RSI: `{rsi}`\n"
            f"‚Ä¢ MACD: `{macd}`\n"
            f"‚Ä¢ Bollinger Bands: `{bb_position}`\n\n"
            f"{texts['recommendation']}\n"
            f"{direction_emoji} {texts['open_deal']} *{dir_text}* {texts['for']} {expiry_minutes} {texts['min']} {texts['with_probability']} {confidence}%\n\n"
            f"{localized_tz_names['time_header']}\n"
            f"{time_info_str}\n\n"
            f"{texts['risk_warning']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
        await query.edit_message_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in OTC pair analysis handler: {e}")
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors in the telegram bot."""
    logger.error(f"Exception while handling an update: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –•–∞—Ç–æ–≥”£ —Ä—É—Ö –¥–æ–¥. –õ—É—Ç—Ñ–∞–Ω, –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥."
            )
    except Exception as e:
        logger.error(f"Error in error handler: {str(e)}")

if __name__ == '__main__':
    main()